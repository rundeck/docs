openapi: 3.0.1
info:
  title: Rundeck
  description: Rundeck provides a Web API for use with your applications.
  license:
    name: Apache 2.0
    url: https://www.apache.org/licenses/LICENSE-2.0.html
  version: "46"
externalDocs:
  description: Original Rundeck API Documentation
  url: https://docs.rundeck.com/docs/api/rundeck-api.html
servers:
- url: "{host}/api/{apiversion}"
  variables:
    apiversion:
      default: "44"
    host:
      default: http://localhost:4440
security:
- rundeckApiToken: []
paths:
  /:
    get:
      tags:
      - general
      summary: Get API Information
      description: |-
        Return basic information about the Rundeck API.

        Includes current latest API Version, and base API URL.
      operationId: info
      responses:
        "200":
          description: API Information
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    apiversion: 44
                    href: http://localhost:4441/api/44
  /config/delete:
    post:
      tags:
      - configuration
      - enterprise
      summary: "Delete a Single Config Value [Enterprise]"
      description: |
        Delete a single config by key and strata.

        Authorization required: `ops_admin` or `app_admin` for `system` resource.

        Since: v36
      operationId: ConfigDelete
      requestBody:
        description: |
          Delete Config Request.

          * `key` Required
            * Represents the config to be deleted.
            * Accepts: Any `string`
          * `strata` Optional
            * Whether the config should apply to the current server (`Server`), or to all servers in the cluster (`default`).
            * Accepts: `Server`, `default`
            * Default: `default`
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  key: myCustomConfig
                  strata: default
      responses:
        "204":
          description: No Content if successful
        "403":
          description: Unauthorized response
        "200":
          description: ConfigDelete 200 response
          content:
            application/json:
              schema:
                type: object
  /config/get:
    get:
      tags:
      - configuration
      - enterprise
      summary: "Get Configuration Value [Enterprise]"
      description: |
        Get the value for a configuration key.

        Authorization required: `ops_admin` or `app_admin` for `system` resource.

        Since: v36
      operationId: ConfigGet
      parameters:
      - name: key
        in: query
        description: Configuration key
        required: true
        schema:
          type: string
      - name: strata
        in: query
        description: "Storage Strata. Can be `server` to indicate the current cluster\
          \ member, or a member UUID, or `default` or global configuration (Default\
          \ value)."
        schema:
          type: string
      responses:
        "200":
          description: Result data
          content:
            application/json:
              examples:
                example:
                  value:
                    key: key.name
                    value: config value
                    strata: default
        "403":
          description: Unauthorized response
  /config/getCategories:
    get:
      tags:
      - configuration
      - enterprise
      summary: "Get Configuration Categories [Enterprise]"
      description: |
        Get the Configuration categories.

        Authorization required: `ops_admin` or `app_admin` for `system` resource.

        Since: v36
      operationId: ConfigGetCategories
      responses:
        "200":
          description: |
            Categories Result.

            Result is an array of categories, which may have one level of sub-categories.

            Each category has fields:

            * `name` category name
            * `isSubcat` true if it is a subcategory
            * `parentCategory` name of parent category if it is a subcategory
            * `childNodes` array of subcategories
          content:
            application/json:
              examples:
                example:
                  value: |
                    [
                      {
                        "name": "Plugins",
                        "isSubcat": false,
                        "parentCategory": null,
                        "childNodes": [
                          {
                            "name": "Azure",
                            "isSubcat": true,
                            "parentCategory": "Plugins"
                          },
                          {
                            "name": "DataDog",
                            "isSubcat": true,
                            "parentCategory": "Plugins"
                          },
                          {
                            "name": "GCP",
                            "isSubcat": true,
                            "parentCategory": "Plugins"
                          },
                          {
                            "name": "Jenkins",
                            "isSubcat": true,
                            "parentCategory": "Plugins"
                          },
                          {
                            "name": "Oracle",
                            "isSubcat": true,
                            "parentCategory": "Plugins"
                          },
                          {
                            "name": "Sensu",
                            "isSubcat": true,
                            "parentCategory": "Plugins"
                          },
                          {
                            "name": "Sumo Logic",
                            "isSubcat": true,
                            "parentCategory": "Plugins"
                          }
                        ]
                      },
                      {
                        "name": "SSO",
                        "isSubcat": false,
                        "parentCategory": null,
                        "childNodes": [
                          {
                            "name": "Azure",
                            "isSubcat": true,
                            "parentCategory": "SSO"
                          },
                          {
                            "name": "Okta",
                            "isSubcat": true,
                            "parentCategory": "SSO"
                          },
                          {
                            "name": "Ping",
                            "isSubcat": true,
                            "parentCategory": "SSO"
                          }
                        ]
                      }
                    ]
  /config/list:
    get:
      tags:
      - configuration
      - enterprise
      summary: "List All Current Configurations [Enterprise]"
      description: |
        List all existing configs and their properties.

        Authorization required: `ops_admin` or `app_admin` for `system` resource.

        Since: v36
      operationId: ConfigList
      responses:
        "200":
          description: |
            Call was successful. A list of all configs stored using Configuration Management is returned.

            _NOTE: For a complete list of all configs, reference the System Report page in Rundeck._
          content:
            application/json:
              examples:
                example:
                  value: |-
                    [
                      {
                        "name": "azure.clientId",
                        "value": "test222236",
                        "level": "default",
                        "label": "Azure Client ID",
                        "category": "Plugins/Azure"
                      },
                      {
                        "name": "myCustomConfig",
                        "value": "myConfigValue",
                        "level": "default",
                        "category": "Custom",
                      },
                      {
                        "name": "myCustomConfig2",
                        "value": "myConfigValue2",
                        "level": "default",
                        "category": "Custom",
                      }
                    ]
        "403":
          description: Unauthorized response
  /config/listStoragePlugins:
    get:
      tags:
      - configuration
      - enterprise
      summary: "List All Currently configured Storage Plugins [Enterprise]"
      description: |
        List all existing configs and their properties for storage plugins.

        Authorization required: `app_admin`.
      operationId: StorageConfigList
      responses:
        "200":
          description: |
            Call was successful. A list of all configs stored using Configuration Management is returned.

            _NOTE: For a complete list of all configs, reference the System Report page in Rundeck._
          content:
            application/json:
              examples:
                example:
                  value: "[\n      {\n        \"type\": \"exampleProvider\",\n   \
                    \     \"path\": \"keys/exampleProvider\",\n        \"extra\":\
                    \ {\n            \"extraConfig\": \"value\"\n        },\n    \
                    \    \"config\": {\n            \"password\": \"pass\",\n    \
                    \        \"username\": \"user123\",\n        }\n      },\n   \
                    \   {\n        \"type\": \"testprovider2\",\n        \"path\"\
                    : \"keys/testprovider2\",\n        \"extra\": {\n            \"\
                    extraConfig\": \"value\"\n        },\n        \"config\": {\n\
                    \            \"password\": \"pass\",\n            \"username\"\
                    : \"user123\",\n        }\n        \n      }\n]"
        "403":
          description: Unauthorized response
  /config/metaList:
    get:
      tags:
      - configuration
      - enterprise
      summary: "List Configuration Metadata [Enterprise]"
      description: |
        List all known configuration key names and metadata.

        Authorization required: `ops_admin` or `app_admin` for `system` resource.

        Since: v36
      operationId: ConfigMetaList
      responses:
        "200":
          description: |
            Call was successful. A list of all configuration keys is returned.
          content:
            application/json:
              examples:
                example:
                  value: |-
                    [
                      {
                        "key": "rundeck.api.tokens.duration.max",
                        "visibility": "Advanced",
                        "category": "API",
                        "strata": "default",
                        "required": false,
                        "restart": true,
                        "label": "API Token Duration Max",
                        "datatype": "String",
                        "encrypted": false,
                        "defaultValue": "",
                        "link": "",
                        "description": "",
                        "authRequired": "app_admin"
                      },
                      {
                        "key": "rundeck.authRateLimiting.enabled",
                        "visibility": "Advanced",
                        "category": "Authentication",
                        "strata": "default",
                        "required": false,
                        "restart": false,
                        "label": "Enable authentication rate limiting feature",
                        "datatype": "Boolean",
                        "encrypted": false,
                        "defaultValue": "FALSE",
                        "link": "https://docs.rundeck.com/docs/administration/security/rateLimiting.html",
                        "description": "Enable or disable the authentication rate limiting feature",
                        "authRequired": "ops_admin"
                      }
                    ]
        "403":
          description: Unauthorized response
  /config/refresh:
    post:
      tags:
      - configuration
      - enterprise
      - system
      summary: "Refresh Configurations from Properties File [Enterprise]"
      description: |
        Make the Rundeck server re-read the config properties file.

        Authorization required: `ops_admin` or `app_admin` for `system` resource.

        Since: v36
      operationId: refresh
      responses:
        "200":
          description: |-
            The call was successful. Rundeck will reread the config properties file.

            _NOTE: Some config changes will not go into effect after a reload, and require a full restart of Rundeck._
          content:
            application/json:
              examples:
                example:
                  value:
                    msg: Rundeck configuration refreshed
  /config/restart:
    post:
      tags:
      - configuration
      - enterprise
      - system
      summary: "Restart the Rundeck Server [Enterprise]"
      description: |-
        Restart the server. Requires that the server container supports the operation.

        Authorization required: `ops_admin` for `system` resource

        Since: v36
      operationId: restart
      responses:
        "200":
          description: The call was successful. The Rundeck server will immediately
            restart.
          content:
            application/json:
              examples:
                example:
                  value:
                    msg: Result message
                    restarting: true
  /config/save:
    post:
      tags:
      - configuration
      - enterprise
      summary: "Create or Update Configurations [Enterprise]"
      description: |
        Create or update configs and properties.

        Authorization required: `ops_admin` or `app_admin` for `system` resource.

        Since: v36
      operationId: ConfigSave
      requestBody:
        description: |
          Update Config Request.
          List of config values, each value contains:

          * `key` Required
            * Represents either a new config to be created, or an existing config to be updated.
            * Accepts: Any `string`
          * `value` Required
            * The value for the desired config `key`.
            * Accepts: Any `string`
          * `strata` Optional
            * Whether the config should apply to the current server (`Server`), or to all servers in the cluster (`default`).
            * Accepts: `Server`, `default`
            * Default: `default`
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
            examples:
              example:
                value: |-
                  [
                    {
                      "key": "myCustomConfig",
                      "value": "newValueForCustomConfig",
                      "strata": "default"
                    },
                    {
                      "key": "myNewCustomConfig",
                      "value": "valueOfNewCustomConfig",
                      "strata": "default"
                    }
                  ]
        required: true
      responses:
        "200":
          description: All configs were successfully saved or updated. A payload reflecting
            save or creation status is returned. `restart` will indicate if the server
            must be restarted for some changes to take effect.
          content:
            application/json:
              examples:
                example:
                  value:
                    msg: Saved
                    restart: true
                    created:
                    - myNewCustomConfig
                    updated:
                    - myCustomConfig
        "400":
          description: Bad request
        "403":
          description: Unauthorized response
  /config/saveStoragePlugins:
    post:
      tags:
      - configuration
      - enterprise
      - plugins
      - storage
      summary: "Create or Update Storage Plugins [Enterprise]"
      description: "Create or update configs and properties for storage plugins.\n\
        \nAuthorization required: `app_admin`. \n\n"
      operationId: StorageConfigSave
      requestBody:
        description: |
          Update Storage Plugin Config Request.
          Configured plugins to be saved should be specified in the `plugins` array. Plugins that have been deleted should be specified in the `removedPlugins` array.
        content:
          application/json:
            schema:
              type: array
              items:
                type: object
            examples:
              example:
                value: "{\n  \"plugins\": {\n     \"0\" : {\n        {\n        \"\
                  type\": \"exampleProvider1\",\n        \"path\": \"keys/exampleProvider1\"\
                  ,\n        \"extra\": {\n            \"extraConfig\": \"value\"\n\
                  \        },\n        \"config\": {\n            \"password\": \"\
                  pass\",\n            \"username\": \"user123\",\n        }\n   \
                  \   },\n     }\n  },\n  \"removedPlugins\": {\n     \"0\" : {\n\
                  \        {\n        \"type\": \"exampleProvider2\",\n        \"\
                  path\": \"keys/exampleProvider2\",\n        \"extra\": {\n     \
                  \       \"extraConfig\": \"value\"\n        },\n        \"config\"\
                  : {\n            \"password\": \"pass\",\n            \"username\"\
                  : \"user123\",\n        }\n      },\n     }\n  }\n  \n}"
        required: true
      responses:
        "200":
          description: All configs were successfully saved or updated. A payload reflecting
            save or creation status is returned.
          content:
            application/json:
              examples:
                example:
                  value:
                    msg: Saved
                    restart: true
                    created:
                    - myNewCustomConfig
                    updated:
                    - myCustomConfig
                    deleted:
                    - myDeletedCustomConfig
        "400":
          description: Bad request
        "403":
          description: Unauthorized response
  /enterprise/cluster/executions/disable:
    post:
      tags:
      - cluster
      - enterprise
      - execution mode
      summary: "Set Execution Mode for a Cluster Member [Enterprise]"
      description: "Set the Execution Mode for the target cluster member.\n\n* `/enterprise/cluster/executions/enable`:\
        \ Set execution mode to *Active* \n* `/enterprise/cluster/executions/disable`:\
        \ Set execution mode to *Passive* \n\nIf the UUID parameter matches the current\
        \ cluster member, the mode will be changed immediately, otherwise the status\
        \ will be `pending`.\n\nAuthorization required: (enable) `enable_executions`\
        \ or `admin` for `system` resource, or \n(disable) `disable_executions` or\
        \ `admin` for `system` resource.\n\nSince: v41\n"
      operationId: apiToggle
      parameters:
      - name: uuid
        in: query
        description: UUID of Member
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: |
            Result.

            `status`
            :   `pending` indicates the request has been posted, `complete` indicates the request has taken effect already.

            `executionMode`
            :   The requested execution mode, either `active` or `passive`

            `uuid`
            :   The target cluster member UUID
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    status: pending
                    executionMode: active
                    uuid: a3de6030-2b7a-47e3-b46f-3e46a11a85d9
  /enterprise/cluster/executions/enable:
    post:
      tags:
      - cluster
      - enterprise
      - execution mode
      summary: "Set Execution Mode for a Cluster Member [Enterprise]"
      description: "Set the Execution Mode for the target cluster member.\n\n* `/enterprise/cluster/executions/enable`:\
        \ Set execution mode to *Active* \n* `/enterprise/cluster/executions/disable`:\
        \ Set execution mode to *Passive* \n\nIf the UUID parameter matches the current\
        \ cluster member, the mode will be changed immediately, otherwise the status\
        \ will be `pending`.\n\nAuthorization required: (enable) `enable_executions`\
        \ or `admin` for `system` resource, or \n(disable) `disable_executions` or\
        \ `admin` for `system` resource.\n\nSince: v41\n"
      operationId: apiToggle_1
      parameters:
      - name: uuid
        in: query
        description: UUID of Member
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: |
            Result.

            `status`
            :   `pending` indicates the request has been posted, `complete` indicates the request has taken effect already.

            `executionMode`
            :   The requested execution mode, either `active` or `passive`

            `uuid`
            :   The target cluster member UUID
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    status: pending
                    executionMode: active
                    uuid: a3de6030-2b7a-47e3-b46f-3e46a11a85d9
  /enterprise/license:
    get:
      tags:
      - enterprise
      summary: View License
      description: Returns metadata about the current License for Rundeck Enterprise
      operationId: verify
      responses:
        "200":
          description: License info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LicenseInfoResponse'
    post:
      tags:
      - enterprise
      summary: Set License Key
      description: Uploads a license key for Rundeck Enterprise
      operationId: apiStoreLicense
      parameters:
      - name: license_agreement
        in: query
        description: true to agree with the Rundeck Enterprise License
        required: true
        schema: {}
        example: "true"
      requestBody:
        description: The Rundeck Enterprise License key file
        content:
          application/x-rundeck-license:
            schema:
              type: string
              format: text/plain
            examples:
              example-license-key:
                summary: Example License Key data
                value: |
                  -----BEGIN PGP MESSAGE-----
                  Version: ...
                  ...
                  -----END PGP MESSAGE-----
        required: true
      responses:
        "200":
          description: Basic response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/basic'
              examples:
                example:
                  value:
                    message: ok
        "400":
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                example:
                  value:
                    error: true
                    errorCode: api.error.code
                    message: not ok
                    apiversion: 41
  /enterprise/project/{project}/webhooks/{id}/debug-events:
    get:
      tags:
      - enterprise
      - webhook
      summary: "Get Webhook Debug Events [Enterprise]"
      description: |
        Return webook debug events.

        Authorization Required: `app_admin` to `webhook` resource.
      operationId: getDebugEvents
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Webhook ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: debug events
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/WebhookEvaluation'
  /enterprise/system-report/datasets:
    get:
      tags:
      - enterprise
      - system report
      summary: List System Report Datasets
      description: |
        List the system report datasets.

        Authorization required: `ops_admin` for `system`

        Since: v44
      operationId: listDatasets
      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/SystemReportItem'
              examples:
                example:
                  value: |
                    [
                      {
                        "label": "Statistics",
                        "name": "projectStats"
                      },
                      {
                        "label": "Framework Configuration",
                        "name": "frameworkConfig"
                      },
                      {
                        "label": "Rundeck Configuration",
                        "name": "rundeckConfig"
                      },
                      {
                        "label": "System Environment",
                        "name": "systemEnv"
                      },
                      {
                        "label": "Licensing",
                        "name": "licensing"
                      },
                      {
                        "label": "Full Configuration",
                        "name": "fullConfig"
                      }
                    ]
  /enterprise/system-report/datasets/{dataset}:
    get:
      tags:
      - enterprise
      - system report
      summary: Get System Report Dataset by Name
      description: |
        Get a system report dataset.

        Authorization required: `ops_admin` for `system`

        Since: v44
      operationId: getDataset
      parameters:
      - name: dataset
        in: path
        description: Dataset Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/DataSet'
  /execution/{id}:
    get:
      tags:
      - execution
      summary: Execution Info
      description: Get the status for an execution by ID.
      operationId: apiExecution
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "See: Listing Running Executions. JSON response requires API\
            \ v14."
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 1
                    href: "[url]"
                    permalink: "[url]"
                    status: succeeded/failed/aborted/timedout/retried/other
                    project: "[project]"
                    user: "[user]"
                    date-started:
                      unixtime: 1431536339809
                      date: 2015-05-13T16:58:59Z
                    date-ended:
                      unixtime: 1431536346423
                      date: 2015-05-13T16:59:06Z
                    job:
                      id: "[uuid]"
                      href: "[url]"
                      permalink: "[url]"
                      averageDuration: 6094
                      name: "[name]"
                      group: "[group]"
                      project: "[project]"
                      description: ""
                      options:
                        opt2: a
                        opt1: testvalue
                    description: "echo hello there [... 5 steps]"
                    argstring: -opt1 testvalue -opt2 a
                    successfulNodes:
                    - nodea
                    - nodeb
                    failedNodes:
                    - nodec
                    - noded
    delete:
      tags:
      - execution
      summary: Delete an Execution
      description: |+
        Delete an execution by ID.

        Authorization requirement: Requires the `delete_execution` action allowed for a `project` in the `application` context.

        See: [Administration - Access Control Policy - Application Scope Resources and Actions](https://docs.rundeck.com/docs/administration/security/authorization.html#application-scope-resources-and-actions)

      operationId: apiExecutionDelete
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
  /execution/{id}/abort:
    post:
      tags:
      - execution
      summary: Aborting Executions
      description: Abort a running execution by ID.
      operationId: apiExecutionAbort
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      - name: asUser
        in: query
        description: Specifies a username identifying the user who aborted the execution.
          Requires `runAs` actiion authorization.
        required: false
        schema:
          type: string
      - name: forceIncomplete
        in: query
        description: "if `true`, forces a running execution to be marked as \"incomplete\"\
          ."
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: |
            The status of the abort action will be included as an element.

            The `[abort-state]` will be one of: "pending", "failed", or "aborted".

            If the `[abort-state]` is "failed", then `[reason]` will be a textual description of the reason.

            Authorization required:
            * action: `kill`, or `admin`, `app_admin`
            * resource: `execution`
          content:
            application/json:
              examples:
                example:
                  value: |-
                    {
                      "abort": {
                        "status": "[abort-state]",
                        "reason": "[reason]"
                      },
                      "execution": {
                        "id": "[id]",
                        "status": "[execution status]",
                        "href": "[API href]",
                      }
                    }
  /execution/{id}/input/files:
    get:
      tags:
      - execution
      summary: List Input Files for an Execution
      description: "List input files used for an execution. Since: V19"
      operationId: apiExecutionInputFiles
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: ""
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionFileInfoList'
              examples:
                example:
                  value:
                    files:
                    - id: 382c7596-435b-4103-8781-6b32fbd629b2
                      user: admin
                      fileState: deleted
                      sha: 9284ed4fd7fe1346904656f329db6cc49c0e7ae5b8279bff37f96bc6eb59baad
                      jobId: 7b3fff59-7a2d-4a31-a5b2-dd26177c823c
                      dateCreated: 2017-02-24T23:26:48Z
                      serverNodeUUID: 3425B691-7319-4EEE-8425-F053C628B4BA
                      size: 12
                      expirationDate: 2017-02-24T23:27:18Z
                      execId: 2837
  /execution/{id}/output:
    get:
      tags:
      - execution
      summary: Execution Output
      description: |+
        Get the output for an execution by ID. The execution can be currently running or may have already completed. Output can be filtered down to a specific node or workflow step.

        The log output for each execution is stored in a file on the Rundeck server, and this API endpoint allows you to retrieve some or all of the output, in several possible formats: json, and plain text. When retrieving the plain text output, some metadata about the log is included in HTTP Headers. JSON includes metadata about each output log line, as well as metadata about the state of the execution and log file, and your current index location in the file.

        Output can be selected by Node or Step Context or both as of API v10.

        Several parameters can be used to retrieve only part of the output log data. You can use these parameters to more efficiently retrieve the log content over time while an execution is running.

        The log file used to store the execution output is a formatted text file which also contains metadata about each line of log output emitted during an execution. Several data values in this API endpoint refer to "bytes", but these do not reflect the size of the final log data; they are only relative to the formatted log file itself. You can treat these byte values as opaque locations in the log file, but you should not try to correlate them to the actual textual log lines.

        #### Tailing Output

        To "tail" the output from a running execution, you will need to make a series of requests to this API endpoint, and update the `offset` value that you send to reflect the returned `dataoffset` value that you receive.  This gives you a consistent pointer into the output log file.

        When starting these requests, there are two mechanisms you can use:

        1. Start at the beginning, specifying either a `lastmod` or a `offset` of 0
        2. Start at the end, by using `lastlines` to receive the last available set of log lines.

        After your first request you will have the `dataoffset` and `lastmod` response values you can use to continue making requests for subsequent log output. You can choose several ways to do this:

        1. Use the `offset` and `lastmod` parameters to indicate modification time and receive as much output as is available
        2. Use the `offset` and `maxlines` parameter to specify a maximum number of log entries
        3. Use only the `offset` parameter and receive as much output as is available.

        After each request, you will update your `offset` value to reflect the `dataoffset` in the response.

        All log output has been read when the `iscompleted` value is "true".

        Below is some example pseudo-code for using this API endpoint to follow the output of a running execution "live":

        * set offset to 0
        * set lastmod to 0
        * Repeat until `iscompleted` response value is "true":
            * perform request sending `offset` and `lastmod` parameters
            * print any log entries, update progress bar, etc.
            * Record the resulting `dataoffset` and `lastmod` response values for the next request
            * if `unmodified` is "true", sleep for 5 seconds
            * otherwise sleep for 2 seconds

        **Authorization:**

        This endpoint requires that the user have `read` access to the Job or to Adhoc executions to retrieve the output content.

      operationId: apiExecutionOutput
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      - name: nodename
        in: query
        description: "Node Name, all results will be filtered for only this node."
        schema:
          type: string
      - name: stepctx
        in: query
        description: Step Context ID. This is a string in the form `1/2/3` indicating
          the step context.
        schema:
          type: string
      - name: offset
        in: query
        description: byte offset to read from in the file. 0 indicates the beginning.
        schema:
          type: integer
      - name: lastlines
        in: query
        description: number of lines to retrieve from the end of the available output.
          If specified it will override the `offset` value and return only the specified
          number of lines at the end of the log.
        schema:
          type: integer
      - name: lastmod
        in: query
        description: "epoch datestamp in milliseconds, return results only if modification\
          \ changed since the specified date OR if more data is available at the given\
          \ `offset`."
        schema:
          type: integer
          format: int64
      - name: maxlines
        in: query
        description: maximum number of lines to retrieve forward from the specified
          offset.
        schema:
          type: integer
      - name: compacted
        in: query
        description: "if true, results will be in compacted form. Since: v21"
        schema:
          type: boolean
      - name: format
        in: query
        description: Specify output format
        schema:
          type: string
          enum:
          - json
          - text
      responses:
        "200":
          description: "Log Output Response. \n\nThe result will contain a set of\
            \ data values reflecting the execution's status, as well as the status\
            \ and read location in the output file.\n\n* In JSON, there will be an\
            \ object containing these fields.\n* In plain text format, HTTP headers\
            \ will include some information about the loging state, but individual\
            \ log entries will only be returned in textual form without metadata.\n\
            \nContents:\n\n* `id`: ID of the execution\n* `message`: optional text\
            \ message indicating why no entries were returned\n* `error`: optional\
            \ text message indicating an error case\n* `unmodified`: true/false, (optional)\
            \ \"true\" will be returned if the `lastmod` parameter was used and the\
            \ file had not changed\n* `empty`: true/false, (optional) \"true\" will\
            \ be returned if the log file does not exist or is empty, which may occur\
            \ if the log data is requested before any output has been stored.\n* `offset`:\
            \ Byte offset to read for the next set of data\n* `completed`: true/false,\
            \ \"true\" if the current log entries or request parameters include all\
            \ of the available data\n* `execCompleted`: true/false, \"true\" if the\
            \ execution has completed.\n* `hasFailedNodes`: true/false, \"true\" if\
            \ the execution has recorded a list of failed nodes\n* `execState`: execution\
            \ state, one of \"running\",\"succeeded\",\"failed\",\"aborted\"\n* `lastModified`:\
            \ (long integer), millisecond timestamp of the last modification of the\
            \ log file\n* `execDuration`: (long integer), millisecond duration of\
            \ the execution\n* `percentLoaded`: (float), (optional) percentage of\
            \ the output which has been loaded by the parameters to this request\n\
            * `totalSize`: (integer), total bytes available in the output file\n*\
            \ `filter` - if a `node` or `step` filter was used\n    - `nodename` -\
            \ value of the node name filter\n    - `stepctx` - value of the step context\
            \ filter\n* `compacted`: `true` if compacted form was requested and is\
            \ used in the response (API v21+)\n* `compactedAttr`: name of JSON log\
            \ entry key used by default for fully compacted entries (API v21+)\n\n\
            Each log entry will be included in a section called `entries`.\n\n* In\
            \ JSON, `entries` will contain an array of Objects, each containing the\
            \ following format\n\nContent of each Log Entry object:\n\n* `time`: Timestamp\
            \ in format: \"HH:MM:SS\"\n* `absolute_time`: Timestamp in format: \"\
            yyyy-MM-dd'T'HH:mm:ssZ\"\n* `level`: Log level, one of: ERROR,WARN,NORMAL,VERBOSE,DEBUG,OTHER\n\
            * `log`: The log message\n* `user`: User name\n* `command`: Workflow command\
            \ context string\n* `node`: Node name\n* `stepctx`: The step context such\
            \ as `1` or `1/2/3`\n* `metadata`: Map of extra metadata for the entry\
            \ (API v43+)\n\n#### Log Entries in Compacted Form (API v21+)\n\nAs of\
            \ API v21, you can specify `compacted=true` in the URL parameters, which\
            \ will send the Output Content in \"compacted\" form. This will be indicated\
            \ by the `compacted`=`true` value in\nthe result data.\n\nIn this mode,\
            \ Log Entries are compacted by only including the changed values from\
            \ the\nprevious Log Entry in the list.  The first Log Entry in the results\
            \ will always have complete information.  Subsequent entries may include\
            \ only changed values.\n\nIn JSON format, if the `compactedAttr` value\
            \ is `log` in the response data, and only the `log` value changed relative\
            \ to a previous Log Entry, the Log Entry may consist only of the log message\
            \ string. That is, the array entry will be a string, not an object.\n\n\
            When no values changed from the previous Log Entry, the Log Entry will\
            \ be an empty object.\n\nWhen an entry value is not present in the subsequent\
            \ Log Entry, but was present in the previous\none, in JSON this will be\
            \ represented with a `null` value."
          headers:
            X-Rundeck-ExecOutput-Error:
              description: The `error` field (text format only)
              schema:
                type: string
            X-Rundeck-ExecOutput-Message:
              description: The `message` field (text format only)
              schema:
                type: string
            X-Rundeck-ExecOutput-Empty:
              description: The `empty` field (text format only)
              schema:
                type: boolean
            X-Rundeck-ExecOutput-Unmodified:
              description: The `unmodified` field (text format only)
              schema:
                type: boolean
            X-Rundeck-ExecOutput-Offset:
              description: The `offset` field (text format only)
              schema:
                type: integer
            X-Rundeck-ExecOutput-Completed:
              description: The `completed` field (text format only)
              schema:
                type: boolean
            X-Rundeck-Exec-Completed:
              description: The `execCompleted` field (text format only)
              schema:
                type: boolean
            X-Rundeck-Exec-State:
              description: The `execState` field (text format only)
              schema:
                type: string
            X-Rundeck-Exec-Duration:
              description: the `execDuration` field (text format only)
              schema:
                type: integer
            X-Rundeck-ExecOutput-LastModifed:
              description: The `lastModified` field (text format only)
              schema:
                type: string
                format: iso
            X-Rundeck-ExecOutput-TotalSize:
              description: The `totalSize` field (text format only)
              schema:
                type: integer
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  description: |2-

                    In this example, four log entries are included. The first includes all Log Entry fields.
                    The second is only a String, indicating only `log` value changed.
                    The third is an empty object, indicating the previous Log Entry was repeated identically.
                    The fourth specifies a new value for `stepctx` and `log` and `level` to use.
                    The fifth specifies a `node` and `stepctx` of `null`: indicating the `node` and `stepctx` values should be removed for
                    this Log Entry.
                  value:
                    id: 1
                    compacted: "true"
                    compactedAttr: log
                    entries:
                    - time: 17:00:00
                      absolute_time: 1970-01-02T01:00:00Z
                      level: NORMAL
                      log: This is the first log message
                      user: bob
                      node: anode1
                      stepctx: "1"
                    - This is the second log message
                    - {}
                    - stepctx: "2"
                      level: DEBUG
                      log: This is the fourth log message
                    - log: This is the fifth log message
            text/plain:
              schema:
                type: string
                description: Textual log output
              examples:
                example:
                  value: Log output text...
  /execution/{id}/output/node/{nodename}:
    get:
      tags:
      - execution
      summary: Execution Output For Node
      description: Get the output for an execution filtered for a specific node.
      operationId: apiExecutionOutputNodeFilter
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      - name: nodename
        in: path
        description: "Node Name, all results will be filtered for only this node."
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "Log Output Response. This endpoint response is the same as\
            \ the Execution Output `/execution/{id}/output` response using the `nodename`\
            \ parameter."
          content:
            application/json:
              schema:
                type: object
  /execution/{id}/output/node/{nodename}/step/{stepctx}:
    get:
      tags:
      - execution
      summary: Execution Output For Node and Step
      description: Get the output for an execution filtered for a specific node and
        step.
      operationId: apiExecutionOutputNodeStepFilter
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      - name: nodename
        in: path
        description: "Node Name, all results will be filtered for only this node."
        required: true
        schema:
          type: string
      - name: stepctx
        in: path
        description: Step Context ID. This is a string in the form `1/2/3` indicating
          the step context.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "Log Output Response. This endpoint response is the same as\
            \ the Execution Output `/execution/{id}/output` response using the `nodename`\
            \ and `stepctx` parameters."
          content:
            application/json:
              schema:
                type: object
  /execution/{id}/output/state:
    get:
      tags:
      - execution
      summary: Execution Output with State
      description: |
        Get the metadata associated with workflow step state changes along with the log output, optionally excluding log output.

        JSON response requires API v14.
      operationId: apiExecutionStateOutput
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      - name: stateOnly
        in: query
        description: "Whether to include only state information. When false, log entries\
          \ will be included."
        schema:
          type: boolean
      responses:
        "200":
          description: |-
            The output format is the same as [Execution Output](#execution-output), with this change:

            * in the `entries` section, each entry will have a `type` value indicating the entry type
                - `log` a normal log entry
                - `stepbegin` beginning of the step indicated by the `stepctx`
                - `stepend` finishing of the step
                - `nodebegin` beginning of execution of a node for the given step
                - `nodeend` finishing of execution of a node for the given step
            * metadata about the entry may be included in the entry
          content:
            application/json:
              schema:
                type: object
  /execution/{id}/output/step/{stepctx}:
    get:
      tags:
      - execution
      summary: Execution Output For Step
      description: Get the output for an execution filtered for a specific step.
      operationId: apiExecutionOutputStepFilter
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      - name: stepctx
        in: path
        description: Step Context ID. This is a string in the form `1/2/3` indicating
          the step context.
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "Log Output Response. This endpoint response is the same as\
            \ the Execution Output `/execution/{id}/output` response using the `stepctx`\
            \ parameter."
          content:
            application/json:
              schema:
                type: object
  /execution/{id}/result/data:
    get:
      tags:
      - enterprise
      summary: "Get Execution Result Data [Enterprise]"
      description: |
        Retrieve the Result Data created by a Job using the [Result Data feature](https://docs.rundeck.com/docs/manual/execution-lifecycle/result-data.html) in JSON format.

        Note: In a Rundeck Cluster, Result Data may not be locally available and must be retrieved by the server asynchronously before it can be returned.

        You can handle this situation in two ways: either use the `wait=true` URL parameter, to indicate that the API request should block until the data is retrieved (waiting up to 10 seconds), or if the response has HTTP status 202 it means that the asynchronous request was started but has not completed yet and you can retry the same API request shortly.

        Since: v40
      operationId: apiExecutionDataExport
      parameters:
      - name: wait
        in: query
        description: "if true and the data is not immediately available, the response\
          \ will wait until the data is retrieved, or a timeout occurs. Otherwise\
          \ the response may return 202 status if data must be retrieved first."
        schema:
          type: boolean
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "Result data from the Job execution, the format will depend\
            \ on the data generated."
          content:
            application/json: {}
        "202":
          description: "Request was accepted but not fulfilled. This indicates the\
            \ data will be retrieved asynchronously before it can be made available.\
            \ Retry the request later to retrieve the data. See also: the `wait` parameter"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultDataLoadingState'
        "404":
          description: Data was not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultDataBasicErrorResponse'
  /execution/{id}/result/dataAvailable:
    get:
      tags:
      - enterprise
      summary: "Check Execution Result Data Availability [Enterprise]"
      description: |
        Check whether the execution has Result Data created by a Job using the [Result Data feature](https://docs.rundeck.com/docs/manual/execution-lifecycle/result-data.html).

        Since: v40
      operationId: apiExecutionDataAvailable
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Data available
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultDataAvailableResponse'
        "404":
          description: "No data can be retrieved for the Execution. If an error occurred,\
            \ the `error` entry will contain a description of the error."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ResultDataBasicErrorResponse'
  /execution/{id}/roimetrics/available:
    get:
      tags:
      - ROI
      - enterprise
      - incubating
      summary: "INCUBATING: ROI Metrics Data Available [Enterprise]"
      description: Get result indicating whether ROI metrics data is available.
      operationId: getRoiMetricsDataAvailability
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Availability Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoiMetricsController.DataAvailableResponse'
        "404":
          description: No Data Availability Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RoiMetricsController.DataAvailableResponse'
  /execution/{id}/roimetrics/data:
    get:
      tags:
      - ROI
      - enterprise
      - incubating
      summary: "INCUBATING: ROI Metrics Data [Enterprise]"
      description: Get result data for ROI Metrics.
      operationId: getRoiMetricsDataApi
      parameters:
      - name: wait
        in: query
        description: "if true and the data is not immediately available, the response\
          \ will wait until the data is retrieved, or a timeout occurs. Otherwise\
          \ the response may return 202 status if data must be retrieved first."
        schema:
          type: boolean
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "ROI Metrics data from the Execution, the format will depend\
            \ on the data generated."
          content:
            application/json: {}
        "202":
          description: "Request was accepted but not fulfilled. This indicates the\
            \ data will be retrieved asynchronously before it can be made available.\
            \ Retry the request later to retrieve the data. See also: the `wait` parameter"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ROIDataLoadingState'
        "404":
          description: Data was not available.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ROIDataBasicErrorResponse'
  /execution/{id}/state:
    get:
      tags:
      - execution
      summary: Execution State
      description: |
        Get detail about the node and step state of an execution by ID. The execution can be currently running or completed.

        JSON response requires API v14.
      operationId: apiExecutionState
      parameters:
      - name: id
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: "The content of the response contains state information for\
            \ different parts of the workflow:\n\n* overall state\n* per-node overall\
            \ state\n* per-step node state\n\nA workflow can have a step which consists\
            \ of a sub-workflow, so each particular step has a \"Step Context Identifier\"\
            \ \nwhich defines its location in the workflow(s), and looks something\
            \ like \"1/5/2\". Each number identifies the step \nnumber (starting at\
            \ 1) at a workflow level. If there is a \"/\" in the context identifier,\
            \ it means there are \nsub-workflow step numbers, and each preceding number\
            \ corresponds to a step which has a sub-workflow.\n\nTo identify the state\
            \ of a particular node at a particular step, both a Node name, and a Step\
            \ Context Identifier are \nnecessary.\n\nIn the result set returned by\
            \ this API call, state information is organized primarily by Step and\
            \ is structured in \nthe same way as the workflow.  This means that sub-workflows\
            \ will have nested state structures for their steps.\n\nThe state information\
            \ for a Node will not contain the full set of details for the Step and\
            \ Node, since this \ninformation is present in the workflow structure\
            \ which contains the step state.\n\n#### State Result Content\n\nThe result\
            \ set contains this top-level structure:\n\n* general overall state information\n\
            \    - `startTime` execution start time (see *Timestamp format* below)\n\
            \    - `endTime` execution end time if complete\n    - `updateTime` last\
            \ update time\n    - `executionState` overall execution state\n* `allNodes`\
            \ contains a *Node Name List* (see below) of nodes known to be targeted\
            \ in some workflow\n* `nodes` contains an *Overall Node State List* of\
            \ per-node step states\n* `serverNode` name of the server node\n* `executionId`\
            \ current execution ID\n* `completed` true/false whether the execution\
            \ is completed\n* A *Workflow Section* (see below)\n\n**Workflow Section**\n\
            \nEach Workflow Section within the result set will contain these structures\n\
            \n* `stepCount` Number of steps in the workflow\n* `targetNodes` contains\
            \ a Node Name List identifying the target nodes of the current workflow\n\
            * `steps` contains a *Step State List* (see below) of information and\
            \ state for each step\n\n**Node Name List**\n\nConsists of a sequence\
            \ of node name entries, identifying each entry by a name.\n\n\nIn JSON,\
            \ an array of node names.\n\n**Overall Node State List**\n\nConsists of\
            \ a sequence of entries for each Node. Each entry contains\n\n* `name`\
            \ node name\n* `steps` list of simple state indicator for steps executed\
            \ by this node\n\nState Indicators:\n\n* `stepctx` Step Context Identifier\n\
            * `executionState` execution state for this step and node\n\n\nIn JSON:\
            \ an object where each key is a node name, and the value is an array of\
            \ State indicators.  A state indicator \nis an object with two keys, `stepctx`\
            \ and `executionState`\n\n``` json\n{\n    \"abc\": [\n      {\n     \
            \   \"executionState\": \"SUCCEEDED\",\n        \"stepctx\": \"1\"\n \
            \     },\n      {\n        \"executionState\": \"SUCCEEDED\",\n      \
            \  \"stepctx\": \"2/1\"\n      }\n    ]\n}\n```\n\n**Step State List**\n\
            \nA list of Step State information.  Each step is identified by its number\
            \ in the workflow (starting at 1) and its step\n context\n\n* `id` the\
            \ step number (JSON)\n* `stepctx` the step context identifier in the workflow\n\
            * general overall state information for the step\n    - `startTime` execution\
            \ start time\n    - `endTime` execution end time if complete\n    - `updateTime`\
            \ last update time\n    - `executionState` overall execution state\n*\
            \ `nodeStep` true/false. true if this step directly targets each node\
            \ from the targetNodes list.  If true, this means\n the step will contain\
            \ a `nodeStates` section\n* `nodeStates` a *Node Step State Detail List*\
            \ (see below) for the target nodes if this is a node step.\n* `hasSubworkflow`\
            \ true/false. true if this step has a sub-workflow and a `workflow` entry\n\
            * `workflow` this section contains a Workflow Section\n\n**Node Step State\
            \ Detail List**\n\nA sequence of state details for a set of Nodes for\
            \ the containing step. Each entry will contain:\n\n* `name` the node name\n\
            * state information for the Node\n    - `startTime` execution start time\n\
            \    - `endTime` execution end time if complete\n    - `updateTime` last\
            \ update time\n    - `executionState` overall execution state\n\n\nIn\
            \ JSON: an object with node names as keys.  Values are objects containing\
            \ the state information entries.\n\n``` json\n{\n    \"abc\": {\n    \
            \  \"executionState\": \"SUCCEEDED\",\n      \"endTime\": \"2014-01-13T20:38:31Z\"\
            ,\n      \"updateTime\": \"2014-01-13T20:38:31Z\",\n      \"startTime\"\
            : \"2014-01-13T20:38:25Z\"\n    }\n}\n```\n\n**Timestamp format:**\n\n\
            The timestamp format is ISO8601: `yyyy-MM-dd'T'HH:mm:ss'Z'`\n\n**Execution\
            \ states:**\n\n* `WAITING` - Waiting to start running\n* `RUNNING` - Currently\
            \ running\n* `RUNNING_HANDLER` - Running error handler\\*\n* `SUCCEEDED`\
            \ - Finished running successfully\n* `FAILED` - Finished with a failure\n\
            * `ABORTED` - Execution was aborted\n* `NODE_PARTIAL_SUCCEEDED` - Partial\
            \ success for some nodes\\*\n* `NODE_MIXED` - Mixed states among nodes\\\
            *\n* `NOT_STARTED` - After waiting the execution did not start\\*\n\n\\\
            * these states only apply to steps/nodes and do not apply to the overall\
            \ execution or workflow.\n"
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    completed: true
                    executionState: SUCCEEDED
                    endTime: 2014-01-13T20:38:36Z
                    serverNode: dignan
                    startTime: 2014-01-13T20:38:25Z
                    updateTime: 2014-01-13T20:38:36Z
                    stepCount: 2
                    allNodes:
                    - dignan
                    targetNodes:
                    - dignan
                    nodes:
                      dignan:
                      - executionState: SUCCEEDED
                        stepctx: "1"
                      - executionState: SUCCEEDED
                        stepctx: 2/1
                    executionId: 134
                    steps:
                    - executionState: SUCCEEDED
                      endTime: 2014-01-13T20:38:31Z
                      nodeStates:
                        dignan:
                          executionState: SUCCEEDED
                          endTime: 2014-01-13T20:38:31Z
                          updateTime: 2014-01-13T20:38:31Z
                          startTime: 2014-01-13T20:38:25Z
                      updateTime: 2014-01-13T20:38:25Z
                      nodeStep: true
                      id: "1"
                      startTime: 2014-01-13T20:38:25Z
                    - workflow:
                        completed: true
                        startTime: 2014-01-13T20:38:31Z
                        updateTime: 2014-01-13T20:38:36Z
                        stepCount: 1
                        allNodes:
                        - dignan
                        targetNodes:
                        - dignan
                        steps:
                        - executionState: SUCCEEDED
                          endTime: 2014-01-13T20:38:36Z
                          nodeStates:
                            dignan:
                              executionState: SUCCEEDED
                              endTime: 2014-01-13T20:38:36Z
                              updateTime: 2014-01-13T20:38:36Z
                              startTime: 2014-01-13T20:38:31Z
                          updateTime: 2014-01-13T20:38:31Z
                          nodeStep: true
                          id: "1"
                          startTime: 2014-01-13T20:38:31Z
                        endTime: 2014-01-13T20:38:36Z
                        executionState: SUCCEEDED
                      executionState: SUCCEEDED
                      endTime: 2014-01-13T20:38:36Z
                      hasSubworkflow: true
                      updateTime: 2014-01-13T20:38:36Z
                      nodeStep: false
                      id: "2"
                      startTime: 2014-01-13T20:38:31Z
  /executions/delete:
    post:
      tags:
      - execution
      summary: Bulk Delete Executions
      description: "Delete a set of Executions by their IDs.\n\nThe IDs can be specified\
        \ in two ways:\n\n1. Using a URL parameter `ids`, as a comma separated list,\
        \ with no body content\n\n        POST /api/12/executions/delete?ids=1,2,17\n\
        \        Content-Length: 0\n\n2. Using a request body of JSON data.\n\nNote:\
        \ the JSON schema also supports a basic JSON array \n"
      operationId: apiExecutionDeleteBulk
      parameters:
      - name: ids
        in: query
        description: comma separated list of IDs
        required: false
        schema:
          type: string
          format: comma-separated
      requestBody:
        description: Delete Bulk IDs request.
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/DeleteBulkRequest'
              - $ref: '#/components/schemas/DeleteBulkRequestLong'
              - type: array
                items:
                  type: object
            examples:
              object:
                value:
                  ids:
                  - 1
                  - 2
                  - 17
              array:
                value: "[ 1, 2, 17 ]"
      responses:
        "200":
          description: Summary of bulk delete results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBulkResponse'
              examples:
                example:
                  value:
                    failures:
                    - id: "82"
                      message: "Not found: 82"
                    - id: "83"
                      message: "Not found: 83"
                    - id: "84"
                      message: "Not found: 84"
                    failedCount: 3
                    successCount: 2
                    allsuccessful: false
                    requestCount: 5
  /executions/metrics:
    get:
      tags:
      - execution
      summary: Execution Query Metrics
      description: Obtain metrics over the result set of an execution query.
      operationId: apiExecutionMetrics_docs
      parameters:
      - name: project
        in: query
        description: Project name
        schema:
          type: string
      - name: statusFilter
        in: query
        description: Execution status
        schema:
          type: string
          enum:
          - running
          - succeeded
          - failed
          - aborted
      - name: abortedbyFilter
        in: query
        description: Username who aborted an execution
        schema:
          type: string
      - name: jobIdListFilter
        in: query
        description: "specify a Job ID to include, can be specified multiple times"
        schema:
          type: string
      - name: excludeJobIdListFilter
        in: query
        description: "specify a Job ID to exclude, can be specified multiple times"
        schema:
          type: string
      - name: jobListFilter
        in: query
        description: "specify a full Job group/name to include, can be specified multiple\
          \ times"
        schema:
          type: string
      - name: excludeJobListFilter
        in: query
        description: "specify a full Job group/name to exclude, can be specified multiple\
          \ times"
        schema:
          type: string
      - name: groupPath
        in: query
        description: specify a group or partial group path to include all jobs within
          that group path. Set to the special value "-" to match the top level jobs
          only.
        schema:
          type: string
      - name: groupPathExact
        in: query
        description: specify an exact group path to match.  Set to the special value
          "-" to match the top level jobs only.
        schema:
          type: string
      - name: excludeGroupPath
        in: query
        description: specify a group or partial group path to exclude all jobs within
          that group path. Set to the special value "-" to match the top level jobs
          only.
        schema:
          type: string
      - name: excludeGroupPathExact
        in: query
        description: specify an exact group path to exclude.  Set to the special value
          "-" to match the top level jobs only.
        schema:
          type: string
      - name: jobFilter
        in: query
        description: specify a filter for the job Name. Include any job name that
          matches this value
        schema:
          type: string
      - name: excludeJobFilter
        in: query
        description: specify a filter for the job Name. Exclude any job name that
          matches this value.
        schema:
          type: string
      - name: jobExactFilter
        in: query
        description: specify an exact job name to match.
        schema:
          type: string
      - name: excludeJobExactFilter
        in: query
        description: specify an exact job name to exclude.
        schema:
          type: string
      - name: startafterFilter
        in: query
        description: start after date
        schema:
          type: string
          format: iso
      - name: startbeforeFilter
        in: query
        description: start before date
        schema:
          type: string
          format: iso
      - name: endafterFilter
        in: query
        description: end after date
        schema:
          type: string
          format: iso
      - name: endbeforeFilter
        in: query
        description: end before date
        schema:
          type: string
          format: iso
      - name: begin
        in: query
        description: "Specify exact date for earliest execution completion time. Format:\
          \ a unix millisecond timestamp, or a W3C dateTime string in the format \"\
          yyyy-MM-ddTHH:mm:ssZ\"."
        schema:
          type: string
          format: iso
      - name: end
        in: query
        description: "Specify exact date for latest execution completion time. Format:\
          \ a unix millisecond timestamp, or a W3C dateTime string in the format \"\
          yyyy-MM-ddTHH:mm:ssZ\"."
        schema:
          type: string
          format: iso
      - name: adhoc
        in: query
        description: "if true, include only Adhoc executions, if false return only\
          \ Job executions. By default any matching executions are returned, however\
          \ if you use any of the Job filters below, then only Job executions will\
          \ be returned."
        schema:
          type: boolean
      - name: recentFilter
        in: query
        description: |
          Use a simple text format to filter executions that completed within a period of time.
          The format is "XY" where X is an integer, and "Y" is one of:
          * `s`: second
          * `n`: minute
          * `h`: hour
          * `d`: day
          * `w`: week
          * `m`: month
          * `y`: year

          So a value of `2w` would return executions that completed within the last two weeks.
        schema:
          type: string
      - name: olderFilter
        in: query
        description: (same format as `recentFilter`) return executions that completed
          before the specified relative period of time.  E.g. a value of `30d` returns
          executions older than 30 days.
        schema:
          type: string
      - name: userFilter
        in: query
        description: Username who started the execution
        schema:
          type: string
      - name: executionTypeFilter
        in: query
        description: "specify the execution type, one of: `scheduled` (schedule trigger),\
          \ `user` (user trigger), `user-scheduled` (user scheduled trigger). Since:\
          \ v20"
        schema:
          type: string
          enum:
          - scheduled
          - user
          - user-scheduled
      - name: max
        in: query
        description: "maximum number of results to include in response. (default:\
          \ 20)"
        schema:
          type: integer
      - name: offset
        in: query
        description: "offset for first result to include. (default: 0)"
        schema:
          type: integer
      responses:
        "200":
          description: Metrics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsQueryResponse'
              examples:
                example:
                  value:
                    duration:
                      average: 1s
                      min: 0s
                      max: 3s
                    total: 1325
  /feature:
    get:
      tags:
      - system
      summary: List all System Feature on/off Status
      description: The query will return all system features' status
      operationId: featureQueryAll
      parameters: []
      responses:
        "200":
          description: List of features' on/off status
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/FeatureEnabledResult'
  /feature/{featureName}:
    get:
      tags:
      - system
      summary: Get Rundeck System Feature Status
      description: Return whether a feature is enabled or disabled.
      operationId: featureQuery
      parameters:
      - name: featureName
        in: path
        description: "Feature name without the `feature.` prefix, or blank to receive\
          \ list of all system features"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: On/off status of the feature
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/FeatureEnabledResult'
  /job/{id}:
    get:
      tags:
      - jobs
      summary: Getting a Job Definition
      description: |-
        Export a single job definition, in one of the supported formats.

        Authorization required: `read` for the Job.
      operationId: apiJobExport
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        content:
          application/json:
            schema:
              type: string
      - name: format
        in: query
        description: can be "yaml" or "json" (API v44+) to specify the output format
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: |-
            Job definition, depending on the requested format:

            * YAML: [job-yaml](https://docs.rundeck.com/docs/manual/document-format-reference/job-yaml-v12.html) format
            * JSON: [job-json](https://docs.rundeck.com/docs/manual/document-format-reference/job-json-v44.html) format (API v44+)
          content:
            application/json:
              schema:
                type: object
                externalDocs:
                  description: Job JSON Format
                  url: https://docs.rundeck.com/docs/manual/document-format-reference/job-json-v44.html
            text/yaml:
              schema:
                type: string
                externalDocs:
                  description: Job YAML Format
                  url: https://docs.rundeck.com/docs/manual/document-format-reference/job-yaml-v12.html
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "415":
          description: Unsupported Media type.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
      - jobs
      summary: Deleting a Job Definition
      description: |-
        Delete a single job definition.

        Authorization required: `delete` for the job.
      operationId: apiJobDelete
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "204":
          description: Successful delete. No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "409":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "200":
          description: apiJobDelete 200 response
          content:
            application/json:
              schema:
                type: object
  /job/{id}/execution/disable:
    post:
      tags:
      - jobs
      summary: Disable Executions for a Job
      description: "Disable executions for a job. \n\nAuthorization required: `toggle_execution`\
        \ action for a job.\n\nSince: V14"
      operationId: apiFlipExecutionDisabled
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    success: true
  /job/{id}/execution/enable:
    post:
      tags:
      - jobs
      summary: Enable Executions for a Job
      description: "Enable executions for a job. \n\nAuthorization required: `toggle_execution`\
        \ action for a job.\n\nSince: V14"
      operationId: apiFlipExecutionEnabled
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    success: true
  /job/{id}/executions:
    get:
      tags:
      - execution
      - jobs
      summary: Getting Executions for a Job
      description: |
        Get the list of executions for a Job.

        Authorizations required: `read` or `view` for the Job, and `read` for the project resource type `execution`.
      operationId: apiJobExecutions
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: status
        in: query
        description: "the status of executions you want to be returned.  Must be \n\
          one of \"succeeded\", \"failed\", \"aborted\", or \"running\".  If this\
          \ parameter is blank or unset, include all executions."
        schema:
          type: string
          enum:
          - succeeded
          - failed
          - aborted
          - running
      - name: max
        in: query
        description: "indicate the maximum number of results to return. If \nunspecified,\
          \ all results will be returned"
        schema:
          type: integer
      - name: offset
        in: query
        description: "indicate the 0-indexed offset for the first result to \nreturn."
        schema:
          type: integer
      responses:
        "200":
          description: Executions results
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [{
                      "id": 1,
                      "href": "[url]",
                      "permalink": "[url]",
                      "status": "succeeded/failed/aborted/timedout/retried/other",
                      "project": "[project]",
                      "user": "[user]",
                      "date-started": {
                        "unixtime": 1431536339809,
                        "date": "2015-05-13T16:58:59Z"
                      },
                      "date-ended": {
                        "unixtime": 1431536346423,
                        "date": "2015-05-13T16:59:06Z"
                      },
                      "job": {
                        "id": "[uuid]",
                        "href": "[url]",
                        "permalink": "[url]",
                        "averageDuration": 6094,
                        "name": "[name]",
                        "group": "[group]",
                        "project": "[project]",
                        "description": "",
                        "options": {
                          "opt2": "a",
                          "opt1": "testvalue"
                        }
                      },
                      "description": "echo hello there [... 5 steps]",
                      "argstring": "-opt1 testvalue -opt2 a",
                      "successfulNodes": [
                        "nodea","nodeb"
                      ],
                      "failedNodes": [
                        "nodec","noded"
                      ]
                    }]
    post:
      tags:
      - jobs
      summary: Running a Job
      description: |
        Run a job specified by ID.

        Parameters can be specified in the request body, instead of as query parameters

        Authorization required: `run` for the Job resource.
      operationId: apiJobRun
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: argString
        in: query
        description: "argument string to pass to the job, of the form: `-opt value\
          \ -opt2 value ...`."
        schema:
          type: string
      - name: loglevel
        in: query
        description: argument specifying the loglevel to use
        schema:
          type: string
          enum:
          - DEBUG
          - VERBOSE
          - INFO
          - WARN
          - ERROR
      - name: asUser
        in: query
        description: specifies a username identifying the user who ran the job. Requires
          `runAs` permission.
        schema:
          type: string
      - name: filter
        in: query
        description: can be a node filter string.
        schema:
          type: string
      - name: runAtTime
        in: query
        description: |-
          Specify a time to run the job (Since: v18).

          This is a ISO-8601 date and time stamp with timezone, with optional milliseconds., e.g. `2016-11-23T12:20:55-0800` or `2016-11-23T12:20:55.123-0800`
        schema:
          type: string
          format: date-time
      - name: option.OPTNAME
        in: query
        description: "Option value for option named `OPTNAME`. If any `option.OPTNAME`\
          \ parameters are specified, the `argString` value is ignored (Since: v18)."
        schema:
          type: string
      - name: meta.KEY
        in: query
        description: "Additional metadata keyd by `KEY`. (Since: v32)."
        schema:
          type: string
      requestBody:
        description: |-
          Parameters can be specified in the request body, instead of as query parameters.

          (**API v18** or later): The `options` entry can contain a map of option name -> value, in which case the `argString` is ignored.
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  argString: '...'
                  loglevel: '...'
                  asUser: '...'
                  filter: '...'
                  runAtTime: '...'
                  options:
                    myopt1: value
      responses:
        "200":
          description: Created Execution
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 1
                    href: "[url]"
                    permalink: "[url]"
                    status: succeeded/failed/aborted/timedout/retried/other
                    project: "[project]"
                    user: "[user]"
                    date-started:
                      unixtime: 1431536339809
                      date: 2015-05-13T16:58:59Z
                    date-ended:
                      unixtime: 1431536346423
                      date: 2015-05-13T16:59:06Z
                    job:
                      id: "[uuid]"
                      href: "[url]"
                      permalink: "[url]"
                      averageDuration: 6094
                      name: "[name]"
                      group: "[group]"
                      project: "[project]"
                      description: ""
                      options:
                        opt2: a
                        opt1: testvalue
                    description: "echo hello there [... 5 steps]"
                    argstring: -opt1 testvalue -opt2 a
                    successfulNodes:
                    - nodea
                    - nodeb
                    failedNodes:
                    - nodec
                    - noded
    delete:
      tags:
      - execution
      - jobs
      summary: Delete all Executions for a Job
      description: Delete all executions for a Job.
      operationId: apiJobExecutionsDelete
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Summary of bulk delete results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBulkResponse'
  /job/{id}/forecast:
    get:
      tags:
      - jobs
      summary: Get Job Forecast
      description: |-
        Get Metadata for the job including a schedule forecast for a specific amount of time of the job by ID.

        Authorization required: `read` or `view` for the Job

        Since: V31
      operationId: apiJobForecast
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
          format: uuid
      - name: time
        in: query
        description: "Time range to forecast. \n\nFormat is a string like `2d1h4n5s`\
          \ using the following characters for time units:\n* `s` second\n* `n` minute\n\
          * `h` hour\n* `d` day\n* `w` week\n* `m` month\n* `y` year\n"
        schema:
          pattern: "(\\d+[snhdwmy])+"
          type: string
      - name: past
        in: query
        description: "Whether to return results in the past. default: false"
        schema:
          type: boolean
      - name: max
        in: query
        description: Maximum number of results to return
        schema:
          type: integer
      responses:
        "200":
          description: Forecast Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfo'
  /job/{id}/info:
    get:
      tags:
      - jobs
      summary: Get Job Metadata
      description: |-
        Get metadata about a specific job.

        Authorization required: `read` or `view` for the job.

        Since: V18
      operationId: apiJobDetail
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Job metadata
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobInfo'
  /job/{id}/input/file:
    post:
      tags:
      - jobs
      summary: Upload Multiple Files for Job Options
      description: |-
        Job Options of type `file` require a file input. You can upload multiple files en-masse.

        Each uploaded file is assigned a unique "file key" identifier.
        You can then Run the Job using the "file key" as the option value.

        For multiple files, use a Multi-part request.  For each file, specify the field name as `option.NAME` where NAME
        is the option name. The filename is specified normally within the multi-part request.

        Since: v19
      operationId: apiJobFileMultiUpload
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      requestBody:
        description: |
          Upload Multiple Files.

          For multiple files, use a Multi-part request.  For each file, specify the field name as `option.NAME` where NAME
          is the option name. The filename is specified normally within the multi-part request.
        content:
          multipart/form-data: {}
      responses:
        "200":
          description: "Successful response, with multiple uploaded file tokens"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobFileUpload'
  /job/{id}/input/file/{optionName}:
    post:
      tags:
      - jobs
      summary: Upload a File for a Job Option
      description: |-
        Job Options of type `file` require a file input. This endpoint uploads a single file individually.

        Each uploaded file is assigned a unique "file key" identifier.
        You can then Run the Job using the "file key" as the option value.

        Since: v19
      operationId: apiJobFileUpload
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: optionName
        in: path
        description: "For a single file/option value, specify the option name either\
          \ as a query parameter or as part of the URL path"
        required: true
        schema:
          type: string
      - name: fileName
        in: query
        description: Specify the original file name (optional)
        schema:
          type: string
      requestBody:
        description: Upload a single file directly
        content:
          application/octet-stream: {}
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobFileUpload'
  /job/{id}/meta:
    get:
      tags:
      - jobs
      summary: Get Job Metadata
      description: |-
        Get metadata for a specific job.

        Authorization required: `read` or `view` for the Job.

        Since: v46
      operationId: apiJobMeta
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: meta
        in: query
        description: "Comma-separated list of metadata items to include, or \"*\"\
          \ for all (default)"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Job results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemMeta'
  /job/{id}/retry/{executionId}:
    post:
      tags:
      - jobs
      summary: Retry a Job based on execution
      description: |
        Retry a failed execution on failed nodes only or on the same as the execution.
        This is the same functionality as the `Retry Failed Nodes ...` button on the execution page.

        Parameters can be specified in the request body, instead of as query parameters

        Authorization required: `run` for the Job resource, and `read` or `view` for the Execution resource.

        Since: v24
      operationId: apiJobRetry
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: executionId
        in: path
        description: Execution ID
        required: true
        schema:
          type: string
      - name: failedNodes
        in: query
        description: "`false` to run on the same nodes as the original execution,\
          \ `true`or empty to run only on failed nodes."
        schema:
          type: boolean
      - name: argString
        in: query
        description: "argument string to pass to the job, of the form: `-opt value\
          \ -opt2 value ...`."
        schema:
          type: string
      - name: loglevel
        in: query
        description: argument specifying the loglevel to use
        schema:
          type: string
          enum:
          - DEBUG
          - VERBOSE
          - INFO
          - WARN
          - ERROR
      - name: asUser
        in: query
        description: specifies a username identifying the user who ran the job. Requires
          `runAs` permission.
        schema:
          type: string
      - name: filter
        in: query
        description: can be a node filter string.
        schema:
          type: string
      - name: runAtTime
        in: query
        description: |-
          Specify a time to run the job (Since: v18).

          This is a ISO-8601 date and time stamp with timezone, with optional milliseconds., e.g. `2016-11-23T12:20:55-0800` or `2016-11-23T12:20:55.123-0800`
        schema:
          type: string
          format: date-time
      - name: option.OPTNAME
        in: query
        description: "Option value for option named `OPTNAME`. If any `option.OPTNAME`\
          \ parameters are specified, the `argString` value is ignored (Since: v18)."
        schema:
          type: string
      - name: meta.KEY
        in: query
        description: "Additional metadata keyd by `KEY`. (Since: v32)."
        schema:
          type: string
      requestBody:
        description: |-
          Parameters can be specified in the request body, instead of as query parameters.

          (**API v18** or later): The `options` entry can contain a map of option name -> value, in which case the `argString` is ignored.
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  failedNodes: true
                  argString: '...'
                  loglevel: '...'
                  asUser: '...'
                  filter: '...'
                  runAtTime: '...'
                  options:
                    myopt1: value
      responses:
        "200":
          description: Created Execution
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 1
                    href: "[url]"
                    permalink: "[url]"
                    status: succeeded/failed/aborted/timedout/retried/other
                    project: "[project]"
                    user: "[user]"
                    date-started:
                      unixtime: 1431536339809
                      date: 2015-05-13T16:58:59Z
                    date-ended:
                      unixtime: 1431536346423
                      date: 2015-05-13T16:59:06Z
                    job:
                      id: "[uuid]"
                      href: "[url]"
                      permalink: "[url]"
                      averageDuration: 6094
                      name: "[name]"
                      group: "[group]"
                      project: "[project]"
                      description: ""
                      options:
                        opt2: a
                        opt1: testvalue
                    description: "echo hello there [... 5 steps]"
                    argstring: -opt1 testvalue -opt2 a
                    successfulNodes:
                    - nodea
                    - nodeb
                    failedNodes:
                    - nodec
                    - noded
  /job/{id}/run:
    post:
      tags:
      - jobs
      summary: Running a Job
      description: |
        Run a job specified by ID.

        Parameters can be specified in the request body, instead of as query parameters

        Authorization required: `run` for the Job resource.
      operationId: apiJobRun_1
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: argString
        in: query
        description: "argument string to pass to the job, of the form: `-opt value\
          \ -opt2 value ...`."
        schema:
          type: string
      - name: loglevel
        in: query
        description: argument specifying the loglevel to use
        schema:
          type: string
          enum:
          - DEBUG
          - VERBOSE
          - INFO
          - WARN
          - ERROR
      - name: asUser
        in: query
        description: specifies a username identifying the user who ran the job. Requires
          `runAs` permission.
        schema:
          type: string
      - name: filter
        in: query
        description: can be a node filter string.
        schema:
          type: string
      - name: runAtTime
        in: query
        description: |-
          Specify a time to run the job (Since: v18).

          This is a ISO-8601 date and time stamp with timezone, with optional milliseconds., e.g. `2016-11-23T12:20:55-0800` or `2016-11-23T12:20:55.123-0800`
        schema:
          type: string
          format: date-time
      - name: option.OPTNAME
        in: query
        description: "Option value for option named `OPTNAME`. If any `option.OPTNAME`\
          \ parameters are specified, the `argString` value is ignored (Since: v18)."
        schema:
          type: string
      - name: meta.KEY
        in: query
        description: "Additional metadata keyd by `KEY`. (Since: v32)."
        schema:
          type: string
      requestBody:
        description: |-
          Parameters can be specified in the request body, instead of as query parameters.

          (**API v18** or later): The `options` entry can contain a map of option name -> value, in which case the `argString` is ignored.
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  argString: '...'
                  loglevel: '...'
                  asUser: '...'
                  filter: '...'
                  runAtTime: '...'
                  options:
                    myopt1: value
      responses:
        "200":
          description: Created Execution
          content:
            application/json:
              examples:
                example:
                  value:
                    id: 1
                    href: "[url]"
                    permalink: "[url]"
                    status: succeeded/failed/aborted/timedout/retried/other
                    project: "[project]"
                    user: "[user]"
                    date-started:
                      unixtime: 1431536339809
                      date: 2015-05-13T16:58:59Z
                    date-ended:
                      unixtime: 1431536346423
                      date: 2015-05-13T16:59:06Z
                    job:
                      id: "[uuid]"
                      href: "[url]"
                      permalink: "[url]"
                      averageDuration: 6094
                      name: "[name]"
                      group: "[group]"
                      project: "[project]"
                      description: ""
                      options:
                        opt2: a
                        opt1: testvalue
                    description: "echo hello there [... 5 steps]"
                    argstring: -opt1 testvalue -opt2 a
                    successfulNodes:
                    - nodea
                    - nodeb
                    failedNodes:
                    - nodec
                    - noded
  /job/{id}/schedule/disable:
    post:
      tags:
      - jobs
      summary: Disable Schedule for a Job
      description: "Disable schedule for a job. \n\nAuthorization required: `toggle_schedule`\
        \ action for a job.\n\nSince: V14"
      operationId: apiFlipScheduleDisabled
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    success: true
  /job/{id}/schedule/enable:
    post:
      tags:
      - jobs
      summary: Enable Schedule for a Job
      description: "Enable schedule for a job. \n\nAuthorization required: `toggle_schedule`\
        \ action for a job.\n\nSince: V14"
      operationId: apiFlipScheduleEnabled
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: Success Response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    success: true
  /job/{id}/scm/{integration}/action/{actionId}:
    post:
      tags:
      - jobs
      - scm
      summary: Perform Job SCM Action
      description: |-
        Perform the action for the SCM integration plugin, with a set of input parameters,
        for the Job.

        Depending on the available Input Fields for the action. (See `/job/{id}/scm/{integration}/action/inputs`), the action will
        expect a set of `input` values.

        Authorization required: `export` or `scm_export` (for export integration), or `import` or `scm_import` (for import integration), for the Job resource.

        Since: v15
      operationId: apiJobActionPerform
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: SCM integration type
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: actionId
        in: path
        description: Action Name/ID
        required: true
        schema:
          type: string
      requestBody:
        description: SCM Action Input Request.
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  input:
                    field1: value1
                    field2: value2
        required: true
      responses:
        "200":
          description: "SCM Action success response.\n    \nIf a follow-up **Action**\
            \ is expected to be called, the action ID will be identified by the `nextAction`\
            \ value.\n    "
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmActionResult'
              examples:
                example:
                  value:
                    message: Some message.
                    nextAction: next-action
                    success: true
        "400":
          description: "SCM Action invalid response.\n   \nThe response will include\
            \ information about the result.\n"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmActionResult'
              examples:
                example:
                  value:
                    message: Some input was invalid.
                    success: false
                    validationErrors:
                      dir: required
                      url: required
  /job/{id}/scm/{integration}/action/{actionId}/input:
    get:
      tags:
      - jobs
      - scm
      summary: Get Job SCM Action Input Fields
      description: |-
        Get the input fields and selectable items for a specific action.

        Each action may have a set of Input Fields describing user-input values.

        Export actions may have a set of `exportItems`s which describe Job changes that can be
        included in the action.

        Import actions may have a set of `importItems`s which describe paths from the import repo
        which can be selected for the action, they will also be associated with a Job after they are matched.

        Authorization required: `export` or `scm_export` (for export integration), or `import` or `scm_import` (for import integration), for the Job resource.

        Since: v15
      operationId: apiJobActionInput
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: SCM integration type
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: actionId
        in: path
        description: Action Name/ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: |+
            SCM Action Input response.

            `exportItems` values:

            * `itemId` - ID of the repo item, e.g. a file path
            * `job` - job information
                * `groupPath` group path, or empty/null
                * `jobId` job ID
                * `jobName` job name
            * `deleted` - boolean, whether the job was deleted and requires deleting the associated repo item
            * `renamed` - boolean if the job was renamed
            * `originalId` - ID of a repo item if the job was renamed and now is stored at a different repo path, or empty/null
            * `status` - file status String, the same value as in the `$synchState` of [Get Job SCM Status](#get-job-scm-status).

            `importItems` values:

            * `itemId` - ID of the repo item, e.g. a file path
            * `job` - job information, may be empty/null
                * `groupPath` group path, or empty
                * `jobId` job ID
                * `jobName` job name
            * `tracked` - boolean, true if there is an associated `job`
            * `deleted` - boolean, whether the job was deleted on remote and requires to be deleted
            * `status` - file status String, the same value as in the `$synchState` of [Get Job SCM Status](#get-job-scm-status).

            Input fields have a number of properties:

            * `name` identifier for the field, used when submitting the input values.
            * `defaultValue` a default value if the input does not specify one
            * `description` textual description
            * `renderOptions` a key/value map of options, such as declaring that GUI display the input as a password field.
            * `required` true/false whether the input is required
            * `scope`
            * `title` display title for the field
            * `type` data type of the field: `String`, `Integer`, `Select` (multi-value), `FreeSelect` (open-ended multi-value), `Boolean` (true/false)
            * `values` if the type is `Select` or `FreeSelect`, a list of string values to choose from

          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmActionInput'
  /job/{id}/scm/{integration}/diff:
    get:
      tags:
      - jobs
      - scm
      summary: Get Job SCM Diff
      description: |-
        Retrieve the file diff for the Job, if there are changes for the integration.

        The format of the diff content depends on the specific plugin. For the Git plugins,
        a unified diff format is used.

        Authorization required: `export` or `scm_export` (for export integration), or `import` or `scm_import` (for import integration), for the Job resource.

        Since: v15
      operationId: apiJobDiff
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: SCM integration type
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      responses:
        "200":
          description: |
            SCM Diff response.

            The `commit` info will be the same structure as in `/job/{id}/scm/{integration}/status` response.

            For `import` only, `incomingCommit` will indicate the to-be-imported change.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmJobDiff'
              examples:
                example:
                  value:
                    commit: {}
                    diffContent: '...'
                    id: $jobId
                    incomingCommit: {}
                    integration: $integration
                    project: $project
  /job/{id}/scm/{integration}/status:
    get:
      tags:
      - jobs
      - scm
      summary: Get Job SCM Status
      description: |
        Get SCM status for a Job.

        Authorization required: `export` or `scm_export` (for export integration), or `import` or `scm_import` (for import integration), for the Job resource.

        Since: v15
      operationId: apiJobStatus
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: SCM integration type
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      responses:
        "200":
          description: |-
            SCM Status response.

            Note: `import` status will not include any actions for the job, refer to the Project status to list import actions.

            Import plugin values for `$synchState`:

            * `CLEAN` - no changes
            * `UNKNOWN` - status unknown, e.g. the job was not imported via SCM
            * `REFRESH_NEEDED` - plugin needs to refresh
            * `IMPORT_NEEDED` - Job changes need to be imported
            * `DELETE_NEEDED` - Job need to be deleted

            Export plugin values for `$synchState`:

            * `CLEAN` - no changes
            * `REFRESH_NEEDED` - plugin needs to refresh
            * `EXPORT_NEEDED` - job changes need to be exported
            * `CREATE_NEEDED` - Job needs to be added to the repo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmJobStatus'
              examples:
                example:
                  value:
                    actions:
                    - $action
                    commit:
                      author: $commitAuthor
                      commitId: $commitId
                      date: $commitDate
                      info:
                        key: value..
                      message: $commitMessage
                    id: $jobId
                    integration: $integration
                    message: $statusMessage
                    project: $project
                    synchState: $synchState
  /job/{id}/workflow:
    get:
      tags:
      - jobs
      summary: Get Job Workflow
      description: |-
        Get the workflow tree for a job. It will traverse referenced jobs to a depth of 3.

        Authorization required: `read` or `view` for the Job.

        The authorization level affects the response data.

        * `read` - full workflow details are included for each step
        * `view` - basic information and description is included for each step

        Since: v34
      operationId: apiJobWorkflow
      parameters:
      - name: id
        in: path
        description: Job ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: |-
            Workflow response.

            **Workflow Step Fields**
            * `description`: Present and set to workflow step description if configured
            * `exec`: If command step field is present and set to command string; otherwise
            * `script`: Present and set to `"true"` if script step
            * `scriptfile`: Present and set to file path if `scriptfile` step
            * `scripturl`: If `scripturl` step field is present and set to URL if step
            * `jobRef`: Present if step is a job reference
            * `jobId`: If step is a job reference field is present and contains the referenced
            jobs ID
            * `type`: For plugin steps present and set to step plugin type
            * `nodeStep`: Present if `type` is present and set to `"true"` or `"false"` to indicate
            if the step is a node step. Implicitly `"true"` if not present and not a job step.
            * `workflow`: If step is a job reference contains the sub-workflow
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    workflow:
                    - description: "[description]"
                      exec: "[exec]"
                      script: "[script]"
                      scriptfile: "[scriptfile]"
                      scripturl: "[scripturl]"
                      jobRef:
                        name: "[name]"
                        group: "[group]"
                        uuid: "[uuid]"
                        nodeStep: "[nodeStep]"
                        importOptions: "[importOptions]"
                      jobId: "[jobId]"
                      type: "[type]"
                      nodeStep: true
                      workflow: []
  /jobs/delete:
    post:
      tags:
      - jobs
      summary: Bulk Job Delete
      description: "Delete multiple job definitions at once.\n\nBoth `DELETE` and\
        \ `POST` are allowed for doing a bulk delete of jobs. \nHowever, to send a\
        \ body with the request, \nthen the POST method must be used, \nsince the\
        \ DELETE method does not allow for request bodies.\n \nAuthorization required:\
        \ `delete` on project resource type `job`, and `delete` on each Job resource.\n"
      operationId: apiJobDeleteBulk
      requestBody:
        description: Bulk ID request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBulkJobDeleteRequest'
      responses:
        "200":
          description: Summary of bulk delete results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/DeleteBulkResponse'
              examples:
                example:
                  value:
                    failures:
                    - id: "82"
                      message: "Not found: 82"
                    - id: "83"
                      message: "Not found: 83"
                    - id: "84"
                      message: "Not found: 84"
                    failedCount: 3
                    successCount: 2
                    allsuccessful: false
                    requestCount: 5
    delete:
      tags:
      - jobs
      summary: Bulk Job Delete
      description: "Delete multiple job definitions at once.\n\nBoth `DELETE` and\
        \ `POST` are allowed for doing a bulk delete of jobs. \nHowever, to send a\
        \ body with the request, \nthen the POST method must be used, \nsince the\
        \ DELETE method does not allow for request bodies.\n \nAuthorization required:\
        \ `delete` on project resource type `job`, and `delete` on each Job resource.\n"
      operationId: apiJobDeleteBulk_docs2
      parameters:
      - name: ids
        in: query
        description: "The Job IDs to delete, can be specified multiple times"
        required: false
        schema:
          type: array
          items:
            type: string
      - name: idlist
        in: query
        description: The Job IDs to delete as a single comma-separated string.
        required: false
        schema:
          type: string
          format: comma-separated
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1jobs~1delete/post/responses/200'
  /jobs/execution/disable:
    post:
      tags:
      - jobs
      summary: Bulk Toggle Job Execution Disabled
      description: |-
        Toggle executions disabled for a set of jobs.

        Authorization required: `toggle_execution` action for each job.

        Since: v16
      operationId: apiFlipExecutionDisabledBulk
      parameters:
      - name: ids
        in: query
        description: "The Job IDs to delete, can be specified multiple times"
        schema:
          type: array
          items:
            type: string
      - name: idlist
        in: query
        description: The Job IDs to delete as a single comma-separated string.
        schema:
          type: string
          format: comma-separated
      requestBody:
        description: request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBulkJobDeleteRequest'
      responses:
        "200":
          description: "Bulk toggle result.\n\nFailed results will contain:\n\n* `id`\
            \ - the Job ID\n* `error` - result error message for the request\n* `errorCode`\
            \ - a code indicating the type of failure, currently one of `failed`,\
            \ `unauthorized` or \n`notfound`."
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    requestCount: 2
                    enabled: true
                    allsuccessful: false
                    succeeded:
                    - id: "[UUID]"
                      message: success message
                    failed:
                    - id: "[UUID]"
                      errorCode: "(error code, see above)"
                      message: (success or failure message)
  /jobs/execution/enable:
    post:
      tags:
      - jobs
      summary: Bulk Toggle Job Execution Enabled
      description: |-
        Toggle executions enabled for a set of jobs.

        Authorization required: `toggle_execution` action for each job.

        Since: v16
      operationId: apiFlipExecutionEnabledBulk
      parameters:
      - name: ids
        in: query
        description: "The Job IDs to delete, can be specified multiple times"
        schema:
          type: array
          items:
            type: string
      - name: idlist
        in: query
        description: The Job IDs to delete as a single comma-separated string.
        schema:
          type: string
          format: comma-separated
      requestBody:
        description: Bulk ID request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBulkJobDeleteRequest'
      responses:
        "200":
          description: "Bulk toggle result.\n\nFailed results will contain:\n\n* `id`\
            \ - the Job ID\n* `error` - result error message for the request\n* `errorCode`\
            \ - a code indicating the type of failure, currently one of `failed`,\
            \ `unauthorized` or \n`notfound`."
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    requestCount: 2
                    enabled: true
                    allsuccessful: false
                    succeeded:
                    - id: "[UUID]"
                      message: success message
                    failed:
                    - id: "[UUID]"
                      errorCode: "(error code, see above)"
                      message: (success or failure message)
  /jobs/file/{id}:
    get:
      tags:
      - jobs
      summary: Get Info About an Uploaded File
      description: Get info about an uploaded file given its ID.
      operationId: apiJobFileInfo
      parameters:
      - name: id
        in: path
        description: File ID
        required: true
        content:
          application/json:
            schema:
              type: string
      responses:
        "200":
          description: File info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobFileInfo'
              examples:
                example:
                  value:
                    dateCreated: 2017-02-24T19:10:33Z
                    execId: 2741
                    expirationDate: 2017-02-24T19:11:03Z
                    fileState: deleted
                    id: f985864b-fa1b-4e09-af7a-4315e9908372
                    jobId: 7b3fff59-7a2d-4a31-a5b2-dd26177c823c
                    serverNodeUUID: 3425B691-7319-4EEE-8425-F053C628B4BA
                    sha: 9284ed4fd7fe1346904656f329db6cc49c0e7ae5b8279bff37f96bc6eb59baad
                    size: 12
                    user: admin
  /jobs/schedule/disable:
    post:
      tags:
      - jobs
      summary: Bulk Toggle Job Schedule Disabled
      description: |-
        Toggle schedule disabled for a set of jobs.

        Authorization required: `toggle_schedule` action for each job.

        Since: v16
      operationId: apiFlipScheduleDisabledBulk
      parameters:
      - name: ids
        in: query
        description: "The Job IDs to delete, can be specified multiple times"
        schema:
          type: array
          items:
            type: string
      - name: idlist
        in: query
        description: The Job IDs to delete as a single comma-separated string.
        schema:
          type: string
          format: comma-separated
      requestBody:
        description: Bulk ID request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBulkJobDeleteRequest'
      responses:
        "200":
          description: "Bulk toggle result.\n\nFailed results will contain:\n\n* `id`\
            \ - the Job ID\n* `error` - result error message for the request\n* `errorCode`\
            \ - a code indicating the type of failure, currently one of `failed`,\
            \ `unauthorized` or \n`notfound`."
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    requestCount: 2
                    enabled: true
                    allsuccessful: false
                    succeeded:
                    - id: "[UUID]"
                      message: success message
                    failed:
                    - id: "[UUID]"
                      errorCode: "(error code, see above)"
                      message: (success or failure message)
  /jobs/schedule/enable:
    post:
      tags:
      - jobs
      summary: Bulk Toggle Job Schedule Enabled
      description: |-
        Toggle schedule enabled for a set of jobs.

        Authorization required: `toggle_schedule` action for each job.

        Since: v16
      operationId: apiFlipScheduleEnabledBulk
      parameters:
      - name: ids
        in: query
        description: "The Job IDs to delete, can be specified multiple times"
        schema:
          type: array
          items:
            type: string
      - name: idlist
        in: query
        description: The Job IDs to delete as a single comma-separated string.
        schema:
          type: string
          format: comma-separated
      requestBody:
        description: Bulk ID request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiBulkJobDeleteRequest'
      responses:
        "200":
          description: "Bulk toggle result.\n\nFailed results will contain:\n\n* `id`\
            \ - the Job ID\n* `error` - result error message for the request\n* `errorCode`\
            \ - a code indicating the type of failure, currently one of `failed`,\
            \ `unauthorized` or \n`notfound`."
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    requestCount: 2
                    enabled: true
                    allsuccessful: false
                    succeeded:
                    - id: "[UUID]"
                      message: success message
                    failed:
                    - id: "[UUID]"
                      errorCode: "(error code, see above)"
                      message: (success or failure message)
  /metrics/{name}:
    get:
      tags:
      - system
      summary: Get Rundeck metrics
      description: Return metrics and information
      operationId: apiMetrics
      parameters:
      - name: name
        in: path
        description: "Metric name, or blank to receive list of metrics"
        required: true
        allowEmptyValue: true
        schema:
          type: string
          enum:
          - metrics
          - ping
          - threads
          - healthcheck
      responses:
        "200":
          description: List of metrics available if not specified
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LinkListResponse'
        "404":
          description: Error response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
              examples:
                example:
                  value:
                    error: true
                    errorCode: api.error.code
                    message: not ok
                    apiversion: 41
  /plugin/list:
    get:
      tags:
      - plugins
      summary: List installed plugins
      description: |
        Get the list of installed Plugins.

        Since: v33
      operationId: listPlugins
      responses:
        "200":
          description: List of Plugins
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ApiPluginListProvider'
  /project/projects:
    get:
      tags:
      - project
      summary: List Projects
      description: |
        List the existing projects on the server.

        Authorization required: `read` for project resource
      operationId: apiProjectList
      responses:
        "200":
          description: "\n*Since API version 26*: add the project `label` to the response\n\
            \n*Since API version 33*: add the project `created` date to the response.\
            \ This is based on the creation of the \n`project.properties` file in\
            \ the file system or in the DB storage."
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [
                        {
                            "name":"...",
                            "description":"...",
                            "url":"..."
                        }
                    ]
    post:
      tags:
      - project
      summary: Create a Project
      description: |
        Create a new project.

        Authorization required: `create` for resource type `project`
      operationId: apiProjectCreate
      requestBody:
        description: "Project Create contains a name, and configuration values"
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  name: myproject
                  config:
                    propname: propvalue
      responses:
        "200":
          description: "\n*Since API version 26*: add the project `label` to the response\n\
            \n*Since API version 33*: add the project `created` date to the response.\
            \ This is based on the creation of the \n`project.properties` file in\
            \ the file system or in the DB storage."
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    description: ""
                    name: NAME
                    url: http://server:4440/api/11/project/NAME
                    config: {}
  /project/{project}:
    get:
      tags:
      - project
      summary: Get a project
      description: |-
        Get information about a project.
        The reponse in XML or JSON format is determined by the Accept request header.

        Authorization required: `read` access for `project` resource type to get basic project details and `configure` access to get all properties config or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectGet
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    description: ""
                    name: PROJECT_NAME
                    url: http://server:4440/api/11/project/PROJECT_NAME
                    config: {}
    delete:
      tags:
      - project
      summary: Delete a project
      description: |-
        Delete an existing projects on the server.

        Authorization required: `delete` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectDelete
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: deferred
        in: query
        description: "Deferred Delete. Since: v45"
        required: false
        allowEmptyValue: false
        schema:
          type: boolean
      responses:
        "204":
          description: No content
        "400":
          description: Project details
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/acl/{path}:
    get:
      tags:
      - project
      summary: Get ACL Policy file for a project.
      description: "Retrieve the YAML text of the ACL Policy file for a project. \n\
        If YAML or text content is requested, the contents will be returned directly.\
        \ Otherwise if XML or JSON is requested, the YAML text will be wrapped within\
        \ that format.\n\nAuthorization required: `read` access for `Project ACL`\
        \ resource type or `admin` or `app_admin` access for `user` resource type.\n\
        Since: v14"
      operationId: apiProjectAclsGet_docs
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: path
        in: path
        description: Path to the Acl policy file
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "200":
          description: Project details
          content:
            application/text:
              schema:
                type: string
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/yaml:
              schema:
                type: object
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/json:
              examples:
                example:
                  value:
                    contents: |-
                      description: "my policy"
                      context:
                        application: rundeck
                      for:
                        project:
                          - allow: read
                      by:
                        group: build
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    put:
      tags:
      - project
      summary: Update a Project ACL Policy
      description: "Use `PUT` to update a policy.\nIf the Content-Type is `application/yaml`\
        \ or `text/plain`, then the request body is the ACL policy contents directly.\
        \ \nOtherwise if XML or JSON is requested, the YAML text will be wrapped within\
        \ that format.\n\nAuthorization required: `update` access for `Project ACL`\
        \ resource type or `admin` or `app_admin` access for `user` resource type.\n\
        Since: v14"
      operationId: apiProjectAclsPut_docs
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: path
        in: path
        description: Path to the ACL Policy
        required: true
        allowEmptyValue: false
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            examples:
              example:
                value: |-
                  description: "my policy"
                  context:
                    application: rundeck
                  for:
                    project:
                      - allow: read
                  by:
                    group: build
          application/x-yaml:
            schema:
              type: string
            examples:
              example:
                value: |-
                  description: "my policy"
                  context:
                    application: rundeck
                  for:
                    project:
                      - allow: read
                  by:
                    group: build
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  contents: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
      responses:
        "200":
          description: ACL Policy updated
          content:
            application/text:
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/yaml:
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/json:
              examples:
                example:
                  value:
                    contents: |-
                      description: "my policy"
                      context:
                        application: rundeck
                      for:
                        project:
                          - allow: read
                      by:
                        group: build
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    post:
      tags:
      - project
      summary: Update a Project ACL Policy
      description: "Use `POST` to create a policy.\nIf the Content-Type is `application/yaml`\
        \ or `text/plain`, then the request body is the ACL policy contents directly.\
        \ \nOtherwise if XML or JSON is requested, the YAML text will be wrapped within\
        \ that format.\n\nAuthorization required: `create` access for `Project ACL`\
        \ resource type or `admin` or `app_admin` access for `user` resource type.\n\
        Since: v14"
      operationId: apiProjectAclsPost_docs
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: path
        in: path
        description: Path to the ACL Policy
        required: true
        allowEmptyValue: false
        schema:
          type: string
      requestBody:
        content:
          text/plain:
            schema:
              type: string
            examples:
              example:
                value: |-
                  description: "my policy"
                  context:
                    application: rundeck
                  for:
                    project:
                      - allow: read
                  by:
                    group: build
          application/yaml:
            schema:
              type: object
            examples:
              example:
                value: |-
                  description: "my policy"
                  context:
                    application: rundeck
                  for:
                    project:
                      - allow: read
                  by:
                    group: build
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  contents: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
      responses:
        "201":
          description: ACL policy created
          content:
            text/plain:
              schema:
                type: string
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/x-yaml:
              schema:
                type: object
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    contents: |-
                      description: "my policy"
                      context:
                        application: rundeck
                      for:
                        project:
                          - allow: read
                      by:
                        group: build
        "409":
          description: Conflict if already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "400":
          description: Bad request if validation failure
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
      - project
      summary: Delete an ACL policy file.
      description: |-
        Delete a project ACL policy file.

        Authorization required: `delete` access for `Project ACL` resource type or `admin` or `app_admin` access for `user` resource type.
        Since: v14
      operationId: apiProjectAclsDelete_docs
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: path
        in: path
        description: Path to the ACL policy
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/calendars:
    get:
      tags:
      - calendars
      - enterprise
      summary: "List Project Calendars [Enterprise]"
      description: |-
        Get all calendars at project scope.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

        Since: v41
      operationId: apiProjectCalendars
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of all calendar of a project
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [
                      {
                        "id": 1,
                        "name": "[NAME]",
                        "description": "[DESCRIPTION]",
                        "calendarType": "[blackout/allowed]",
                        "scope": "project",
                        "project": "[PROJECT]",
                        "dateType": "[date,range,daily,monthly]",
                        "dateDefinition": ""[DATE-DEFINITION]"",
                        "enable": true,
                        "allReference": true,
                        "recurrent": true,
                        "objects": [
                          {
                            "uuid": "[JOBUUID]",
                            "name": "[JOBNAME"]
                          }
                        ]
                      }
                    ]
    post:
      tags:
      - calendars
      - enterprise
      summary: "Create/Update Project Calendar [Enterprise]"
      description: |-
        Create or update a calendar at project scope.
        * if the ID exists, it will update the existing calendar, otherwise a new one will be created.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

        Since: v41
      operationId: apiLoadProjectCalendars
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  id: 1
                  name: "[NAME]"
                  description: "[DESCRIPTION]"
                  calendarType: "[blackout/allowed]"
                  scope: project
                  project: "[PROJECT]"
                  dateType: "[date,range,daily,monthly]"
                  dateDefinition: "[DATE-DEFINITION]"
                  enable: true
                  allReference: true
                  recurrent: true
                  objects:
                  - uuid: "[JOBUUID]"
                    name: "[JOBNAME]"
                  - uuid: "[JOBUUID]"
                    name: "[JOBNAME]"
      responses:
        "200":
          description: Calendar created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCalendarsResponse'
              examples:
                example:
                  value:
                    calendar:
                      id: 1
                      name: New Calendar
                      description: test
                      calendarType: blackout
                      scope: project
                      project: Demo
                      dateType: date
                      dateDefinition:
                      - 2019/12/07
                      - 2019/12/14
                      - 2019/12/31
                      - 2020/01/01
                      enable: true
                      allReference: false
                      recurrent: false
                      objects:
                      - uuid: 7ca918bd-b463-4948-96d2-796c0619c2bd
                        name: scheduled/job
                    saved: true
                    msg: Saved Calendar
  /project/{project}/calendars/{id}:
    delete:
      tags:
      - calendars
      - enterprise
      summary: "Delete Project Calendar [Enterprise]"
      description: |-
        Deletes a calendar at project scope.

        Authorization required: `delete` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.

        Since: v41
      operationId: apiDeleteProjectCalendar
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Calendar Id to be deleted
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "204":
          description: No content
  /project/{project}/config:
    get:
      tags:
      - project
      summary: Get a project config
      description: |-
        Retrieve the project configuration data.
        The response, based on `Accept` header, can be returned in the Text, XML or Json format.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectConfigGet
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "200":
          description: Project details
          content:
            application/text:
              schema:
                type: string
              examples:
                example:
                  value: |-
                    key=value
                    key2=value
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    key: value
                    key2: value2...
    put:
      tags:
      - project
      summary: Modify a project config
      description: |-
        Replaces all configuration data with the submitted values.
        The response, based on `Accept` header, can be returned in the Text, XML or Json format.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectConfigPut
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              set-project-config:
                summary: Replace all project config settings
                value:
                  key: value
                  key2: value2...
          text/plain:
            schema:
              type: string
            examples:
              set-project-config:
                summary: Replace all project config settings
                value: |-
                  key=value
                  key2=value
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    key: value
                    key2: value2...
            text/plain:
              schema:
                type: string
              examples:
                example:
                  value: |-
                    key=value
                    key2=value
  /project/{project}/config/{keypath}:
    get:
      tags:
      - project
      summary: Get an individual project config by their key
      description: |-
        Retrieve an individual configuration properties by their key.
        The response, based on `Accept` header, can be returned in the Text, XML or Json format.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectConfigKeyGet
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: keypath
        in: path
        description: Key Path
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "200":
          description: Project details
          content:
            application/text:
              schema:
                type: object
              examples:
                example:
                  value: |-
                    key=value
                    key2=value
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    key: value
                    key2: value2...
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    put:
      tags:
      - project
      summary: Set the value.
      description: |-
        Replace an individual configuration data with the submitted value.
        The response, based on `Accept` header, can be returned in the Text, XML or Json format.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectConfigKeyPut
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: keypath
        in: path
        description: Key Path
        required: true
        allowEmptyValue: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              set-project-config:
                summary: Replace an individual config settings
                value:
                  '[KEY]': key value
          text/plain:
            schema:
              type: string
            examples:
              set-project-config:
                summary: Replace an individual config settings
                value: key value
      responses:
        "200":
          description: Project details
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    '[KEY]': key value
            text/plain:
              schema:
                type: string
              examples:
                example:
                  value: key value
        "400":
          description: Bad request to put project config
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
      - project
      summary: Delete the key
      description: |-
        Delete an individual configuration properties by their key.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectConfigKeyDelete
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: keypath
        in: path
        description: Key Path
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "204":
          description: No content
  /project/{project}/disable/later:
    post:
      tags:
      - project execution mode
      - project schedule mode
      summary: Disable Project executions or schedules after a duration of time
      description: |
        Sets project execution mode to Passive or disables Schedules at a later time.

        Since: v34
      operationId: apiProjectDisableLater
      parameters:
      - name: project
        in: path
        description: project name
        required: true
        schema:
          type: string
      requestBody:
        description: |
          Disable Schedule or Executions.
          Specify the `type` to enable, and a `value` with a time duration expression.
          The request must contain a `value` with a "Time duration expression". (See request schema for syntax.)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectModeLaterRequest'
            examples:
              Disable-Schedule:
                value:
                  type: schedule
                  value: 2h30m
              Disable-Executions:
                value:
                  type: executions
                  value: 1d
        required: true
      responses:
        "200":
          description: Request processed. The `saved` value may be false if e.g. the
            current execution mode is already enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: true
                    msg: Project Execution Mode Later saved
        "400":
          description: Request error response. A description of the error is in the
            `msg` field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: false
                    msg: Project Execution Mode Later saved
  /project/{project}/enable/later:
    post:
      tags:
      - project execution mode
      - project schedule mode
      summary: Enable Project executions or schedules after a duration of time
      description: |
        Sets project execution mode to Active or enable Schedules at a later time.

        Since: v34
      operationId: apiProjectEnableLater
      parameters:
      - name: project
        in: path
        description: project name
        required: true
        schema:
          type: string
      requestBody:
        description: |
          Enable Schedule or Executions.
          Specify the `type` to enable, and a `value` with a time duration expression.
          The request must contain a `value` with a "Time duration expression". (See request schema for syntax.)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProjectModeLaterRequest'
            examples:
              Enable-Schedule:
                value:
                  type: schedule
                  value: 2h30m
              Enable-Executions:
                value:
                  type: executions
                  value: 1d
        required: true
      responses:
        "200":
          description: Request processed. The `saved` value may be false if e.g. the
            current execution mode is already enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: true
                    msg: Project Execution Mode Later saved
        "400":
          description: Request error response. A description of the error is in the
            `msg` field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: false
                    msg: Project Execution Mode Later saved
  /project/{project}/executions:
    get:
      tags:
      - execution
      - project
      summary: Execution Query
      description: Query for Executions based on Job or Execution details.
      operationId: apiExecutionsQueryv14_docs
      parameters:
      - name: project
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: statusFilter
        in: query
        description: Execution status
        schema:
          type: string
          enum:
          - running
          - succeeded
          - failed
          - aborted
      - name: abortedbyFilter
        in: query
        description: Username who aborted an execution
        schema:
          type: string
      - name: jobIdListFilter
        in: query
        description: "specify a Job ID to include, can be specified multiple times"
        schema:
          type: string
      - name: excludeJobIdListFilter
        in: query
        description: "specify a Job ID to exclude, can be specified multiple times"
        schema:
          type: string
      - name: jobListFilter
        in: query
        description: "specify a full Job group/name to include, can be specified multiple\
          \ times"
        schema:
          type: string
      - name: excludeJobListFilter
        in: query
        description: "specify a full Job group/name to exclude, can be specified multiple\
          \ times"
        schema:
          type: string
      - name: groupPath
        in: query
        description: specify a group or partial group path to include all jobs within
          that group path. Set to the special value "-" to match the top level jobs
          only.
        schema:
          type: string
      - name: groupPathExact
        in: query
        description: specify an exact group path to match.  Set to the special value
          "-" to match the top level jobs only.
        schema:
          type: string
      - name: excludeGroupPath
        in: query
        description: specify a group or partial group path to exclude all jobs within
          that group path. Set to the special value "-" to match the top level jobs
          only.
        schema:
          type: string
      - name: excludeGroupPathExact
        in: query
        description: specify an exact group path to exclude.  Set to the special value
          "-" to match the top level jobs only.
        schema:
          type: string
      - name: jobFilter
        in: query
        description: specify a filter for the job Name. Include any job name that
          matches this value
        schema:
          type: string
      - name: excludeJobFilter
        in: query
        description: specify a filter for the job Name. Exclude any job name that
          matches this value.
        schema:
          type: string
      - name: jobExactFilter
        in: query
        description: specify an exact job name to match.
        schema:
          type: string
      - name: excludeJobExactFilter
        in: query
        description: specify an exact job name to exclude.
        schema:
          type: string
      - name: startafterFilter
        in: query
        description: start after date
        schema:
          type: string
          format: iso
      - name: startbeforeFilter
        in: query
        description: start before date
        schema:
          type: string
          format: iso
      - name: endafterFilter
        in: query
        description: end after date
        schema:
          type: string
          format: iso
      - name: endbeforeFilter
        in: query
        description: end before date
        schema:
          type: string
          format: iso
      - name: begin
        in: query
        description: "Specify exact date for earliest execution completion time. Format:\
          \ a unix millisecond timestamp, or a W3C dateTime string in the format \"\
          yyyy-MM-ddTHH:mm:ssZ\"."
        schema:
          type: string
          format: iso
      - name: end
        in: query
        description: "Specify exact date for latest execution completion time. Format:\
          \ a unix millisecond timestamp, or a W3C dateTime string in the format \"\
          yyyy-MM-ddTHH:mm:ssZ\"."
        schema:
          type: string
          format: iso
      - name: adhoc
        in: query
        description: "if true, include only Adhoc executions, if false return only\
          \ Job executions. By default any matching executions are returned, however\
          \ if you use any of the Job filters below, then only Job executions will\
          \ be returned."
        schema:
          type: boolean
      - name: recentFilter
        in: query
        description: |
          Use a simple text format to filter executions that completed within a period of time.
          The format is "XY" where X is an integer, and "Y" is one of:
          * `s`: second
          * `n`: minute
          * `h`: hour
          * `d`: day
          * `w`: week
          * `m`: month
          * `y`: year

          So a value of `2w` would return executions that completed within the last two weeks.
        schema:
          type: string
      - name: olderFilter
        in: query
        description: (same format as `recentFilter`) return executions that completed
          before the specified relative period of time.  E.g. a value of `30d` returns
          executions older than 30 days.
        schema:
          type: string
      - name: userFilter
        in: query
        description: Username who started the execution
        schema:
          type: string
      - name: executionTypeFilter
        in: query
        description: "specify the execution type, one of: `scheduled` (schedule trigger),\
          \ `user` (user trigger), `user-scheduled` (user scheduled trigger). Since:\
          \ v20"
        schema:
          type: string
          enum:
          - scheduled
          - user
          - user-scheduled
      - name: max
        in: query
        description: "maximum number of results to include in response. (default:\
          \ 20)"
        schema:
          type: integer
      - name: offset
        in: query
        description: "offset for first result to include. (default: 0)"
        schema:
          type: integer
      responses:
        "200":
          description: |-
            It contains a `paging` entry with paging information, and an `executions` entry with execution information:

            The `[status]` value indicates the execution status.  It is one of:

            * `running`: execution is running
            * `succeeded`: execution completed successfully
            * `failed`: execution completed with failure
            * `aborted`: execution was aborted
            * `timedout`: execution timed out
            * `failed-with-retry`: execution failed and will retry
            * `scheduled`: execution is scheduled to run in the future
            * `other`: execution had a custom exit status string

            If `status` is `other`, then, `customStatus` will contain the exit status.

            The `[url]` value for the `href` is a URL the Rundeck API for the execution.
            The `[url]` value for the `permalink` is a URL to the Rundeck server page to view the execution output.

            `[user]` is the username of the user who started the execution.

            `[unixtime]` is the millisecond unix timestamp, and `[datetime]` is a W3C dateTime string in the format "yyyy-MM-ddTHH:mm:ssZ".

            If known, the average duration of the associated Job will be indicated (in milliseconds) as `averageDuration`.

            `project="[project]"` is the project name of the execution.

            `successfulNodes` and `failedNodes` list the names of nodes which succeeded or failed.

            The `job` section contains `options` if an `argstring` value is set.  Inside `options` is a sequence of `<option>` elements with two attributes:

            * `name` the parsed option name
            * `value` the parsed option value

            **Since API v13**: The `serverUUID` will indicate the server UUID
            if executed in cluster mode.
          content:
            application/json:
              examples:
                example:
                  value:
                    paging:
                      count: 2
                      total: 2
                      offset: 0
                      max: 20
                    executions:
                    - id: 387
                      href: "[API url]"
                      permalink: "[GUI url]"
                      status: "[status]"
                      customStatus: "[string]"
                      project: test
                      user: "[user]"
                      serverUUID: "[UUID]"
                      date-started:
                        unixtime: 1431536339809
                        date: 2015-05-13T16:58:59Z
                      date-ended:
                        unixtime: 1431536346423
                        date: 2015-05-13T16:59:06Z
                      job:
                        id: 7400ff98-31c4-4834-ba3d-aee9646e867f
                        averageDuration: 6094
                        name: test job
                        group: api-test/job-run-steps
                        project: test
                        description: ""
                        href: "[API url]"
                        permalink: "[GUI url]"
                        options:
                          opt2: a
                          opt1: testvalue
                      description: "echo hello there [... 5 steps]"
                      argstring: -opt1 testvalue -opt2 a
                      successfulNodes:
                      - madmartigan.local
  /project/{project}/executions/metrics:
    get:
      tags:
      - execution
      - execution
      summary: Execution Query Metrics
      description: |
        Obtain metrics over the result set of an execution query over the executions of a single project.

        Note: This endpoint has the same query parameters and response as the `/executions/metrics` endpoint.
      operationId: apiExecutionMetricsProject_docs
      parameters:
      - name: project
        in: path
        description: Project name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Metrics response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MetricsQueryResponse'
  /project/{project}/executions/running:
    get:
      tags:
      - execution
      - project
      summary: Listing Running Executions
      description: |
        List the currently running executions for a project or all projects.

        Authorization required: `read` for project resource type `event`
      operationId: apiExecutionsRunningv14
      parameters:
      - name: project
        in: path
        description: "Project Name, or * for all projects"
        required: true
        schema:
          type: string
      - name: max
        in: query
        description: "Paging maximum results, default: 20"
        required: false
        schema:
          type: integer
      - name: offset
        in: query
        description: Paging Offset
        required: false
        schema:
          type: integer
      - name: jobIdFilter
        in: query
        description: "Specifies a Job ID, the results will only contain running executions\
          \ for the given job. Since: v32"
        required: false
        schema:
          type: string
      - name: includePostponed
        in: query
        description: "If true, include scheduled and queued executions. Since: v32"
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: "Running Executions list.\n\nPaging info: \n* `max`: maximum\
            \ number of results per page\n* `offset`: offset from first of all results\n\
            * `total`: total number of results\n* `count`: number of results in the\
            \ response\n\nThe `[status]` value indicates the execution status.  It\
            \ is one of:\n\n* `running`: execution is running\n* `succeeded`: execution\
            \ completed successfully\n* `failed`: execution completed with failure\n\
            * `aborted`: execution was aborted\n* `timedout`: execution timed out\n\
            * `failed-with-retry`: execution failed and will retry\n* `scheduled`:\
            \ execution is scheduled to run in the future\n* `other`: execution had\
            \ a custom exit status string\n\nIf `status` is `other`, then, `customStatus`\
            \ will contain the exit status.\n\nThe `[url]` value for the `href` is\
            \ a URL the Rundeck API for the execution.\nThe `[url]` value for the\
            \ `permalink` is a URL to the Rundeck server page to view the execution\
            \ output.\n\n`[user]` is the username of the user who started the execution.\n\
            \n`[unixtime]` is the millisecond unix timestamp, and `[datetime]` is\
            \ a W3C dateTime string in the format \"yyyy-MM-ddTHH:mm:ssZ\".\n\nIf\
            \ known, the average duration of the associated Job will be indicated\
            \ (in milliseconds) as `averageDuration`. (Since API v5)\n\n**API v9 and\
            \ above**: `project=\"[project]\"` is the project name of the execution.\n\
            \n`successfulNodes` and `failedNodes` list the names of nodes which succeeded\
            \ or failed. **API v10 and above**.\n\nThe `job` section contains `options`\
            \ if an `argstring` value is set (**API v10 and above**).  Inside `options`\
            \ is a sequence of `<option>` elements with two attributes:\n\n* `name`\
            \ the parsed option name\n* `value` the parsed option value\n\n**Since\
            \ API v13**: The `serverUUID` will indicate the server UUID\nif executed\
            \ in cluster mode.\n"
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    paging:
                      count: 1
                      total: 1
                      offset: 0
                      max: 20
                    executions:
                    - id: 1
                      href: "[url]"
                      permalink: "[url]"
                      status: running/scheduled/queued
                      project: "[project]"
                      user: "[user]"
                      date-started:
                        unixtime: 1431536339809
                        date: 2015-05-13T16:58:59Z
                      date-ended:
                        unixtime: 1431536346423
                        date: 2015-05-13T16:59:06Z
                      job:
                        id: "[uuid]"
                        href: "[url]"
                        permalink: "[url]"
                        averageDuration: 6094
                        name: "[name]"
                        group: "[group]"
                        project: "[project]"
                        description: ""
                        options:
                          opt2: a
                          opt1: testvalue
                      description: "echo hello there [... 5 steps]"
                      argstring: -opt1 testvalue -opt2 a
                      successfulNodes:
                      - nodea
                      - nodeb
                      failedNodes:
                      - nodec
                      - noded
  /project/{project}/export:
    get:
      tags:
      - project
      summary: Export a zip archive of the project.
      description: "Performs the export to a zip archive of the project synchronously.\
        \ \nOptional parameters:\n\n* executionIds a list (comma-separated) of execution\
        \ IDs. If this is specified then the archive will contain only executions\
        \ that are specified, and will not contain Jobs, ACLs, or project configuration/readme\
        \ files.\n* optionally use POST method with with application/x-www-form-urlencoded\
        \ content for large lists of execution IDs\n* optionally, specify executionIds\
        \ multiple times, with a single ID per entry.\n\nIn APIv19 or later:\n\nBy\
        \ default, exportALL=true. So, in order to not export empty data, you need\
        \ to include one of the parameter flags.\n\nIn APIv28 or later:\n\n* exportScm\
        \ true/false, include project SCM configuration, if authorized\n\nIn APIv34\
        \ or later:\n\n* exportWebhooks true/false, include project webhooks in the\
        \ archive\n* whkIncludeAuthTokens true/false, include the auth token information\
        \ when exporting webhooks, if not included the auth tokens will be regenerated\
        \ upon import\n\nRequires `export` authorization for the project resource."
      operationId: apiProjectExport
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: executionIds
        in: query
        description: List of execution to include to the exported archive
        required: false
        schema:
          type: string
      - name: exportAll
        in: query
        description: "true/false, include all project contents (default: true)"
        required: false
        schema:
          type: string
      - name: exportJobs
        in: query
        description: "true/false, include jobs"
        required: false
        schema:
          type: string
      - name: exportExecutions
        in: query
        description: "true/false, include executions"
        required: false
        schema:
          type: string
      - name: exportConfigs
        in: query
        description: "true/false, include project configuration"
        required: false
        schema:
          type: string
      - name: exportReadmes
        in: query
        description: "true/false, include project readme/motd files"
        required: false
        schema:
          type: string
      - name: exportAcls
        in: query
        description: "true/false, include project ACL Policy files, if authorized"
        required: false
        schema:
          type: string
      - name: exportComponents.calendars
        in: query
        description: "true/false, include project calendars"
        required: false
        schema:
          type: string
      - name: exportComponents.Schedule%20Definitions
        in: query
        description: "true/false, include schedule definitions"
        required: false
        schema:
          type: string
      - name: exportComponents.tours-manager
        in: query
        description: "true/false, include tours manager"
        required: false
        schema:
          type: string
      - name: exportComponents.node-wizard
        in: query
        description: "true/false, include node wizard"
        required: false
        schema:
          type: string
      - name: archiveParams
        in: query
        required: true
        schema:
          $ref: '#/components/schemas/ProjectArchiveParams'
      responses:
        "200":
          description: The project exported zip archive file
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/OutputStream'
        "400":
          description: Bad request if it has error in the parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/export/async:
    get:
      tags:
      - project
      summary: Export a zip archive of the project asynchronously.
      description: "Performs the export to a zip archive of the project asynchronously.\n\
        Use the Token result to query the export status and to retrieve the result\
        \ once ready \nOptional parameters:\n\n* executionIds a list (comma-separated)\
        \ of execution IDs. If this is specified then the archive will contain only\
        \ executions that are specified, and will not contain Jobs, ACLs, or project\
        \ configuration/readme files.\n* optionally use POST method with with application/x-www-form-urlencoded\
        \ content for large lists of execution IDs\n* optionally, specify executionIds\
        \ multiple times, with a single ID per entry.\n\nIn APIv19 or later:\n\nBy\
        \ default, exportALL=true. So, in order to not export empty data, you need\
        \ to include one of the parameter flags.\n\nIn APIv28 or later:\n\n* exportScm\
        \ true/false, include project SCM configuration, if authorized\n\nIn APIv34\
        \ or later:\n\n* exportWebhooks true/false, include project webhooks in the\
        \ archive\n* whkIncludeAuthTokens true/false, include the auth token information\
        \ when exporting webhooks, if not included the auth tokens will be regenerated\
        \ upon import\n\nRequires `export` authorization for the project resource."
      operationId: apiProjectExportAsync_docs
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: executionIds
        in: query
        description: List of execution to include to the exported archive
        required: false
        schema:
          type: string
      - name: exportAll
        in: query
        description: "true/false, include all project contents (default: true)"
        required: false
        schema:
          type: string
      - name: exportJobs
        in: query
        description: "true/false, include jobs"
        required: false
        schema:
          type: string
      - name: exportExecutions
        in: query
        description: "true/false, include executions"
        required: false
        schema:
          type: string
      - name: exportConfigs
        in: query
        description: "true/false, include project configuration"
        required: false
        schema:
          type: string
      - name: exportReadmes
        in: query
        description: "true/false, include project readme/motd files"
        required: false
        schema:
          type: string
      - name: exportAcls
        in: query
        description: "true/false, include project ACL Policy files, if authorized"
        required: false
        schema:
          type: string
      - name: exportComponents.calendars
        in: query
        description: "true/false, include project calendars"
        required: false
        schema:
          type: string
      - name: exportComponents.Schedule%20Definitions
        in: query
        description: "true/false, include schedule definitions"
        required: false
        schema:
          type: string
      - name: exportComponents.tours-manager
        in: query
        description: "true/false, include tours manager"
        required: false
        schema:
          type: string
      - name: exportComponents.node-wizard
        in: query
        description: "true/false, include node wizard"
        required: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the Token to retrieve export status and download zip
            achive
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value: |-
                    {
                        "token":"[TOKEN]",
                        "ready":true/false,
                        "percentage":int,
                    }
        "400":
          description: Bad request if it has error in the parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/export/download/{token}:
    get:
      tags:
      - project
      summary: Download the zip archive file
      description: |-
        Download the archive file once the export status is `ready`.

        Requires `export` authorization for the project resource.
        Since: v19
      operationId: apiProjectExportAsyncDownload
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: token
        in: path
        description: Token to retrieve export status
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "200":
          description: The project exported zip archive file
          content:
            application/zip:
              schema:
                $ref: '#/components/schemas/OutputStream'
        "400":
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/export/status/{token}:
    get:
      tags:
      - project
      summary: Get the status of an async export request
      description: "Get the status of an async export request. \nRetrieve the result\
        \ once ready with `/api/V/project/[PROJECT]/export/download/[TOKEN]`.\n\n\
        Requires `export` authorization for the project resource.\nSince: v19"
      operationId: apiProjectExportAsyncStatus
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: token
        in: path
        description: Token to retrieve export status
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "200":
          description: Returns the Token to retrieve export status and download zip
            achive
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value: |-
                    {
                        "token":"[TOKEN]",
                        "ready":true/false,
                        "percentage":int,
                    }
        "400":
          description: Bad request if it has error in the parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/healthcheck/enhancer:
    get:
      tags:
      - enterprise
      - node healthcheck
      - nodes
      summary: "Check Health Status Node Enhancer is Configured [Enterprise]"
      description: |
        Check if the Project has the Health Status Node Enhancer configured.

        Authorization required: `app_admin` for `system` resource.
      operationId: apiProjectHasHealthStatusEnhancer
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Healthcheck Status List without Checks
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    status: true
                    message: The project test has the HealthStatusNodeEnhancerPlugin
                      installed
  /project/{project}/healthcheck/refresh:
    post:
      tags:
      - enterprise
      - node healthcheck
      - nodes
      summary: "Refresh Node Healthcheck Status [Enterprise]"
      description: |
        Request a Refresh to the Healtcheck status for a set of Nodes.

        Authorization required: `app_admin` for `system` resource.
      operationId: apiRefreshHealthCheck
      parameters:
      - name: node
        in: query
        description: Node Name
        required: false
        schema:
          type: string
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      requestBody:
        description: Node List Request
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  nodes:
                  - node1
                  - node2
        required: false
      responses:
        "200":
          description: Healthcheck Status
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    message: ok
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicErrorResponse'
  /project/{project}/healthcheck/refresh/all:
    post:
      tags:
      - enterprise
      - node healthcheck
      - nodes
      summary: "Refresh All Project Node Healthchecks [Enterprise]"
      description: |
        Request a Refresh to the Healtcheck status for all Nodes in a Project.

        Authorization required: `app_admin` for `system` resource.
      operationId: apiRefreshHealthCheckAll
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Healthcheck Status
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    message: ok
  /project/{project}/healthcheck/status:
    get:
      tags:
      - enterprise
      - node healthcheck
      - nodes
      summary: "Get Node Healthcheck Status [Enterprise]"
      description: |+
        Node Healtcheck status for a Node.

        Authorization required: `app_admin` for `system` resource.


      operationId: apiNodeHealth
      parameters:
      - name: node
        in: query
        description: Node Name
        required: true
        schema:
          type: string
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Healthcheck Status
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    node: node-0
                    project: test
                    healthchecks:
                    - type: command
                      status: HEALTHY
                      data: {}
                    status: HEALTHY
                    lastChecked: 2023-03-20T17:33:28Z
                    duration: 25
        "400":
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicErrorResponse'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicErrorResponse'
  /project/{project}/healthcheck/status/all:
    get:
      tags:
      - enterprise
      - node healthcheck
      - nodes
      summary: "Get Node Healthcheck Status for All Nodes [Enterprise]"
      description: |
        Node Healtcheck status for all Nodes.

        Authorization required: `app_admin` for `system` resource.
      operationId: apiNodeHealthAll
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: includeChecks
        in: query
        description: Include Checks
        required: false
        schema:
          type: boolean
      responses:
        "200":
          description: Healthcheck Status List without Checks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [
                      {
                        "node": "459a545d524f",
                        "project": "test",
                        "href": "/api/44/project/test/healthcheck/status?nodename=459a545d524f",
                        "status": "HEALTHY",
                        "lastChecked": "2023-03-20T19:30:28Z",
                        "duration": 35
                      },
                      {
                        "node": "node-0",
                        "project": "test",
                        "href": "/api/44/project/test/healthcheck/status?nodename=node-0",
                        "status": "HEALTHY",
                        "lastChecked": "2023-03-20T19:30:28Z",
                        "duration": 19
                      }
                    ]
  /project/{project}/history:
    get:
      tags:
      - history
      summary: Listing History
      description: |2-

        List the event history for a project.
      operationId: apiHistoryv14
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: jobIdFilter
        in: query
        description: include events for a job ID.
        schema:
          type: string
      - name: reportIdFilter
        in: query
        description: include events for a event Name.
        schema:
          type: string
      - name: userFilter
        in: query
        description: include events created by a user.
        schema:
          type: string
      - name: statFilter
        in: query
        description: "include events based on result status.  this can be 'succeed','fail',\
          \ or 'cancel'."
        schema:
          type: string
      - name: jobListFilter
        in: query
        description: "include events for the job by name, format: 'group/name'.  To\
          \ use multiple values, include this parameter multiple times."
        schema:
          type: array
          items:
            type: string
      - name: excludeJobListFilter
        in: query
        description: "exclude events for the job by name, format: 'group/name'. To\
          \ use multiple values, include this parameter multiple times."
        schema:
          type: array
          items:
            type: string
      - name: recentFilter
        in: query
        description: |-
          Use a simple text format to filter events that occurred within a period of time. The format is "XY" where X is an integer, and "Y" is one of:
                  * `h`: hour
                  * `d`: day
                  * `w`: week
                  * `m`: month
                  * `y`: year
                  So a value of "2w" would return events within the last two weeks.
        schema:
          type: string
      - name: begin
        in: query
        description: "Specify exact date for earliest result. a unix millisecond timestamp,\
          \ or a W3C dateTime string in the format \"yyyy-MM-ddTHH:mm:ssZ\""
        schema:
          type: string
      - name: end
        in: query
        description: "Specify exact date for latest result. a unix millisecond timestamp,\
          \ or a W3C dateTime string in the format \"yyyy-MM-ddTHH:mm:ssZ\""
        schema:
          type: string
      - name: max
        in: query
        description: indicate the maximum number of events to return. The default
          maximum to return is 20
        schema:
          type: integer
      - name: offset
        in: query
        description: indicate the 0-indexed offset for the first event to return
        schema:
          type: integer
      responses:
        "200":
          description: History results
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    paging:
                      count: 10
                      total: 110
                      max: 20
                      offset: 100
                    events:
                    - starttime: 123
                      endtime: 123
                      title: "[job title, or adhoc]"
                      status: "[status]"
                      statusString: "[string]"
                      summary: "[summary text]"
                      node-summary:
                        succeeded: 1
                        failed: 2
                        total: 3
                      user: "[user]"
                      project: "[project]"
                      date-started: "[yyyy-MM-ddTHH:mm:ssZ]"
                      date-ended: "[yyyy-MM-ddTHH:mm:ssZ]"
                      job:
                        id: "[uuid]"
                        href: "[api href]"
                      execution:
                        id: "[id]"
                        href: "[api href]"
  /project/{project}/import:
    put:
      tags:
      - project
      summary: Import a zip archive.
      description: |-
        Import a zip archive to the project.
        Note: the import status indicates "failed" if any Jobs had failures, otherwise it indicates "successful" even if other files in the archive were not imported.

        Requires `import` authorization for the project resource.
      operationId: apiProjectImport
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: jobUuidOption
        in: query
        description: "Option declaring how duplicate Job UUIDs should be handled.\
          \ \nIf preserve (default) then imported job UUIDs will not be modified,\
          \ and may conflict with jobs in other projects. \nIf remove then all job\
          \ UUIDs will be removed before importing."
        required: false
        schema:
          type: string
      - name: importExecutions
        in: query
        description: "If true, import all executions and logs from the archive (default).\
          \ \nIf false, do not import executions or logs."
        required: false
        schema:
          type: boolean
      - name: 'importConfig '
        in: query
        description: "If true, import the project configuration from the archive.\
          \ \nIf false, do not import the project configuration (default)."
        required: false
        schema:
          type: boolean
      - name: 'importACL '
        in: query
        description: "If true, import all of the ACL Policies from the archive. \n\
          If false, do not import the ACL Policies (default)."
        required: false
        schema:
          type: boolean
      - name: 'importScm '
        in: query
        description: "If true, import SCM configuration from the archive. \nIf false,\
          \ do not import the SCM configuration (default)."
        required: false
        schema:
          type: boolean
      - name: importWebhooks
        in: query
        description: "In APIv34 or later: If true, import the webhooks in the archive.\
          \ \nIf false, do not import webhooks (default)."
        required: false
        schema:
          type: boolean
      - name: whkRegenAuthTokens
        in: query
        description: "In APIv34 or later: If true, always regenerate the auth tokens\
          \ associated with the webhook. \nIf false, the webhook auth token in the\
          \ archive will be imported. \nIf no auth token info was included with the\
          \ webhook, it will be generated (default)."
        required: false
        schema:
          type: boolean
      - name: importNodesSources
        in: query
        description: "In APIv38 or later: If true, import Node Resources Source defined\
          \ on project properties. \nIf false, do not import the nodes sources."
        required: false
        schema:
          type: boolean
      - name: importComponents.NAME
        in: query
        description: |-
          Enable a component for import.
          Project archives may contain "components" which can be imported, beyond the base set of contents. This includes some data used by Process Automation (Rundeck Enterprise) features.

          For example, to enable Webhook import, you could use `importWebhooks` and `whkRegenAuthTokens` params, but those are simply shortcuts for the following parameters:

          * `importComponents.webhooks=true&importOpts.webhooks.regenAuthTokens=true`

          Import schedules definitions:

          * `importComponents.Schedule%20Definitions=true`
        required: false
        schema:
          type: string
      - name: importOpts.NAME.KEY
        in: query
        description: Set a component option. See `importComponents.NAME` parameter
          description
        required: false
        schema:
          type: string
      requestBody:
        content:
          application/zip:
            schema:
              type: string
              properties:
                archiveParams:
                  $ref: '#/components/schemas/ProjectArchiveParams'
              format: binary
      responses:
        "200":
          description: |-
            Note: the import status indicates "failed" if any Jobs had failures, otherwise it indicates "successful" even if other files in the archive were not imported.

            Response will indicate whether the imported contents had any errors.

            Note: `other_errors` included since API v35
          content:
            application/json:
              schema:
                type: object
              examples:
                successful-result:
                  description: All imported jobs and files were successful
                  value:
                    import_status: successful
                status-failed-result:
                  description: Some imported files failed
                  value:
                    import_status: failed
                    errors:
                    - "Job ABC could not be validated: ..."
                    - "Job XYZ could not be validated: ..."
                    execution_errors:
                    - "Execution 123 could not be imported: ..."
                    - "Execution 456 could not be imported: ..."
                    acl_errors:
                    - "file.aclpolicy could not be validated: ..."
                    - "file2.aclpolicy could not be validated: ..."
                    other_errors:
                    - "webhooks could not be validated: ..."
        "400":
          description: Bad request if it has error in the parameters
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/jobs:
    get:
      tags:
      - jobs
      summary: Listing Jobs
      description: |
        List the jobs that exist for a project.

        * `idlist`: specify a comma-separated list of Job IDs to include
        * `groupPath`: specify a group or partial group path to include all jobs within that group path. (Default value: "*", all groups). Set to the special value "-" to match the top level jobs only
        * `jobFilter`: specify a filter for the job Name. Matches any job name that contains this value.
        * `jobExactFilter`: specify an exact job name to match.
        * `groupPathExact`: specify an exact group path to match.  Set to the special value "-" to match the top level jobs only
        * `scheduledFilter`: `true/false` specify whether to return only scheduled or only not scheduled jobs.
        * `serverNodeUUIDFilter`: Value: a UUID. In cluster mode, use to select scheduled jobs assigned to the server with given UUID.

        **Note:** It is possible to disable result set pagination by setting the property `rundeck.api.paginatejobs.enabled=false` which is assumed to be true if not set.

        **Note:** If neither `groupPath` nor `groupPathExact` are specified, then the default `groupPath` value of "*" will be used (matching jobs in all groups).  `groupPathExact` cannot be combined with `groupPath`.  You can set either one to "-" to match only the top-level jobs which are not within a group.

        Authorization required: `view` or `read` for each Job resource.
      operationId: apiJobsListv2
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: max
        in: query
        description: limit the maximum amount of results to be received.
        schema:
          type: integer
      - name: offset
        in: query
        description: use in conjunction with `max` to paginate the result set.
        schema:
          type: integer
      - name: tags
        in: query
        description: "specify a tag or comma separated list of tags to list Jobs that\
          \ have matching tags. (e.g. `tags=tag1,tag2`)"
        schema:
          type: integer
      - name: jobFilter
        in: query
        schema:
          type: string
          description: specify a filter for the job Name. Matches any job name that
            contains this value.
      - name: jobExactFilter
        in: query
        schema:
          type: string
          description: specify an exact job name to match.
      - name: projFilter
        in: query
        schema:
          type: string
      - name: groupPath
        in: query
        schema:
          type: string
          description: "specify a group or partial group path to include all jobs\
            \ within that group path. (Default value: \"*\", all groups). Set to the\
            \ special value \"-\" to match the top level jobs only"
      - name: groupPathExact
        in: query
        schema:
          type: string
          description: specify an exact group path to match.  Set to the special value
            "-" to match the top level jobs only
      - name: descFilter
        in: query
        schema:
          type: string
      - name: loglevelFilter
        in: query
        schema:
          type: string
      - name: idlist
        in: query
        schema:
          type: string
          description: specify a comma-separated list of Job IDs to include
      - name: scheduledFilter
        in: query
        schema:
          type: boolean
          description: specify whether to return only scheduled or only not scheduled
            jobs.
      - name: scheduleEnabledFilter
        in: query
        schema:
          type: boolean
      - name: executionEnabledFilter
        in: query
        schema:
          type: boolean
      - name: serverNodeUUIDFilter
        in: query
        schema:
          type: string
          description: "In cluster mode, use to select scheduled jobs assigned to\
            \ the server with given UUID."
          format: uuid
      - name: daysAhead
        in: query
        schema:
          type: integer
          format: int32
      - name: runJobLaterFilter
        in: query
        schema:
          type: boolean
      - name: paginatedRequired
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: Job List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/JobInfo'
              examples:
                example:
                  value: |-
                    [
                      {
                        "id": "[UUID]",
                        "name": "[name]",
                        "group": "[group]",
                        "project": "[project]",
                        "description": "...",
                        "href": "[API url]",
                        "permalink": "[GUI url]",
                        "scheduled": true,
                        "scheduleEnabled": true,
                        "enabled": true
                      }
                    ]
  /project/{project}/jobs/browse:
    get:
      tags:
      - jobs
      summary: Browse jobs at a path
      description: |-
        Browse the jobs at a specific group path.

        Authorization required: `read` or `view` for the Job.

        Since: v46
      operationId: apiJobBrowseGet_docs
      parameters:
      - name: project
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: "Group path root, or blank for the root"
        required: true
        schema:
          type: string
      - name: meta
        in: query
        description: "Comma-separated list of metadata items to include, or \"*\"\
          \ for all"
        required: true
        schema:
          type: string
      - name: breakpoint
        in: query
        description: "Breakpoint, max number of jobs to load with metadata, if more\
          \ results than the \nbreakpoint are available, no metadata will be loaded"
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Job results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobBrowseResponse'
    post:
      tags:
      - jobs
      summary: Query jobs at a path
      description: |-
        Query the jobs at a specific group path.

        Authorization required: `read` or `view` for the Job.

        Since: v46
      operationId: apiJobBrowse
      parameters:
      - name: project
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: "Group path root, or blank for the root"
        required: true
        schema:
          type: string
      - name: meta
        in: query
        description: "Comma-separated list of metadata items to include, or \"*\"\
          \ for all"
        required: true
        schema:
          type: string
      - name: breakpoint
        in: query
        description: "Breakpoint, max number of jobs to load with metadata, if more\
          \ results than the \nbreakpoint are available, no metadata will be loaded"
        required: true
        schema:
          type: integer
      requestBody:
        description: Query parameters
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RdJobQueryInput'
            examples:
              example:
                value: ""
      responses:
        "200":
          description: Job results
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JobBrowseResponse'
  /project/{project}/jobs/export:
    get:
      tags:
      - jobs
      summary: Export Jobs
      description: |
        Export the job definitions in a Project in JSON or YAML formats.

        Authorization required: `read` for each job resource.

        Since: v14
      operationId: apiJobsExportv14
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: idlist
        in: query
        description: A comma-separated list of Job IDs to export
        schema:
          type: string
      - name: groupPath
        in: query
        description: specify a group or partial group path to include all jobs within
          that group path.
        schema:
          type: string
      - name: jobFilter
        in: query
        description: specify a filter for the job Name
        schema:
          type: string
      - name: format
        in: query
        description: can be "yaml" or "json" (API v44+) to specify the output format
        content:
          application/json:
            schema:
              type: string
              enum:
              - json
              - yaml
      - name: jobExactFilter
        in: query
        schema:
          type: string
          description: specify an exact job name to match.
      - name: projFilter
        in: query
        schema:
          type: string
      - name: groupPathExact
        in: query
        schema:
          type: string
          description: specify an exact group path to match.  Set to the special value
            "-" to match the top level jobs only
      - name: descFilter
        in: query
        schema:
          type: string
      - name: loglevelFilter
        in: query
        schema:
          type: string
      - name: scheduledFilter
        in: query
        schema:
          type: boolean
          description: specify whether to return only scheduled or only not scheduled
            jobs.
      - name: scheduleEnabledFilter
        in: query
        schema:
          type: boolean
      - name: executionEnabledFilter
        in: query
        schema:
          type: boolean
      - name: serverNodeUUIDFilter
        in: query
        schema:
          type: string
          description: "In cluster mode, use to select scheduled jobs assigned to\
            \ the server with given UUID."
          format: uuid
      - name: daysAhead
        in: query
        schema:
          type: integer
          format: int32
      - name: runJobLaterFilter
        in: query
        schema:
          type: boolean
      - name: paginatedRequired
        in: query
        schema:
          type: boolean
      responses:
        "200":
          description: |-
            Job definition list, depending on the requested format:

            * YAML: [job-yaml](https://docs.rundeck.com/docs/manual/document-format-reference/job-yaml-v12.html) format
            * JSON: [job-json](https://docs.rundeck.com/docs/manual/document-format-reference/job-json-v44.html) format (API v44+)
          content:
            application/json:
              schema:
                type: object
                externalDocs:
                  description: Job JSON Format
                  url: https://docs.rundeck.com/docs/manual/document-format-reference/job-json-v44.html
            text/yaml:
              schema:
                type: string
                externalDocs:
                  description: Job YAML Format
                  url: https://docs.rundeck.com/docs/manual/document-format-reference/job-yaml-v12.html
  /project/{project}/jobs/import:
    post:
      tags:
      - jobs
      - jobs
      summary: Import Job definitions
      description: |-
        Import a set of job definitions in a supported format.


        Since: v14
      operationId: apiJobsImportv14
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: fileformat
        in: query
        description: "Input file format, to specify the input format, if multipart\
          \ of form input is sent."
        schema:
          type: string
          enum:
          - json
          - yaml
      - name: dupeOption
        in: query
        description: "A value to indicate the behavior when importing jobs which already\
          \ exist.  Value can be \"skip\", \"create\", or \"update\". Default is \"\
          create\"."
        schema:
          type: string
          enum:
          - skip
          - create
          - update
      - name: uuidOption
        in: query
        description: |
          Whether to preserve or remove UUIDs from the imported jobs:

          *  `preserve`: Preserve the UUIDs in imported jobs.  This may cause the import to fail if the UUID is already used. (Default value).
          *  `remove`: Remove the UUIDs from imported jobs. Allows update/create to succeed without conflict on UUID.
        schema:
          type: string
          enum:
          - preserve
          - remove
      requestBody:
        description: |
          Input Request supports multiple types:

          * `Content-Type: x-www-form-urlencoded`, with a `xmlBatch` request parameter containing the input content
          * `Content-Type: multipart/form-data` multipart MIME request part named `xmlBatch` containing the content.
          * `Content-Type: application/yaml`, request body is the Jobs YAML formatted job definition
          * `Content-Type: application/json`, request body is the Jobs JSON formatted job definition (API v44+)
        content:
          application/x-www-form-urlencoded: {}
          multipart/form-data: {}
          application/json:
            schema:
              type: object
              externalDocs:
                description: Job JSON Format
                url: https://docs.rundeck.com/docs/manual/document-format-reference/job-json-v44.html
          text/yaml:
            schema:
              type: string
              externalDocs:
                description: Job YAML Format
                url: https://docs.rundeck.com/docs/manual/document-format-reference/job-yaml-v12.html
      responses:
        "200":
          description: |+
            Job definition import result.

            A set of status results.  Each imported job definition will be either "succeeded", "failed" or "skipped".
            Within each one there will be 0 or more objects representing the imported job.

            Each job entry contains:

            * `index`: index in the input content of the job definition.
            * `id`: If the job exists, or was successfully created, its UUID
            * `href`: If the job exists, or was successfully created, its API href
            * `permalink`: If the job exists, or was successfully created, its GUI URL.
            * `project`: The project
            * `name`: The job name
            * `group`: The job Group
            * `error`: (if failed) the error message

          content:
            application/json:
              examples:
                example:
                  value:
                    succeeded:
                    - index: 1
                      href: http://madmartigan.local:4440/api/14/job/3b6c19f6-41ee-475f-8fd0-8f1a26f27a9a
                      id: 3b6c19f6-41ee-475f-8fd0-8f1a26f27a9a
                      name: restart
                      group: app2/dev
                      project: test
                      permalink: http://madmartigan.local:4440/job/show/3b6c19f6-41ee-475f-8fd0-8f1a26f27a9a
                    failed:
                    - index: 2
                      href: http://madmartigan.local:4440/api/14/job/3b6c19f6-41ee-475f-8fd0-8f1a26f27a9a
                      id: 3b6c19f6-41ee-475f-8fd0-8f1a26f27a9a
                      name: restart
                      group: app2/dev
                      project: test
                      permalink: http://madmartigan.local:4440/job/show/3b6c19f6-41ee-475f-8fd0-8f1a26f27a9a
                      error: error message
                    skipped: []
        "415":
          description: Unsupported media type
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /project/{project}/listAllJobs:
    get:
      tags:
      - enterprise
      - jobs
      summary: "List all Jobs in Summarized Form [Enterprise]"
      description: List the jobs summarized for a project.
      operationId: apiListAllJobsInProject
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: |-
            List of Jobs.

            If the job is scheduled, it will contain a `nextExecution` (millisecond unix timestamp), and `nextExecutionRelative` (text)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [ {
                        "scheduleEnabled": true,
                        "executionEnabled": true,
                        "scheduled": false,
                        "name": "test job",
                        "type": "job",
                        "uuid": "0bafa429-96ab-4568-ac60-0a440bc11f26",
                        "actions": [
                          "update",
                          "view",
                          "run",
                          "delete",
                          "read",
                          "kill"
                        ],
                        "group": "job group",
                        "desc": "a basic job"
                      }
                    ]
  /project/{project}/meta:
    get:
      tags:
      - project
      summary: Get project metadata
      description: |-
        Get project metadata.

        Requires `read` authorization for the project resource.
        Since: v46
      operationId: apiProjectMeta
      parameters:
      - name: project
        in: path
        description: Project name
        required: true
        schema:
          type: string
      - name: meta
        in: query
        description: "Comma-separated list of metadata items to include, or \"*\"\
          \ for all (default)"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Project Metadata results
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/ItemMeta'
  /project/{project}/resource/{name}:
    get:
      tags:
      - nodes
      - project
      summary: Get Node Info
      description: "Get a specific resource within a project.\n\nAuthorization required:\
        \ `read` for project resource type `node`, as well as `read` for the Node\
        \ \n\nSince: v14"
      operationId: apiResourcev14
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: name
        in: path
        description: Node Name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1project~1%7Bproject%7D~1resources/get/responses/200'
  /project/{project}/resources:
    get:
      tags:
      - nodes
      - project
      summary: List Project Nodes
      description: |-
        List or query the nodes (resources) for a project.

        Node Filter parameters: You can select nodes to include and exclude in the result set, see below.

        **Note:** If no query parameters are included, the result set will include all Node resources for the project.

        Refer to the [User Guide - Node Filters](https://docs.rundeck.com/docs/manual/11-node-filters.html) Documentation for information on
        the node filter syntax and usage.

        A basic node filter looks like:

            attribute: value attribute2: value2

        To specify a Node Filter string as a URL parameter for an API request, use a parameter named `filter`.
        Your HTTP client will have to correctly escape the value of the `filter` parameter.  For example you can
        use `curl` like this;

            curl --data-urlencode "filter=attribute: value"

        Common attributes:

        * `name` - node name
        * `tags` - tags
        * `hostname`
        * `username`
        * `osFamily`, `osName`, `osVersion`, `osArch`

        Custom attributes can also be used.

        Authorization required: `read` for project resource type `node`, as well as `read` for each Node resource

        Since: v14
      operationId: apiResourcesv2
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Node Filter String
        schema:
          type: string
      responses:
        "200":
          description: The resource model data.
          content:
            application/json:
              schema:
                type: object
                externalDocs:
                  description: Resources JSON Format
                  url: https://docs.rundeck.com/docs/manual/document-format-reference/resource-json-v10.html
              examples:
                example:
                  value:
                    node1:
                      nodename: node1
                      hostname: node1
                      osVersion: 5.15.49-linuxkit
                      osFamily: unix
                      osArch: amd64
                      description: Rundeck server node
                      osName: Linux
            text/yaml:
              schema:
                type: string
                externalDocs:
                  description: Resources YAML Format
                  url: https://docs.rundeck.com/docs/manual/document-format-reference/resource-yaml-v13.html
              examples:
                example:
                  value: |-
                    node1:
                      nodename: node1
                      hostname: node1
                      osVersion: 5.15.49-linuxkit
                      osFamily: unix
                      osArch: amd64
                      description: Rundeck server node
                      osName: Linux
                      tags: ''
  /project/{project}/run/command:
    post:
      tags:
      - adhoc
      summary: Run Adhoc Command
      description: |-
        Run a command string.

        Authorization required: `run` for project resource type `adhoc`, as well as `runAs` if the runAs parameter is used

        Since: v14
      operationId: apiRunCommandv14
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Node Filter String
        schema:
          type: string
      - name: exec
        in: query
        description: "The shell command string to run, e.g. \"echo hello\"."
        schema:
          type: string
      - name: nodeThreadcount
        in: query
        description: threadcount to use
        schema:
          type: integer
      - name: nodeKeepgoing
        in: query
        description: "if \"true\", continue executing on other nodes even if some\
          \ fail."
        schema:
          type: boolean
      - name: asUser
        in: query
        description: specifies a username identifying the user who ran the command.
          Requires `runAs` permission.
        schema:
          type: string
      requestBody:
        description: Request body
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ApiRunAdhocRequest'
            examples:
              example:
                value:
                  project: "[project]"
                  exec: "[exec]"
                  nodeThreadcount: 2
                  nodeKeepgoing: true
                  asUser: "[asUser]"
                  filter: "[node filter string]"
      responses:
        "200":
          description: item identifying the new execution by ID.
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    message: Immediate execution scheduled (X)
                    execution:
                      id: 1
                      href: "[API Href]"
                      permalink: "[GUI Href]"
  /project/{project}/run/script:
    post:
      tags:
      - adhoc
      summary: Run Adhoc Script
      description: |-
        Run a script.

        Authorization required: `run` for project resource type `adhoc`, as well as `runAs` if the runAs parameter is used

        Since: v14
      operationId: apiRunScriptv14
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Node Filter String
        schema:
          type: string
      - name: argString
        in: query
        description: Arguments to pass to the script when executed
        schema:
          type: string
      - name: nodeThreadcount
        in: query
        description: threadcount to use
        schema:
          type: integer
      - name: nodeKeepgoing
        in: query
        description: "if \"true\", continue executing on other nodes even if some\
          \ fail."
        schema:
          type: boolean
      - name: asUser
        in: query
        description: specifies a username identifying the user who ran the command.
          Requires `runAs` permission.
        schema:
          type: string
      - name: scriptInterpreter
        in: query
        description: a command to use to run the script
        schema:
          type: string
      - name: fileExtension
        in: query
        description: extension of the script file on the remote node (since v14)
        schema:
          type: string
      - name: interpreterArgsQuoted
        in: query
        description: "if true, the script file and arguments will be quoted as the\
          \ last argument to the `scriptInterpreter`"
        schema:
          type: boolean
      requestBody:
        description: |-
          The script file content can be submitted either as a form request
           or multipart attachment with request parameters, or can be a json document.

          For Content-Type: `application/x-www-form-urlencoded`

          * `scriptFile`: A `x-www-form-urlencoded` request parameter containing the script file content.

          For Content-Type: `multipart/form-data`

          * `scriptFile`: the script file contents (`scriptFile` being the `name` attribute of the `Content-Disposition` header)
        content:
          multipart/form-data:
            schema:
              type: string
              properties:
                runAdhocRequest:
                  $ref: '#/components/schemas/ApiRunAdhocRequest'
          application/x-www-form-urlencoded:
            schema:
              type: string
              properties:
                runAdhocRequest:
                  $ref: '#/components/schemas/ApiRunAdhocRequest'
          application/json:
            schema:
              properties:
                runAdhocRequest:
                  $ref: '#/components/schemas/ApiRunAdhocRequest'
              allOf:
              - $ref: '#/components/schemas/ApiRunAdhocRequest'
              - properties:
                  runAdhocRequest:
                    $ref: '#/components/schemas/ApiRunAdhocRequest'
            examples:
              example:
                value:
                  project: "[project]"
                  script: "[script]"
                  nodeThreadcount: 1
                  nodeKeepgoing: true
                  asUser: "[asUser]"
                  argString: "[argString]"
                  scriptInterpreter: "[scriptInterpreter]"
                  interpreterArgsQuoted: true
                  fileExtension: "[fileExtension]"
                  filter: "[node filter string]"
      responses:
        "200":
          description: item identifying the new execution by ID.
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    message: Immediate execution scheduled (X)
                    execution:
                      id: 1
                      href: "[API Href]"
                      permalink: "[GUI Href]"
  /project/{project}/run/url:
    post:
      tags:
      - adhoc
      summary: Run Adhoc Script URL
      description: |-
        Run a script downloaded from a URL.

        Authorization required: `run` for project resource type `adhoc`, as well as `runAs` if the runAs parameter is used

        Since: v14
      operationId: apiRunScriptUrlv14
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: filter
        in: query
        description: Node Filter String
        schema:
          type: string
      - name: argString
        in: query
        description: Arguments to pass to the script when executed
        schema:
          type: string
      - name: scriptURL
        in: query
        description: A URL pointing to a script file
        schema:
          type: string
      - name: nodeThreadcount
        in: query
        description: threadcount to use
        schema:
          type: integer
      - name: nodeKeepgoing
        in: query
        description: "if \"true\", continue executing on other nodes even if some\
          \ fail."
        schema:
          type: boolean
      - name: asUser
        in: query
        description: specifies a username identifying the user who ran the command.
          Requires `runAs` permission.
        schema:
          type: string
      - name: scriptInterpreter
        in: query
        description: a command to use to run the script
        schema:
          type: string
      - name: fileExtension
        in: query
        description: extension of the script file on the remote node (since v14)
        schema:
          type: string
      - name: interpreterArgsQuoted
        in: query
        description: "if true, the script file and arguments will be quoted as the\
          \ last argument to the `scriptInterpreter`"
        schema:
          type: boolean
      requestBody:
        description: Adhoc Script URL Request
        content:
          application/json:
            schema:
              properties:
                runAdhocRequest:
                  $ref: '#/components/schemas/ApiRunAdhocRequest'
              allOf:
              - $ref: '#/components/schemas/ApiRunAdhocRequest'
              - properties:
                  runAdhocRequest:
                    $ref: '#/components/schemas/ApiRunAdhocRequest'
            examples:
              example:
                value:
                  project: "[project]"
                  url: "[scriptURL]"
                  nodeThreadcount: 1
                  nodeKeepgoing: true
                  asUser: "[asUser]"
                  argString: "[argString]"
                  scriptInterpreter: "[scriptInterpreter]"
                  interpreterArgsQuoted: true
                  fileExtension: "[fileExtension]"
                  filter: "[node filter string]"
      responses:
        "200":
          description: item identifying the new execution by ID.
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    message: Immediate execution scheduled (X)
                    execution:
                      id: 1
                      href: "[API Href]"
                      permalink: "[GUI Href]"
  /project/{project}/scm/toggle:
    post:
      tags:
      - plugins
      - scm
      summary: Toggle SCM for a Project
      description: " Toggle SCM enabled/disabled for a Project.\n\nThis endpoint will\
        \ enable or disable all configured SCM plugins for the project. \nSpecify\
        \ whether to enable or disable in the request body.\n\nThis action is idempotent.\n\
        \nAuthorization Required: `configure` for the Project resource (app context)\n\
        \nSince: v46"
      operationId: apiProjectToggleSCM
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      requestBody:
        description: Configuration values for the plugin.
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScmToggleRequest'
            examples:
              example:
                value:
                  enabled: true
      responses:
        "200":
          description: Success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmToggleResponse'
  /project/{project}/scm/{integration}/action/{actionId}:
    post:
      tags:
      - plugins
      - scm
      summary: Perform Project SCM Action
      description: |-
        Perform the action for the SCM integration plugin, with a set of input parameters,
        selected Jobs, or Items, or Items to delete.

        Depending on the available Input Fields for the action (see `/project/{project}/scm/{integration}/action/{actionId}/input`), the action will
        expect a set of `input` values.

        The set of `jobs` and `items` to choose from will be included in the Input Fields response,
        however where an Item has an associated Job, you can supply either the Job ID, or the Item ID.

        When there are items to be deleted on `export` integration, you can specify the Item IDs in the `deleted`
        section.  However, if the item is associated with a renamed Job, including the Job ID will have the same effect.

        When there are items to be deleted on `import` integration, you must specify the Job IDs in the `deletedJobs`
        section.

        Note: including the Item ID of an associated job, instead of the Job ID,
        will not automatically delete a renamed item.

        Authorization Required: `export` or `scm_export` or `import` or `scm_import` for the Project resource (app context), depending on the integration type

        Since: v15
      operationId: apiProjectActionPerform
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: actionId
        in: path
        description: Action ID
        required: true
        schema:
          type: string
      requestBody:
        description: Perform Action Request
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ScmAction'
        required: true
      responses:
        "200":
          description: Action response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmActionResult'
  /project/{project}/scm/{integration}/action/{actionId}/input:
    get:
      tags:
      - plugins
      - scm
      summary: Get Project SCM Action Input Fields
      description: |2-
         Get the input fields and selectable items for a specific action.

        Each action may have a set of Input Fields describing user-input values.

        Export actions may have a set of `exportItems`s which describe Job changes that can be
        included in the action.

        Import actions may have a set of `importItems`s which describe paths from the import repo
        which can be selected for the action, they will also be associated with a Job after they are matched.

        Authorization Required: `export` or `scm_export` or `import` or `scm_import` for the Project resource (app context), depending on the integration type

        Since: v15
      operationId: apiProjectActionInput
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: actionId
        in: path
        description: Action ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Action Input fields response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmActionInput'
  /project/{project}/scm/{integration}/config:
    get:
      tags:
      - plugins
      - scm
      summary: Get Project SCM Config
      description: |2-
         Get the configuration properties for the current plugin.

        Authorization Required: `configure` for the Project resource (app context)

        Since: v15
      operationId: apiProjectConfig
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      responses:
        "200":
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmProjectPluginConfig'
        "404":
          description: "Not Found, plugin is not configured"
  /project/{project}/scm/{integration}/plugin/{type}/disable:
    post:
      tags:
      - plugins
      - scm
      summary: Disable SCM Plugin for a Project
      description: |2-
         Disable a plugin. (Idempotent).

        Authorization Required: `configure` for the Project resource (app context)

        Since: v15
      operationId: apiProjectDisable
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: type
        in: path
        description: Plugin Name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1project~1%7Bproject%7D~1scm~1%7Bintegration%7D~1plugin~1%7Btype%7D~1setup/post/responses/200'
  /project/{project}/scm/{integration}/plugin/{type}/enable:
    post:
      tags:
      - plugins
      - scm
      summary: Enable SCM Plugin for a Project
      description: |2-
         Enable a plugin that was previously configured. (Idempotent).

        Authorization Required: `configure` for the Project resource (app context)

        Since: v15
      operationId: apiProjectEnable
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: type
        in: path
        description: Plugin Name
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1project~1%7Bproject%7D~1scm~1%7Bintegration%7D~1plugin~1%7Btype%7D~1setup/post/responses/200'
  /project/{project}/scm/{integration}/plugin/{type}/input:
    get:
      tags:
      - plugins
      - scm
      summary: Get SCM Plugin Input Fields
      description: |2-
         List the input fields for a specific plugin.

        The response will list each input field.

        Authorization Required: `export` or `scm_export` or `import` or `scm_import` for the Project resource (app context), depending on the integration type

        Since: v15
      operationId: apiPluginInput
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: type
        in: path
        description: Plugin Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Input fields response.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmPluginSetupInput'
  /project/{project}/scm/{integration}/plugin/{type}/setup:
    post:
      tags:
      - plugins
      - scm
      summary: Setup SCM Plugin for a Project
      description: |-
        Configure and enable a plugin for a project.

        The request body is expected to contain entries for all of the `required` input fields for the plugin.

        See the `/project/{project}/scm/{integration}/plugin/{type}/input` endpoint.

        If a validation error occurs with the configuration, then the response will include detail about the errors.

        Authorization Required: `configure` for the Project resource (app context)

        Since: v15
      operationId: apiProjectSetup
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      - name: type
        in: path
        description: Plugin Name
        required: true
        schema:
          type: string
      requestBody:
        description: Configuration values for the plugin.
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  config:
                    key: value
                    key2: value2...
      responses:
        "200":
          description: Success result.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmActionResult'
        "400":
          description: Validation or input error occurred.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmActionResult'
  /project/{project}/scm/{integration}/plugins:
    get:
      tags:
      - plugins
      - scm
      summary: List SCM Plugins
      description: "Lists the available plugins for the specified integration.  Each\
        \ plugin is identified by a \n`type` name.\n\nAuthorization Required: `configure`\
        \ for the Project resource (app context)\n\nSince: v15\n"
      operationId: apiPlugins
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      responses:
        "200":
          description: Result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmPluginList'
  /project/{project}/scm/{integration}/status:
    get:
      tags:
      - plugins
      - scm
      summary: Get Project SCM Status
      description: |2-
         Get the SCM plugin status and available actions for the project.

        Authorization Required: `export` or `scm_export` or `import` or `scm_import` for the Project resource (app context), depending on the integration type

        Since: v15
      operationId: apiProjectStatus
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: integration
        in: path
        description: Integration Name
        required: true
        schema:
          type: string
          enum:
          - export
          - import
      responses:
        "200":
          description: Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScmProjectStatus'
        "404":
          description: "Not Found, plugin is not configured"
  /project/{project}/source/{index}:
    get:
      tags:
      - nodes
      - project
      summary: Get a Resource Model Source for a Project
      description: "The response contains the `index`, the `type`, and \ndetails about\
        \ the `resources`. If the\nsource had any error, that is included as `errors`.\n\
        \nResources data includes any `description` provided by the source, whether\
        \ it is `empty`, and\nwhether it is `writeable`.  The `href` indicates the\
        \ URL for `/project/{project}/source/{index}/resources`.\n\nAuthorization\
        \ required: `configure` for project resource\n\nSince: v23"
      operationId: apiSourceGet
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: index
        in: path
        description: Source Index
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Source definition.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Source'
              examples:
                example:
                  value:
                    index: 1
                    resources:
                      description: /Users/greg/rundeck2.11/projects/atest/etc/resources.xml
                      empty: false
                      href: http://ecto1.local:4440/api/23/project/atest/source/1/resources
                      writeable: true
                    type: file
  /project/{project}/source/{index}/resources:
    get:
      tags:
      - nodes
      - project
      summary: List Resources of a Resource Model Source
      description: |2-

        Authorization required: `configure` for project resource

        Since: v23
      operationId: apiSourceGetContent
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: index
        in: path
        description: Source Index
        required: true
        schema:
          type: integer
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1project~1%7Bproject%7D~1resources/get/responses/200'
    post:
      tags:
      - nodes
      - project
      summary: Update Resources of a Resource Model Source
      description: |2-

        Authorization required: `configure` for project resource

        Since: v23
      operationId: apiSourceWriteContent
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: index
        in: path
        description: Source Index
        required: true
        schema:
          type: integer
      requestBody:
        description: Resource model data in the supported format
        content:
          application/json:
            schema:
              type: object
              externalDocs:
                description: Resources JSON Format
                url: https://docs.rundeck.com/docs/manual/document-format-reference/resource-json-v10.html
            examples:
              example:
                value:
                  node1:
                    nodename: node1
                    hostname: node1
                    osVersion: 5.15.49-linuxkit
                    osFamily: unix
                    osArch: amd64
                    description: Rundeck server node
                    osName: Linux
          text/yaml:
            schema:
              type: string
              externalDocs:
                description: Resources YAML Format
                url: https://docs.rundeck.com/docs/manual/document-format-reference/resource-yaml-v13.html
            examples:
              example:
                value: |-
                  node1:
                    nodename: node1
                    hostname: node1
                    osVersion: 5.15.49-linuxkit
                    osFamily: unix
                    osArch: amd64
                    description: Rundeck server node
                    osName: Linux
                    tags: ''
        required: true
      responses:
        "400":
          description: Invalid format
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1project~1%7Bproject%7D~1source~1%7Bindex%7D~1resources/get/responses/200'
  /project/{project}/sources:
    get:
      tags:
      - nodes
      - project
      summary: List Resource Model Sources for a Project
      description: "The response contains a set of `source` objects, each describes\
        \ the `index`, the `type`, and \ndetails about the `resources`. If the\nsource\
        \ had any error, that is included as `errors`.\n\nResources data includes\
        \ any `description` provided by the source, whether it is `empty`, and\nwhether\
        \ it is `writeable`.  The `href` indicates the URL for `/project/{project}/source/{index}/resources`.\n\
        \nAuthorization required: `configure` for project resource\n\nSince: v23"
      operationId: apiSourcesList
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Sources List.
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Source'
              examples:
                example:
                  value: |-
                    [
                        {
                            "index": 1,
                            "resources": {
                                "description": "/Users/greg/rundeck2.11/projects/atest/etc/resources.xml",
                                "empty": false,
                                "href": "http://ecto1.local:4440/api/23/project/atest/source/1/resources",
                                "writeable": true
                            },
                            "type": "file"
                        },
                        {
                            "errors": "File does not exist: /Users/greg/rundeck2.11/projects/atest/etc/resources2.xml",
                            "index": 2,
                            "resources": {
                                "href": "http://ecto1.local:4440/api/23/project/atest/source/2/resources",
                                "writeable": false
                            },
                            "type": "stub"
                        }
                    ]
  /project/{project}/tour/import/{tourFolder}/{manifestFileName}:
    post:
      tags:
      - enterprise
      - tours
      summary: "Import Tours Archive for a Project [Enterprise]"
      description: |-
        Import a zip archive of Tours to a Project.

        Authorization required: `admin` for the Project resource.
      operationId: apiProjectImportTour
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: tourFolder
        in: path
        description: "Tour Folder Name: the name of the zip content folder containing\
          \ tour.json files."
        required: true
        schema:
          type: string
      - name: manifestFileName
        in: path
        description: "Manifest File Name: the name of the manifest.json file within\
          \ the archive"
        required: true
        schema:
          type: string
      requestBody:
        description: Zip archive of Tours
        content:
          application/zip:
            schema:
              type: object
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerSuccessResponse'
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerErrorResponse'
  /project/{project}/tours:
    get:
      tags:
      - enterprise
      - tours
      summary: "Get Project Tours [Enterprise]"
      description: |
        Get the manifest of tours for the project.

        Authorization required: `admin` for the Project resource.
      operationId: apiProjectList_1
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
  /project/{project}/tours/resource/{path}:
    get:
      tags:
      - enterprise
      - tours
      summary: "Get Project Tour Resource [Enterprise]"
      description: |-
        Get a tour at a specific path.

        Authorization required: `admin` for the Project resource.
      operationId: apiGetProjectResource
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: path
        in: path
        description: Resource Path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
  /project/{project}/tours/{path}:
    post:
      tags:
      - enterprise
      - tours
      summary: "Upload Project Tour Resource [Enterprise]"
      description: |-
        Upload a tour resource at a specific path.

        Authorization required: `admin` for the Project resource.
      operationId: apiProjectLoadResource
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: path
        in: path
        description: Resource Path
        required: true
        schema:
          type: string
      requestBody:
        description: Manifest or Tour definition
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/Manifest'
              - $ref: '#/components/schemas/Tour'
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerSuccessResponse'
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerErrorResponse'
  /project/{project}/webhook:
    post:
      tags:
      - webhook
      summary: Add A Webhook
      description: |2


        Required Fields:
        ```
        project - the project that owns the webhook
        name - the name of the webhook
        user - string the webhook runs as this user
        roles - string containing comma separated list of roles to use for the webhook
        eventPlugin - string must be a valid plugin name
        config - object containing config values for the specified plugin
        enabled - boolean
        ```
        Optional:

        `useAuth` - if true, use header authorization
        `regenAuth` - if true, use generate header authorization

        Do not specify an `authToken` or `creator` field. They will be ignored.

        Since: v33
      operationId: createWebhook_docs
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      requestBody:
        description: Webhook definition.
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  id: 3
                  name: Webhook Job Runner 1
                  project: Webhook
                  eventPlugin: plugin-provider-name
                  config:
                    argString: "-payload ${raw} -d ${data.one}"
                    jobId: a54d07a1-033a-499f-9789-19bcacbd6e11
                  user: username
                  roles: "admin,user,webhook"
                  enabled: true
                  useAuth: true
                  regenAuth: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    msg: Saved webhook
                    generatedSecurityString: generated security string
        "400":
          description: Error response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    err: error message
  /project/{project}/webhook/{id}:
    get:
      tags:
      - webhook
      summary: Get A Webhook
      description: |-
        Get the webhook definition.

        Since: v33
      operationId: get
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Webhook ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    authToken: Z1vnbhShhQF3B0dQq7UhJTZMnGS92TBl
                    config:
                      argString: "-payload ${raw}"
                      jobId: a54d07a1-033a-499f-9789-19bcacbd6e11
                    creator: admin
                    enabled: true
                    eventPlugin: webhook-run-job
                    id: 3
                    name: Webhook Job Runner
                    project: Webhook
                    roles: "admin,user"
                    user: admin
    post:
      tags:
      - webhook
      summary: Update A Webhook
      description: |-
        Updates the specified webhook.

        Since: v33
      operationId: save
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Webhook ID
        required: true
        schema:
          type: string
      requestBody:
        description: |-
          Updated webhook data.

          Along with the required fields you may send only the fields you want to update.

          When updating a webhook you may not change the user associated with a webhook,
          so suppling the `user` field will have no effect. Also, specifying an `authToken` field has no effect.
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  id: 3
                  name: Webhook Job Runner 1
                  project: Webhook
                  eventPlugin: plugin-provider-name
                  config:
                    argString: "-payload ${raw} -d ${data.one}"
                    jobId: a54d07a1-033a-499f-9789-19bcacbd6e11
                  roles: "admin,user,webhook"
                  enabled: true
                  useAuth: true
                  regenAuth: true
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    msg: Saved webhook
                    generatedSecurityString: generated security string
        "400":
          description: Error response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    err: error message
    delete:
      tags:
      - webhook
      summary: Delete A Webhook
      description: |-
        Deletes the webhook.

        Since: v33
      operationId: remove
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      - name: id
        in: path
        description: Webhook ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    msg: deleted webhook
        "400":
          description: Error response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    err: error message
  /project/{project}/webhooks:
    get:
      tags:
      - webhook
      summary: List Project Webhooks
      description: |-
        List the webhooks for the project.

        Since: v33
      operationId: list
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List of webhooks
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [
                        {
                            "authToken": "Z1vnbhShhQF3B0dQq7UhJTZMnGS92TBl",
                            "config": {
                                "argString": "-payload ${raw}",
                                "jobId": "a54d07a1-033a-499f-9789-19bcacbd6e11"
                            },
                            "creator": "admin",
                            "enabled": true,
                            "eventPlugin": "webhook-run-job",
                            "id": 3,
                            "name": "Webhook Job Runner",
                            "project": "Webhook",
                            "roles": "admin,user",
                            "user": "admin"
                        },
                        {
                            "authToken": "p9ttreh05Zd222g5yBXocEMXmCJ1skOX",
                            "config": {},
                            "creator": "admin",
                            "enabled": true,
                            "eventPlugin": "log-webhook-event",
                            "id": 4,
                            "name": "Log it Hook",
                            "project": "Webhook",
                            "roles": "admin,user",
                            "user": "admin"
                        }
                    ]
  /project/{project}/{filename}:
    get:
      tags:
      - project
      summary: Get `readme.md` and `motd.md`
      description: |-
        Retrieve the `readme.md` and `motd.md` files, which are Markdown formatted and displayed in the Project listing page.
        The response, based on `Accept` header, can be returned in the Text, XML or Json format.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectFileGet
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: filename
        in: path
        description: '`readme.md` or `motd.md` file name'
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "200":
          description: Project details
          content:
            application/text:
              schema:
                type: string
              examples:
                example:
                  value: The readme contents
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    contents: The readme contents
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    put:
      tags:
      - project
      summary: To create or modify the `readme.md` and `motd.md` contents
      description: |-
        Create or modify the `readme.md` and `motd.md` files, which are Markdown formatted and displayed in the Project listing page.
        The response, based on `Accept` header, can be returned in the Text, XML or Json format.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectFilePut
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: filename
        in: path
        description: '`readme.md` and `motd.md` file name'
        required: true
        allowEmptyValue: false
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  contents: The readme contents
          text/plain:
            schema:
              type: string
            examples:
              example:
                value: The readme contents
      responses:
        "200":
          description: Project details
          content:
            application/text:
              schema:
                type: string
              examples:
                example:
                  value: The readme contents
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    contents: The readme contents
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
      - project
      summary: Delete `readme.md` and `motd.md`
      description: |-
        Delete the `readme.md` and `motd.md` files, which are Markdown formatted and displayed in the Project listing page.

        Authorization required: `configure` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.
      operationId: apiProjectFileDelete
      parameters:
      - name: project
        in: path
        description: Project Name
        required: true
        allowEmptyValue: false
        schema:
          type: string
      - name: filename
        in: path
        description: '`readme.md` or `motd.md` file name'
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "204":
          description: No content
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
  /runnerManagement/checkPing/{token}:
    get:
      tags:
      - enterprise
      summary: Check Runner Ping
      description: "Check a ping response. Since: V42"
      operationId: checkPing
      parameters:
      - name: token
        in: path
        description: Ping Token
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Ping Runner Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingResponse'
  /runnerManagement/download/{token}:
    get:
      tags:
      - enterprise
      summary: Download Runner
      description: "Download runner Jar. Since: V41"
      operationId: downloadRunner
      parameters:
      - name: token
        in: path
        description: Download Token
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Runner Download
          content:
            application/java-archive: {}
  /runnerManagement/runner/{id}/keys:
    get:
      tags:
      - enterprise
      summary: Get Runner Storage Keys
      description: List all keys
      operationId: getRunnerKey
      parameters:
      - name: id
        in: path
        description: runner id
        required: true
        schema:
          type: string
      - name: path
        in: query
        description: key path
        required: false
        allowEmptyValue: true
        schema:
          type: string
      - name: refresh
        in: query
        description: key path
        required: false
        allowEmptyValue: true
        schema:
          type: boolean
      responses:
        "200":
          description: Runner keys Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCountResponse'
  /runnerManagement/runner/{id}/ping:
    post:
      tags:
      - enterprise
      summary: Ping a Runner
      description: "Ping the runner. Since: V41"
      operationId: pingRunner
      parameters:
      - name: id
        in: path
        description: Runner ID
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Ping Runner Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PingTokenResponse'
  /runnerManagement/runner/{id}/regenerateCreds:
    post:
      tags:
      - enterprise
      summary: Regenerate Runner Creds
      description: "Regenerate credentials for the Runner. Since: V42"
      operationId: regenerateRunnerCreds
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Runner Regenerated Credentials
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RegenRunnerCredResponse'
  /runnerManagement/runner/{id}/tags:
    get:
      tags:
      - enterprise
      summary: List Runner Tags
      description: "List tags for the Runner. Since: V42"
      operationId: listRunnerTags
      parameters:
      - name: id
        in: path
        description: Runner ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Runner Tags List Response
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /runnerManagement/runner/{runnerId}:
    get:
      tags:
      - enterprise
      summary: Get Runner Info
      description: "Get runner information. Since: V41"
      operationId: runnerInfo
      parameters:
      - name: runnerId
        in: path
        description: Runner ID
        required: true
        schema:
          type: integer
      responses:
        "200":
          description: Runner Info
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunnerInfo'
    post:
      tags:
      - enterprise
      summary: Update Runner Definition
      description: "Update the runner. Since: V41"
      operationId: saveRunner
      parameters:
      - name: runnerId
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              allOf:
              - $ref: '#/components/schemas/UpdateRunnerRequest'
              - properties:
                  data:
                    $ref: '#/components/schemas/UpdateRunnerRequest'
      responses:
        "200":
          description: New runner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunnerInfo'
    delete:
      tags:
      - enterprise
      summary: Delete Runner
      description: "Delete the specified runner. Since: V41"
      operationId: deleteRunner
      parameters:
      - name: runnerId
        in: path
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No Content
  /runnerManagement/runners:
    get:
      tags:
      - enterprise
      summary: List Runners
      description: "List available runners. Since: V41"
      operationId: listRunners
      parameters:
      - name: tags
        in: query
        description: List of tags
        schema:
          type: string
      - name: localOnly
        in: query
        description: Include local runner only
        schema:
          type: boolean
      - name: filter
        in: query
        description: Use filter string
        schema:
          type: string
      - name: status
        in: query
        description: Filter by runner status
        schema:
          type: string
      responses:
        "200":
          description: Runner List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RunnerList'
    post:
      tags:
      - enterprise
      summary: Create a Runner
      description: "Create a new Runner. Since: V42"
      operationId: createRunner
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                newRunnerRequest:
                  $ref: '#/components/schemas/CreateRunnerRequest'
        required: true
      responses:
        "200":
          description: New runner created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/NewRunnerResponse'
        "400":
          description: Failed to create the runner
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /runnerManagement/tags:
    get:
      tags:
      - enterprise
      summary: List all Tags associated to a project
      description: "List all known tags. Since: V42"
      operationId: listProjectAssociatedTags
      parameters:
      - name: project
        in: query
        description: Project Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Tags List Response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TagCountResponse'
  /runnerManagement/ui:
    get:
      tags:
      - enterprise
      summary: Get UI info for runner management
      description: "Get UI info for runner management. Since: V42"
      operationId: ui
      responses:
        "200":
          description: Runner Management UI
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UiData'
  /runnerTag/searchTags:
    get:
      tags:
      - enterprise
      summary: Search Runner Tags by a keyword
      description: List tags for the Runner
      operationId: searchTags
      parameters:
      - name: keyword
        in: query
        description: Keyword
        allowEmptyValue: true
        schema:
          type: string
      - name: offset
        in: query
        description: Offset from the start of the result set. Used for pagination.
        schema:
          type: integer
          format: int32
      - name: limit
        in: query
        description: Limit the size of the returned result set. Used for pagination.
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: List of tags that contains the keyword.
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /scheduler/jobs:
    get:
      tags:
      - jobs
      - scheduler
      summary: List Scheduled Jobs For this Cluster Server
      description: |-
        List the scheduled Jobs with their schedule owned by the target cluster server.

        Authorization required: `read` or `view` for each job resource

        Since: v17
      operationId: apiSchedulerListJobsCurrent_docs
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1project~1%7Bproject%7D~1jobs/get/responses/200'
  /scheduler/server/{uuid}/jobs:
    get:
      tags:
      - jobs
      - scheduler
      summary: List Scheduled Jobs For a Cluster Server
      description: |-
        List the scheduled Jobs with their schedule owned by the cluster server with the specified UUID.

        Authorization required: `read` or `view` for each job resource

        Since: v17
      operationId: apiSchedulerListJobs
      parameters:
      - name: uuid
        in: path
        description: Server UUID
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1project~1%7Bproject%7D~1jobs/get/responses/200'
  /scheduler/takeover:
    put:
      tags:
      - cluster
      - scheduler
      summary: Takeover Schedule in Cluster Mode
      description: |-
        Tell a Rundeck server in cluster mode to claim all scheduled jobs from another
        cluster server.

        This endpoint can take over the schedule of certain jobs based on the input:

        * specify a server `uuid`: take over all jobs from that server
        * specify server `all` value of `true`: take over all jobs regardless of server UUID

        Additionally, you can specify a `project` name to take over only jobs matching
        the given project name, in combination with the server options.

        Alternately, specify one or more job IDs to takeover certain Jobs' schedules.

        Authorization required: `ops_admin` for resource type `job`

        Since: v14
      operationId: apiJobClusterTakeoverSchedule
      requestBody:
        description: |
          Takeover Request.

          * optional `server` entry, with one of these required entries:
              * `uuid` server UUID to take over from
              * `all` value of `true` to take over from all servers
          * optional `project` entry, specifying a project name
          * optional `job` entry, with required entry:
              * `id` Job UUID
          * optional `jobs` array, each object has:
              * `id` Job UUID
              * (Since: v32)
        content:
          application/json:
            schema:
              type: object
            examples:
              all-servers-project:
                description: Takeover all jobs for a project
                value:
                  server:
                    all: true
                  project: "[PROJECT]"
              job:
                description: Takeover specific job
                value:
                  job:
                    id: "[UUID]"
              multiple-jobs:
                description: "Takeover multiple jobs. Since: v32"
                value:
                  server:
                    all: true
                  jobs:
                  - id: "[UUID]"
                  - id: "[UUID]"
        required: true
      responses:
        "200":
          description: Successful Response
          content:
            application/json:
              schema:
                type: object
              examples:
                uuid-specified:
                  description: response for `uuid` specified
                  value:
                    takeoverSchedule:
                      jobs:
                        failed: []
                        successful:
                        - href: http://dignan:4440/api/14/job/a1aa53ac-73a6-4ead-bbe4-34afbff8e057
                          permalink: http://dignan:4440/job/show/a1aa53ac-73a6-4ead-bbe4-34afbff8e057
                          id: a1aa53ac-73a6-4ead-bbe4-34afbff8e057
                          previous-owner: 8F3D5976-2232-4529-847B-8E45764608E3
                        - href: http://dignan:4440/api/14/job/116e2025-7895-444a-88f7-d96b4f19fdb3
                          permalink: http://dignan:4440/job/show/116e2025-7895-444a-88f7-d96b4f19fdb3
                          id: 116e2025-7895-444a-88f7-d96b4f19fdb3
                          previous-owner: 8F3D5976-2232-4529-847B-8E45764608E3
                        total: 2
                      server:
                        uuid: 8F3D5976-2232-4529-847B-8E45764608E3
                    self:
                      server:
                        uuid: C677C663-F902-4B97-B8AC-4AA57B58DDD6
                    message: Schedule Takeover successful for 2/2 Jobs.
                    apiversion: 14
                    success: true
                all-specified:
                  description: response for `all` specified
                  value:
                    takeoverSchedule:
                      jobs:
                        failed: []
                        successful:
                        - job: data
                        total: 2
                      server:
                        all: true
                    self:
                      server:
                        uuid: C677C663-F902-4B97-B8AC-4AA57B58DDD6
                    message: Schedule Takeover successful for 2/2 Jobs.
                    apiversion: 14
                    success: true
                project-specified:
                  description: response for `project` specified
                  value:
                    takeoverSchedule:
                      jobs:
                        failed: []
                        successful:
                        - job: data
                        total: 2
                      project: My Project
                    self:
                      server:
                        uuid: C677C663-F902-4B97-B8AC-4AA57B58DDD6
                    message: Schedule Takeover successful for 2/2 Jobs.
                    apiversion: 14
                    success: true
  /secure/generatepasswordreset/{username}:
    post:
      tags:
      - enterprise
      - users
      summary: "Reset User Password [Enterprise]"
      description: |-
        Sends a password reset email to the user's email address, if email is configured.

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiSendPasswordReset
      parameters:
      - name: username
        in: path
        description: User Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Reset Response contains a `link` that the user can use to reset
            their password.
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    link: RESET LINK
  /secure/role/{id}:
    get:
      tags:
      - enterprise
      - users
      summary: "Get A Local Role [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiGet
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Role
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/LoginRoleData'
    post:
      tags:
      - enterprise
      - users
      summary: "Update A Local Role [Enterprise]"
      description: |
        List the local role definitions.

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiEdit
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: string
      requestBody:
        description: Role Definition
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  authority: rolename
                  description: description
        required: true
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - enterprise
      - users
      summary: "Delete A Local Role [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiDelete
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
  /secure/role/{id}/updateMembers:
    post:
      tags:
      - enterprise
      - users
      summary: "Update Role Members [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiUpdateMembers
      parameters:
      - name: id
        in: path
        description: Role ID
        required: true
        schema:
          type: string
      requestBody:
        description: Role Definition
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  add:
                  - 1
                  - 2
                  remove:
                  - 3
                  - 4
        required: true
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                type: object
  /secure/roles:
    get:
      tags:
      - enterprise
      - users
      summary: "List Local Roles [Enterprise]"
      description: |-
        List local role definitions.

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiList
      responses:
        "200":
          description: Role List
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/LoginRoleData'
              examples:
                example:
                  value: |-
                    [
                      {
                        "id": 1,
                        "authority": "agroup",
                        "description": "a description"
                      }
                    ]
  /secure/roles/create:
    put:
      tags:
      - enterprise
      - users
      summary: "Create A Local Role [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiCreate
      requestBody:
        description: Role Definition
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  authority: rolename
                  description: description
        required: true
      responses:
        "201":
          description: created
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    msg: role created
                    id: 2
        "200":
          description: apiCreate 200 response
          content:
            application/json:
              schema:
                type: object
  /secure/user/roles/{id}:
    get:
      tags:
      - enterprise
      - users
      summary: "Get Roles for a Local User [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiGetUserRoles
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1secure~1roles/get/responses/200'
  /secure/user/{id}:
    get:
      tags:
      - enterprise
      - users
      summary: "Get A Local User [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiGet_1
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Role List
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    id: 1
                    username: test1
                    enabled: true
                    passwordExpired: false
                    accountLocked: false
                    accountExpired: false
                    roles:
                    - id: 1
                      authority: agroup
                      description: a description
                    firstname: test
                    lastname: user
                    email: test@example.com
    post:
      tags:
      - enterprise
      - users
      summary: "Update A Local User [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiEdit_1
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: apiEdit_1 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - enterprise
      - users
      summary: "Delete A Local User [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiDelete_1
      parameters:
      - name: id
        in: path
        description: User ID
        required: true
        schema:
          type: string
      responses:
        "200":
          description: apiDelete_1 200 response
          content:
            application/json:
              schema:
                type: object
  /secure/users:
    get:
      tags:
      - enterprise
      - users
      summary: "List Local Users [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiList_1
      responses:
        "200":
          description: Role List
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [
                      {
                        "id": 1,
                        "username": "test1",
                        "enabled": true,
                        "passwordExpired": false,
                        "accountLocked": false,
                        "accountExpired": false,
                        "notes": null,
                        "roles": [
                          {
                            "id": 1,
                            "authority": "agroup",
                            "description": "a description"
                          }
                        ],
                        "firstname": "test",
                        "lastname": "user",
                        "email": "test@example.com"
                      }
                    ]
  /secure/users/create:
    put:
      tags:
      - enterprise
      - users
      summary: "Create A Local User [Enterprise]"
      description: |2-

        Authorization required: `app_admin` for system resource type `user`.

        Since: v44
      operationId: apiCreate_1
      responses:
        "201":
          description: Created
        "200":
          description: apiCreate_1 200 response
          content:
            application/json:
              schema:
                type: object
  /storage/keys/{path}:
    get:
      tags:
      - key storage
      summary: List and Get Keys and Key Metadata
      description: |2

        Lists resources at the specified PATH if it is a directory.

        Otherwise if it is a file, return the metadata about the stored file if JSON response is requested.

        Provides the content for **public key** files if the `Accept` request header matches `*/*` or `application/pgp-keys`.

        Returns `403` if content is requested from other Key file types.

        Authorization required: `read` for the `key` resource

        Authorization under the key path `project/{project}` can be granted at the project context.
      operationId: apiGetResource
      parameters:
      - name: path
        in: path
        description: Path and Key file name. Can be a directory path such as `subdir/`
          or include a filename `subdir/file.password`
        required: true
        allowEmptyValue: true
        allowReserved: true
        schema:
          type: string
      responses:
        "200":
          description: Key Metadata
          content:
            application/json:
              schema:
                type: object
              examples:
                key-metadata:
                  summary: Key Metadata Result
                  value:
                    meta:
                      Rundeck-key-type: public
                      Rundeck-content-size: "393"
                      Rundeck-content-type: application/pgp-keys
                    url: http://rundeckhost/api/11/storage/keys/test1.pub
                    name: test1.pub
                    type: file
                    path: keys/test1.pub
                list-keys:
                  summary: List Directory
                  value:
                    resources:
                    - meta:
                        Rundeck-key-type: private
                        Rundeck-content-mask: content
                        Rundeck-content-size: "1679"
                        Rundeck-content-type: application/octet-stream
                      url: http://rundeckhost/api/11/storage/keys/test1.pem
                      name: test1.pem
                      type: file
                      path: keys/test1.pem
                    - url: http://rundeckhost/api/11/storage/keys/subdir
                      type: directory
                      path: keys/subdir
                    - meta:
                        Rundeck-key-type: public
                        Rundeck-content-size: "640198"
                        Rundeck-content-type: application/pgp-keys
                      url: http://rundeckhost/api/11/storage/keys/monkey1.pub
                      name: monkey1.pub
                      type: file
                      path: keys/monkey1.pub
                    - meta:
                        Rundeck-key-type: public
                        Rundeck-content-size: "393"
                        Rundeck-content-type: application/pgp-keys
                      url: http://rundeckhost/api/11/storage/keys/test1.pub
                      name: test1.pub
                      type: file
                      path: keys/test1.pub
                    url: http://rundeckhost/api/11/storage/keys
                    type: directory
                    path: keys
            application/pgp-keys:
              schema:
                type: string
              examples:
                public-key:
                  summary: Public Key contents
                  value: '...Public Key Contents...'
        "403":
          description: Unauthorized
    put:
      tags:
      - key storage
      summary: Modify A Key
      description: |2

        Specify the type of key via the `Content-type` header:

        * `application/octet-stream` specifies a **private key**
        * `application/pgp-keys` specifies a **public key**
        * `application/x-rundeck-data-password` specifies a **password**

        Authorization required: `update` for the `key` resource.

        Authorization under the key path `project/{project}` can be granted at the project context.
      operationId: apiPutResource
      parameters:
      - name: path
        in: path
        description: Path and Key file name. Can be a directory path such as `subdir/`
          or include a filename `subdir/file.password`
        required: true
        allowReserved: true
        schema:
          type: string
      requestBody:
        $ref: '#/paths/~1storage~1keys~1%7Bpath%7D/post/requestBody'
      responses:
        "403":
          description: Unauthorized
        "404":
          description: The file does not exist
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1storage~1keys~1%7Bpath%7D/get/responses/200'
    post:
      tags:
      - key storage
      summary: Create Keys
      description: "\nSpecify the type of key via the `Content-type` header:\n\n*\
        \ `application/octet-stream` specifies a **private key**\n* `application/pgp-keys`\
        \ specifies a **public key**\n* `application/x-rundeck-data-password` specifies\
        \ a **password**\n\nAuthorization required: `create` for the `key` resource.\n\
        \ \nAuthorization under the key path `project/{project}` can be granted at\
        \ the project context.\n"
      operationId: apiPostResource
      parameters:
      - name: path
        in: path
        description: Path and Key file name. Can be a directory path such as `subdir/`
          or include a filename `subdir/file.password`
        required: true
        allowReserved: true
        schema:
          type: string
      requestBody:
        description: "Private key, public key, or password content"
        content:
          application/octet-stream:
            schema:
              type: string
            examples:
              example:
                value: '...private key...'
          application/pgp-keys:
            schema:
              type: string
            examples:
              example:
                value: '...public key...'
          application/x-rundeck-data-password:
            schema:
              type: string
            examples:
              example:
                value: password-value
        required: true
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                type: object
              examples:
                key-metadata:
                  summary: Key Metadata Result
                  value:
                    meta:
                      Rundeck-key-type: public
                      Rundeck-content-size: "393"
                      Rundeck-content-type: application/pgp-keys
                    url: http://rundeckhost/api/11/storage/keys/test1.pub
                    name: test1.pub
                    type: file
                    path: keys/test1.pub
            application/pgp-keys:
              schema:
                type: string
              examples:
                public-key:
                  summary: Public Key contents
                  value: '...Public Key Contents...'
        "403":
          description: Unauthorized
        "409":
          description: "Conflict: the specified file or path already exists"
        "200":
          description: apiPostResource 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - key storage
      summary: Delete A Key
      description: |
        Deletes the file if it exists and returns `204` response.

        Authorization required: `delete` for the `key` resource.

        Authorization under the key path `project/{project}` can be granted at the project context.
      operationId: apiDeleteResource
      parameters:
      - name: path
        in: path
        description: Path and Key file name. Can be a directory path such as `subdir/`
          or include a filename `subdir/file.password`
        required: true
        allowReserved: true
        schema:
          type: string
      responses:
        "204":
          description: Deleted
        "403":
          description: Unauthorized
        "404":
          description: The file does not exist
        "200":
          description: apiDeleteResource 200 response
          content:
            application/json:
              schema:
                type: object
  /system/acl/{path}:
    get:
      tags:
      - acls
      summary: Get an ACL Policy.
      description: "Retrieve the YAML text of the ACL Policy file.  If YAML or text\
        \ content is requested, the contents will be returned directly.\nOtherwise\
        \ if XML or JSON is requested, the YAML text will be wrapped within that format.\n\
        \nAuthorization required: `read` or `admin` or `app_admin` access for `system_acl`\
        \ resource type \n\nSince: v14"
      operationId: apiSystemAcls
      parameters:
      - name: path
        in: path
        description: Path to the Acl policy file
        required: true
        allowEmptyValue: false
        schema:
          pattern: \w+.aclpolicy
          type: string
      responses:
        "200":
          description: ACL Policy Document
          content:
            text/plain:
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/yaml:
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/json:
              examples:
                example:
                  value:
                    contents: |-
                      description: "my policy"
                      context:
                        application: rundeck
                      for:
                        project:
                          - allow: read
                      by:
                        group: build
    put:
      tags:
      - acls
      summary: Update an ACL Policy.
      description: "\nAuthorization required: `update` or `admin` or `app_admin` access\
        \ for `system_acl` resource type \n\nSince: v14"
      operationId: apiSystemAcls_PUT_docs
      parameters:
      - name: path
        in: path
        description: Path to the Acl policy file
        required: true
        allowEmptyValue: false
        schema:
          pattern: \w+.aclpolicy
          type: string
      requestBody:
        $ref: '#/paths/~1system~1acl~1%7Bpath%7D/post/requestBody'
      responses:
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "400":
          description: |-
            Validation failure. If Validation fails, the body will contain a list of validation errors.
            Because each ACLPOLICY document can contain multiple Yaml documents, each will be listed as a separate policy.
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    valid: false
                    policies:
                    - policy: "file1.aclpolicy[1]"
                      errors:
                      - reason...
                      - reason2...
                    - policy: "file1.aclpolicy[2]"
                      errors:
                      - reason...
                      - reason2...
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1system~1acl~1%7Bpath%7D/get/responses/200'
    post:
      tags:
      - acls
      summary: Create an ACL Policy.
      description: "\nAuthorization required: `create` or `admin` or `app_admin` access\
        \ for `system_acl` resource type \n\nSince: v14"
      operationId: apiSystemAcls_POST_docs
      parameters:
      - name: path
        in: path
        description: Path to the Acl policy file
        required: true
        allowEmptyValue: false
        schema:
          pattern: \w+.aclpolicy
          type: string
      requestBody:
        description: |
          If the `Content-Type` is `application/yaml` or `text/plain`, then the request body is the ACL policy contents directly.

          Otherwise, you can use JSON to wrap the yaml content inside `contents`
        content:
          application/yaml:
            schema:
              type: string
            examples:
              example:
                value: |-
                  description: "my policy"
                  context:
                    application: rundeck
                  for:
                    project:
                      - allow: read
                  by:
                    group: build
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  contents: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
      responses:
        "201":
          description: Created
          content:
            text/plain:
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/yaml:
              examples:
                example:
                  value: |-
                    description: "my policy"
                    context:
                      application: rundeck
                    for:
                      project:
                        - allow: read
                    by:
                      group: build
            application/json:
              examples:
                example:
                  value:
                    contents: |-
                      description: "my policy"
                      context:
                        application: rundeck
                      for:
                        project:
                          - allow: read
                      by:
                        group: build
        "409":
          description: Conflict. Already exists
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "400":
          description: |-
            Validation failure. If Validation fails, the body will contain a list of validation errors.
            Because each ACLPOLICY document can contain multiple Yaml documents, each will be listed as a separate policy.
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    valid: false
                    policies:
                    - policy: "file1.aclpolicy[1]"
                      errors:
                      - reason...
                      - reason2...
                    - policy: "file1.aclpolicy[2]"
                      errors:
                      - reason...
                      - reason2...
        "200":
          description: apiSystemAcls_POST_docs 200 response
          content:
            application/json:
              schema:
                type: object
    delete:
      tags:
      - acls
      summary: Delete an ACL Policy.
      description: "\nAuthorization required: `delete` or `admin` or `app_admin` access\
        \ for `system_acl` resource type \n\nSince: v14"
      operationId: apiSystemAcls_DELETE_docs
      parameters:
      - name: path
        in: path
        description: Path to the Acl policy file
        required: true
        allowEmptyValue: false
        schema:
          pattern: \w+.aclpolicy
          type: string
      responses:
        "204":
          description: No Content
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "200":
          description: apiSystemAcls_DELETE_docs 200 response
          content:
            application/json:
              schema:
                type: object
  /system/calendars:
    get:
      tags:
      - calendars
      - enterprise
      summary: "List System Calendars [Enterprise]"
      description: |-
        Get all calendars at system scope.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

        Since: v41
      operationId: apiSystemCalendars
      responses:
        "200":
          description: List of all system calendars
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [
                      {
                        "id": 1,
                        "name": "[NAME]",
                        "description": "[DESCRIPTION]",
                        "calendarType": "[blackout/allowed]",
                        "scope": "project",
                        "dateType": "[date,range,daily,monthly]",
                        "dateDefinition": "[DATE-DEFINITION]",
                        "enable": true,
                        "allReference": true,
                        "recurrent": true,
                        "objects": [
                          {
                            "uuid": "[JOBUUID]",
                            "name": "[JOBNAME]"
                          }
                        ]
                      }
                    ]
    post:
      tags:
      - calendars
      - enterprise
      summary: "Create/Update System Calendar [Enterprise]"
      description: |-
        Create or update a calendar at system scope.
        * if the ID exists, it will update the existing calendar, otherwise a new one will be created.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

        Since: v41
      operationId: apiLoadSystemCalendars
      requestBody:
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  id: 1
                  name: "[NAME]"
                  description: "[DESCRIPTION]"
                  calendarType: "[blackout/allowed]"
                  scope: project
                  dateType: "[date,range,daily,monthly]"
                  dateDefinition: "[DATE-DEFINITION]"
                  enable: true
                  allReference: true
                  recurrent: true
                  objects:
                  - uuid: "[JOBUUID]"
                    name: "[JOBNAME]"
                  - uuid: "[JOBUUID]"
                    name: "[JOBNAME]"
      responses:
        "200":
          description: Calendar created or updated
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ProjectCalendarsResponse'
              examples:
                example:
                  value:
                    calendar:
                      id: 1
                      name: New Calendar
                      description: test
                      calendarType: blackout
                      scope: system
                      dateType: date
                      dateDefinition:
                      - 2019/12/07
                      - 2019/12/14
                      - 2019/12/31
                      - 2020/01/01
                      enable: true
                      allReference: false
                      recurrent: false
                      objects:
                      - uuid: 7ca918bd-b463-4948-96d2-796c0619c2bd
                        name: scheduled/job
                    saved: true
                    msg: Saved Calendar
  /system/calendars/{id}:
    delete:
      tags:
      - calendars
      - enterprise
      summary: "Delete System Calendar [Enterprise]"
      description: |-
        Deletes a calendar at system scope.

        Authorization required: `delete` access for `project` resource type or `admin` or `app_admin` access for `user` resource type.

        Since: v41
      operationId: apiDeleteSystemCalendar
      parameters:
      - name: id
        in: path
        description: Calendar Id to be deleted
        required: true
        allowEmptyValue: false
        schema:
          type: string
      responses:
        "204":
          description: No content
  /system/executions/disable:
    post:
      tags:
      - system
      summary: Set Execution Mode Passive
      description: |
        Disables executions, preventing adhoc and manual and scheduled jobs from running.

        The state of the current
        execution mode can be viewed via the `/system/info`
        endpoint, or the `/system/executions/status`
        endpoint.

        Authorization Required: `disable_executions` on `system` resource.

        Since: v14
      operationId: apiExecutionModePassive
      responses:
        "200":
          description: Execution Mode Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionModeResult'
  /system/executions/disable/later:
    post:
      tags:
      - system execution mode
      summary: Disable System executions after a duration of time
      description: |
        Sets System execution mode to Passive at a later time.

        Since: v34
      operationId: apiExecutionModeLaterPassive
      requestBody:
        description: |
          Disable Executions.
          Specify a `value` with a time duration expression. (See request schema for syntax.)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModeLaterRequest'
            examples:
              example:
                value:
                  value: 2h30m
        required: true
      responses:
        "200":
          description: Request processed. The `saved` value may be false if e.g. the
            current execution mode is already disabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: true
                    msg: Execution Mode Later saved
        "400":
          description: Request error response. A description of the error is in the
            `msg` field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: false
                    msg: Project Execution Mode Later saved
  /system/executions/enable:
    post:
      tags:
      - system
      summary: Set Execution Mode Active
      description: |
        Enables executions, allowing adhoc and manual and scheduled jobs to be run.

        The state of the current
        execution mode can be viewed via the `/system/info`
        endpoint, or the `/system/executions/status`
        endpoint.

        Authorization Required: `enable_executions` on `system` resource.

        Since: v14
      operationId: apiExecutionModeActive
      responses:
        "200":
          description: Execution Mode Status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionModeResult'
  /system/executions/enable/later:
    post:
      tags:
      - system execution mode
      summary: Enable System executions after a duration of time
      description: |
        Sets System execution mode to Active at a later time.

        Since: v34
      operationId: apiExecutionModeLaterActive
      requestBody:
        description: |
          Enable Executions.
          Specify a `value` with a time duration expression. (See request schema for syntax.)
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ModeLaterRequest'
            examples:
              example:
                value:
                  value: 2h30m
        required: true
      responses:
        "200":
          description: Request processed. The `saved` value may be false if e.g. the
            current execution mode is already enabled.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: true
                    msg: Execution Mode Later saved
        "400":
          description: Request error response. A description of the error is in the
            `msg` field.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ModeLaterResponse'
              examples:
                example:
                  value:
                    saved: false
                    msg: Project Execution Mode Later saved
  /system/executions/status:
    get:
      tags:
      - system
      summary: Get Current Execution Mode
      description: "Gets the current execution mode.\n\nNote:\nPrior to API version\
        \ 36 if the mode was **passive** a status `HTTP 503 - Service Unavailable`\
        \ would be returned.\nAs of API v36 a `200` status will now be returned when\
        \ the mode is **passive**.\nTo return a 503 when the mode is **passive** add\
        \ `?passiveAs503=true` to the API call.  \n\nAuthorization Required: `read`\
        \ for `system` resource\n\nSince: V32\n"
      operationId: apiExecutionModeStatus
      parameters:
      - name: passiveAs503
        in: query
        description: "if true, return 503 response when execution mode is passive.\
          \ Since: v36"
        schema:
          type: boolean
      responses:
        "200":
          description: "Execution Mode status result for API v36+, or for active status\
            \ only for API<v36."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionModeResult'
              examples:
                active:
                  value:
                    executionMode: active
                passive:
                  value:
                    executionMode: passive
        "503":
          description: "Service unavailable status result when execution mode is passive\
            \ for API<v36, or for API v36+ when `passiveAs503=true`"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ExecutionModeResult'
              examples:
                passive:
                  value:
                    executionMode: passive
  /system/info:
    get:
      tags:
      - system
      summary: Get Rundeck server information and stats
      description: Display stats and info about the rundeck server
      operationId: apiSystemInfo
      responses:
        "200":
          description: System info response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SystemInfoModel'
  /system/logstorage:
    get:
      tags:
      - logstorage
      - system
      summary: Log Storage Info
      description: |
        Get Log Storage information and stats.

        Authorization required: `read` for `system` resource

        Since: V17
      operationId: apiLogstorageInfo
      responses:
        "200":
          description: |
            Success response, with log storage info and stats.

            Fields:

            `enabled`

            :   True if a plugin is configured

            `pluginName`

            :   Name of the configured plugin

            `succeededCount`

            :   Number of successful storage requests

            `failedCount`

            :   Number of failed storage requests

            `queuedCount`

            :   Number of queued storage requests

            `totalCount`

            :   Total number of storage requests (currently queued plus previously processed)

            `incompleteCount`

            :   Number of storage requests which have not completed successfully

            `missingCount`

            :   Number of executions for this cluster node which have no associated storage requests
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    enabled: true
                    pluginName: NAME
                    succeededCount: 369
                    failedCount: 0
                    queuedCount: 0
                    queuedRequestCount: 0
                    queuedRetriesCount: 0
                    queuedIncompleteCount: 0
                    totalCount: 369
                    incompleteCount: 0
                    retriesCount: 0
                    missingCount: 0
  /system/logstorage/incomplete:
    get:
      tags:
      - logstorage
      - system
      summary: List Executions with Incomplete Log Storage
      description: |-
        List all executions with incomplete log storage.

        Authorization required: `read` for `system` resource

        Since: V17
      operationId: apiLogstorageListIncompleteExecutions
      parameters:
      - name: query
        in: query
        required: false
        schema:
          $ref: '#/components/schemas/BaseQuery'
      responses:
        "200":
          description: |2-

            `total`, `max`, `offset` (paging information)

            :   Total number of executions with incomplete log data storage, maximum returned in the response, offset of first result.

            `id`

            :   Execution ID

            `project`

            :   Project Name

            `href`

            :   API URL for Execution

            `permalink`

            :   GUI URL for Execution

            `incompleteFiletypes`

            :   Comma-separated list of filetypes which have not be uploaded, e.g. `rdlog,state.json`. Types are `rdlog` (log output), `state.json` (workflow state data), `execution.xml` (execution definition)

            `queued`

            :   True if the log data storage is queued to be processed.

            `failed`

            :   True if the log data storage was processed but failed without completion.

            `date`

            :   Date when log data storage was first processed. (W3C date format.)

            `localFilesPresent`

            :   True if all local files (`rdlog` and `state.json`) are available for upload.  False if one of them is not present on disk.
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    total: 100
                    max: 20
                    offset: 0
                    executions:
                    - id: 1
                      project: "[PROJECT]"
                      href: "[API HREF]"
                      permalink: "[GUI HREF]"
                      storage:
                        localFilesPresent: true
                        incompleteFiletypes: "[TYPES]"
                        queued: true
                        failed: false
                        date: "[DATE]"
                      errors:
                      - message
                      - message...
  /system/logstorage/incomplete/resume:
    post:
      tags:
      - logstorage
      - system
      summary: Resume Incomplete Log Storage
      description: |-
        Resume processing incomplete Log Storage uploads.

        Authorization required: `ops_admin` for `system` resource

        Since: V17
      operationId: apiResumeIncompleteLogstorage
      responses:
        "200":
          description: Resumed response
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    resumed: true
  /system/tour/import/{tourFolder}/{manifestFileName}:
    post:
      tags:
      - enterprise
      - tours
      summary: "Import Tours Archive for System [Enterprise]"
      description: |-
        Import a zip archive of Tours to the System.

        Authorization required: `app_admin` for the `system` resource.
      operationId: apiSystemImportTour
      parameters:
      - name: tourFolder
        in: path
        description: "Tour Folder Name: the name of the zip content folder containing\
          \ tour.json files."
        required: true
        schema:
          type: string
      - name: manifestFileName
        in: path
        description: "Manifest File Name: the name of the manifest.json file within\
          \ the archive"
        required: true
        schema:
          type: string
      requestBody:
        description: Zip archive of Tours
        content:
          application/zip:
            schema:
              type: object
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerSuccessResponse'
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerErrorResponse'
  /system/tours:
    get:
      tags:
      - enterprise
      - tours
      summary: "Get System Tours [Enterprise]"
      description: |
        Get the manifest of tours for the system.

        Authorization required: `app_admin` for the `system` resource.
      operationId: apiSystemList
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Manifest'
  /system/tours/resource/{path}:
    get:
      tags:
      - enterprise
      - tours
      summary: "Get System Tour Resource [Enterprise]"
      description: |-
        Get a tour at a specific path.

        Authorization required: `app_admin` for the `system` resource.
      operationId: apiGetSystemResource
      parameters:
      - name: path
        in: path
        description: Resource Path
        required: true
        schema:
          type: string
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tour'
  /system/tours/{path}:
    post:
      tags:
      - enterprise
      - tours
      summary: "Upload System Tour Resource [Enterprise]"
      description: |-
        Upload a system tour resource at a specific path.

        Authorization required: `app_admin` for the `system` resource.
      operationId: apiSystemLoadResource
      parameters:
      - name: path
        in: path
        description: Resource Path
        required: true
        schema:
          type: string
      requestBody:
        description: Manifest or Tour definition
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/Manifest'
              - $ref: '#/components/schemas/Tour'
      responses:
        "200":
          description: Successful
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerSuccessResponse'
        "400":
          description: Error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TourManagerErrorResponse'
  /token/{tokenid}:
    get:
      tags:
      - tokens
      summary: Get a specified auth token metadata
      description: API Token information
      operationId: apiTokenGet
      parameters:
      - name: tokenid
        in: path
        description: Token ID (UUID)
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "200":
          description: "The token includes the `creator` of the token, as well as\
            \ the `user` (the effective username) of the token."
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
    delete:
      tags:
      - tokens
      summary: Delete a specified auth token.
      operationId: apiTokenDelete
      parameters:
      - name: tokenid
        in: path
        description: Token ID (UUID)
        required: true
        schema:
          type: string
          format: uuid
      responses:
        "204":
          description: No Content (DELETE successful)
        "404":
          description: Not Found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "200":
          description: apiTokenDelete 200 response
          content:
            application/json:
              schema:
                type: object
  /tokens/{user}:
    get:
      tags:
      - tokens
      summary: List all tokens or all tokens for a specific user.
      operationId: apiTokenList
      parameters:
      - name: user
        in: path
        description: username
        required: true
        allowEmptyValue: true
        schema:
          type: string
      responses:
        "200":
          description: Token List Response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Token'
    post:
      tags:
      - tokens
      summary: Create API Token
      description: |
        Create a new token for a specific user. Specify custom roles and duration if authorized.

        The user specified must either be part of the URL, or be part of the request content.

        A content body is expected, and `roles` must be specified, and `duration` is optional.
        If unset, duration will be the maximum allowed token duration.

        If the `roles` value is the string `*` (asterisk), and the token is generated for oneself (i.e. the authenticated user),
        then the generated token will have all roles as the authenticated user.

        Since: v11
      operationId: apiTokenCreate
      parameters:
      - name: user
        in: path
        description: username
        required: true
        allowEmptyValue: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              oneOf:
              - $ref: '#/components/schemas/CreateToken'
              - $ref: '#/components/schemas/CreateTokenStringRoles'
            examples:
              list-of-roles:
                summary: Using a list of roles
                value:
                  user: alice
                  roles:
                  - sre
                  - dev
                  duration: 120d
                  name: Example Token
              string-roles:
                summary: Using a comma-separated string for roles
                value:
                  user: alice
                  roles: "sre,dev"
                  duration: 120d
                  name: Example Token
        required: true
      responses:
        "201":
          description: Token Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        "200":
          description: apiTokenCreate 200 response
          content:
            application/json:
              schema:
                type: object
  /tokens/{user}/removeExpired:
    post:
      tags:
      - tokens
      summary: Remove Expired Tokens
      description: "Remove expired tokens for the specified User. Since: v19"
      operationId: apiTokenRemoveExpired
      parameters:
      - name: user
        in: path
        description: "username, or special value `*`"
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Remove expired tokens result
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/RemoveExpiredTokens'
  /tours/endpoints:
    get:
      tags:
      - enterprise
      - tours
      summary: "Get Tour Endpoints List [Enterprise]"
      description: List the endpoints usable by Tours
      operationId: apiRundeckEndpoints
      responses:
        "200":
          description: List
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
  /user/info:
    get:
      tags:
      - user
      summary: Get User Profile
      description: |-
        Get the user profile data for current user.

        Since: v21
      operationId: apiUserData_docs
      responses:
        "403":
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "404":
          description: Not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiErrorResponse'
        "200":
          description: User Profile Data
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    login: username
                    firstName: first name
                    lastName: last name
                    email: email@domain
    post:
      tags:
      - user
      summary: Modify user profile
      description: |-
        Modify the user profile data for current user.

        Since: v21
      operationId: apiUserDataPost_docs
      requestBody:
        description: Request content
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  firstName: Name
                  lastName: LastName
                  email: user@server.com
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1user~1info/get/responses/200'
  /user/info/{username}:
    get:
      tags:
      - user
      summary: Get User Profile
      description: |-
        Get the user profile data for another user.

        Authorization required: `app_admin` for `system` resource, if not the current user.

        Since: v21
      operationId: apiUserData
      parameters:
      - name: username
        in: path
        description: "Username, for a different user"
        required: true
        schema:
          type: string
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1user~1info/get/responses/200'
    post:
      tags:
      - user
      summary: Modify user profile
      description: |-
        Modify the user profile data for another user.

        Authorization required: `app_admin` for `system` resource, if not the current user.

        Since: v21
      operationId: apiOtherUserDataPost_docs
      parameters:
      - name: username
        in: path
        description: "Username, for a different user"
        required: true
        schema:
          type: string
      requestBody:
        description: Request content
        content:
          application/json:
            schema:
              type: object
            examples:
              example:
                value:
                  firstName: Name
                  lastName: LastName
                  email: user@server.com
      responses:
        "200":
          content:
            application/json:
              schema:
                type: object
          $ref: '#/paths/~1user~1info/get/responses/200'
  /user/list:
    get:
      tags:
      - user
      summary: List users
      description: |-
        Get a list of all the users.

        Authorization required: `app_admin` for `system` resource

        Since: v21
      operationId: apiUserList
      responses:
        "200":
          description: |
            Success Response, with a list of users.

            For APIv27+, the results will contain additional fields:
            * `created` creation date
            * `updated` updated date
            * `lastJob` last job execution
            * `tokens` number of API tokens
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
              examples:
                example:
                  value: |-
                    [{
                        "login":"user",
                        "firstName":"Name",
                        "lastName":"LastName",
                        "email":"user@server.com",
                        "created": "2017-10-01T09:00:20Z",
                        "updated": "2018-08-24T13:53:02Z",
                        "lastJob": "2018-08-28T13:31:00Z",
                        "tokens": 1
                    },
                    {
                        "login":"admin",
                        "firstName":"Admin",
                        "lastName":"Admin",
                        "email":"admin@server.com",
                        "created": "2016-07-17T18:42:00Z",
                        "updated": "2018-08-24T13:53:00Z",
                        "lastJob": "2018-08-28T13:31:00Z",
                        "tokens": 6
                    }]
  /user/roles:
    get:
      tags:
      - authorization
      - user
      summary: List Authorized Roles
      description: |-
        Get a list of the authenticated user's roles.

        Since: v30
      operationId: apiListRoles
      responses:
        "200":
          description: "Success response, with a list of roles."
          content:
            application/json:
              schema:
                type: object
              examples:
                example:
                  value:
                    roles:
                    - admin
                    - user
  /userclass/allocations:
    get:
      tags:
      - enterprise
      summary: Get allocated User Classes
      description: |-
        Get the User Class allocations provided by the License.

        The response will contain the allocation state, the current allocations by username, and summary information.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

         Since v41
      operationId: getUserClassAllocations
      responses:
        "200":
          description: User Classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassAllocationResponse'
  /userclass/available:
    get:
      tags:
      - enterprise
      summary: Get available User Classes
      description: |-
        Get a list of User Classes that are available.

        The response will be a list of User Class Definitions.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

         Since v41
      operationId: getUserClassesAvailable
      responses:
        "200":
          description: User Classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassList'
  /userclass/enabled:
    get:
      tags:
      - enterprise
      summary: Feature enablement check
      description: Return whether the feature is enabled. Since v41
      operationId: getEnabled
      responses:
        "200":
          description: Feature enablement response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/EnabledResponse'
  /userclass/self:
    get:
      tags:
      - enterprise
      summary: Get current user's User Class assignment
      description: |-
        Get the User Class assignment of the current user.

        The response will contain the user class name, or `NONE` if unassigned.

        Authorization required: none.

         Since v41
      operationId: getUserClassSelf
      responses:
        "200":
          description: User Class assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassResponse'
  /userclass/state:
    get:
      tags:
      - enterprise
      summary: Get allocated User Class State
      description: |-
        Get the User Class state.

        The response will contain the allocation state, and summary information.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

         Since v41
      operationId: getUserClassAllocationsState
      responses:
        "200":
          description: User Classes
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassAllocationResponse'
  /userclass/update:
    post:
      tags:
      - enterprise
      summary: Update multiple user class assignments
      description: "Allows modifying multiple User Class assignments in one request.\n\
        \nThis action can operate in one of three behaviors:\n\n1. If the request\
        \ contains the `allocations` definition, those allocations will be set.\n\
        2. If the request contains `bulkRemove` value `true`, and a set of `usernames`,\
        \ then the specified \nusernames will have their user class assignments removed.\n\
        3. If the request values `bulkAssign` and `usernames` are set, then all the\
        \ specified usernames will be assigned to the User Class specified in `bulkAssign`.\n\
        \nIf the request doesn't match one of these three modes, a 400 error will\
        \ be returned with error code `api.error.item.unsupported-format`.\n\nThe\
        \ response will contain the current user class assignments, if successful.\n\
        \nIf an allocation error occurs, such as the allocation of the specified User\
        \ Class is already full,\nthen a User Class Allocation error will be returned\
        \ with a 400 status code with error code `api.error.entitlements.user-class.allocation.exceeded`.\n\
        \nAuthorization required: `admin` or `app_admin` access for `user` resource\
        \ type.\n\n Since v41"
      operationId: storeUserClasses
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserClassAllocationChange'
            examples:
              update-user-class:
                summary: Specify the user class name
                value:
                  userclass: FullUser
      responses:
        "200":
          description: User Class allocation information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassAllocationResponse'
        "400":
          description: Format error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BasicError'
  /userclass/user/{username}:
    get:
      tags:
      - enterprise
      summary: Get a user's User Class assignment
      description: "Get the User Class assignment of the specified user.\n\nThe response\
        \ will contain the user class name, or `NONE` if unassigned.\n\nAuthorization\
        \ required for current user: none\n \nAuthorization required for other user:\
        \ `admin` or `app_admin` access for `user` resource type.\n\n Since v41"
      operationId: getUserClass
      parameters:
      - name: username
        in: path
        description: User Name
        required: true
        schema:
          type: string
      responses:
        "200":
          description: User Class assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassResponse'
    post:
      tags:
      - enterprise
      summary: Set a user's User Class assignment
      description: |-
        Set the User Class assignment of the specified user.

        The response will contain the user class assignment, if successful.

        If an allocation error occurs, such as the allocation of the specified User Class is already full,
        then a User Class Allocation error will be returned with a 400 status code with error code `api.error.entitlements.user-class.allocation.exceeded`.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

         Since v41
      operationId: setUserClass
      parameters:
      - name: username
        in: path
        description: User Name
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/SetUserclassModel'
            examples:
              set-user-class:
                summary: Specify the user class name
                value:
                  userclass: FullUser
      responses:
        "200":
          description: User Class assignment
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassResponse'
        "400":
          description: User Class Allocation error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/UserClassAllocationError'
    delete:
      tags:
      - enterprise
      summary: Delete a user's User Class assignment
      description: |-
        Remove the User Class assignment of the specified user.

        The response will be 204 No Content if successful.

        Authorization required: `admin` or `app_admin` access for `user` resource type.

         Since v41
      operationId: removeUserClass
      parameters:
      - name: username
        in: path
        description: User Name
        required: true
        schema:
          type: string
      responses:
        "204":
          description: No content
  /webhook/{authtoken}:
    post:
      tags:
      - webhook
      summary: Send Webhook Event
      description: "You may post whatever data you wish to the webhook endpoint, however\
        \ the plugin you are \nusing must\nbe able to handle the data you post. If\
        \ the webhook plugin associated with the webhook can't handle\nthe content\
        \ type posted you will get an error response.\n\nThe webhook plugin will determine\
        \ the response received.\nPlease see the documentation for the plugin that\
        \ is configured for the webhook endpoint you are using.\n\nIf the webhook\
        \ is defined to require the authorization secret, then the `Authorization`\
        \ HTTP header must be included\nwith a value that matches the secret.\n\n\
        Since: v33\n"
      operationId: post
      parameters:
      - name: authtoken
        in: path
        description: Webhook auth token
        required: true
        schema:
          type: string
      responses:
        "200":
          description: Default response
          content:
            '*/*':
              examples:
                example:
                  value: ok
        "400":
          description: Error response
          content:
            application/json:
              examples:
                example:
                  value:
                    err: Error message
        "503":
          description: Webhook not enabled
          content:
            application/json:
              examples:
                example:
                  value:
                    err: Webhook not enabled
      security:
      - webhookTokenHeader: []
components:
  schemas:
    ApiBulkJobDeleteRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
        idlist:
          type: string
          description: A comma separated list of ids
        id:
          type: string
    ApiErrorResponse:
      type: object
      properties:
        error:
          type: boolean
        apiversion:
          type: integer
          format: int32
        errorCode:
          type: string
        message:
          type: string
      description: Error Response
    ApiPluginListProvider:
      type: object
      properties:
        service:
          type: string
        artifactName:
          type: string
        name:
          type: string
        id:
          type: string
        builtin:
          type: boolean
        pluginVersion:
          type: string
        title:
          type: string
        description:
          type: string
        author:
          type: string
        iconUrl:
          type: string
          description: "URL to icon file for the plugin if present. Since: v40"
        providerMetadata:
          type: object
          additionalProperties: true
          description: "Map of metadata about the plugin if present. Since: v40"
    ApiRunAdhocRequest:
      type: object
      properties:
        project:
          type: string
        exec:
          type: string
        script:
          type: string
        scriptInterpreter:
          type: string
        argString:
          type: string
        interpreterArgsQuoted:
          type: boolean
        url:
          type: string
        description:
          type: string
        filter:
          type: string
        asUser:
          type: string
        fileExtension:
          type: string
        nodeKeepgoing:
          type: boolean
        nodeThreadcount:
          type: integer
          format: int32
        meta:
          type: object
          additionalProperties:
            type: string
    BaseQuery:
      type: object
      properties:
        max:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        sortBy:
          type: string
        sortOrder:
          type: string
    BasicError:
      type: object
      properties:
        error:
          type: string
        errorCode:
          type: string
    BasicErrorResponse:
      type: object
      properties:
        error:
          type: boolean
        apiversion:
          type: integer
          format: int32
        errorCode:
          type: string
        message:
          type: string
    Calendar:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        calendarType:
          type: string
        scope:
          type: string
        allReference:
          type: boolean
        enable:
          type: boolean
        dateType:
          type: string
        dateDefinitionJson:
          type: string
        project:
          type: string
        jsonData:
          type: string
        recurrent:
          type: boolean
        dateCreated:
          type: string
          format: date-time
        lastUpdated:
          type: string
          format: date-time
        dateDefinition:
          type: array
          items:
            type: object
        reference:
          type: array
          items:
            type: object
    Condition:
      required:
      - condition
      type: object
      properties:
        path:
          type: string
        value:
          type: string
        condition:
          $ref: '#/components/schemas/ConditionType'
    ConditionEvaluation:
      type: object
      properties:
        satisfied:
          type: boolean
        value:
          type: object
        condition:
          $ref: '#/components/schemas/Condition'
        error:
          $ref: '#/components/schemas/Exception'
    ConditionType:
      type: string
      enum:
      - contains
      - dateTimeAfter
      - dateTimeBefore
      - exists
      - isA
      - equals
    CreateRunnerRequest:
      required:
      - description
      - name
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        tagNames:
          type: string
          description: Comma separated tags
        assignedProjects:
          type: object
          additionalProperties:
            type: string
    CreateToken:
      type: object
      properties:
        roles:
          type: array
          description: "since: v19"
          items:
            type: string
      description: Create Token request using a list of Roles
      allOf:
      - $ref: '#/components/schemas/CreateTokenBase'
    CreateTokenBase:
      type: object
      properties:
        user:
          type: string
        duration:
          title: "Time Duration, e.g. 1d2h3m15s"
          type: string
          description: "since: v19"
          format: timeduration
        name:
          type: string
          description: "since: v19"
    CreateTokenStringRoles:
      type: object
      properties:
        roles:
          type: string
          description: "since: v19"
      description: Create Token request using a comma-separated string for Roles
      allOf:
      - $ref: '#/components/schemas/CreateTokenBase'
    DataSet:
      type: object
      properties:
        name:
          type: string
        label:
          type: string
        entries:
          type: array
          items:
            $ref: '#/components/schemas/IDataEntry'
        big:
          type: boolean
    DefaultMessageSourceResolvable:
      required:
      - code
      type: object
      properties:
        code:
          type: string
        codes:
          type: array
          items:
            type: string
        defaultMessage:
          type: string
        arguments:
          type: array
          items:
            type: object
    DeleteBulkRequest:
      type: object
      properties:
        ids:
          type: array
          items:
            type: string
    DeleteBulkRequestLong:
      type: object
      properties:
        ids:
          type: array
          items:
            type: integer
            format: int64
    DeleteBulkResponse:
      type: object
      properties:
        requestCount:
          type: integer
          description: number of requested execution deletions
          format: int32
        allsuccessful:
          type: boolean
          description: true if all deletions were successful
        successCount:
          type: integer
          description: number of deletion attempts that succeeded
          format: int32
        failedCount:
          type: integer
          description: number of deletion attempts that failed
          format: int32
        failures:
          type: array
          items:
            $ref: '#/components/schemas/FailedItem'
    EnabledResponse:
      type: object
      properties:
        enabled:
          type: boolean
    ErrorResponse:
      type: object
      properties:
        errorCode:
          type: string
        apiVersion:
          type: integer
          format: int32
        errorMessage:
          type: string
        error:
          type: string
        apiversion:
          type: integer
          format: int32
        message:
          type: string
    Errors:
      type: object
      properties:
        errorCount:
          type: integer
          format: int32
        objectName:
          type: string
        nestedPath:
          type: string
        globalErrorCount:
          type: integer
          format: int32
        globalErrors:
          type: array
          items:
            $ref: '#/components/schemas/ObjectError'
        globalError:
          $ref: '#/components/schemas/ObjectError'
        fieldErrorCount:
          type: integer
          format: int32
        fieldErrors:
          type: array
          items:
            $ref: '#/components/schemas/FieldError'
        allErrors:
          type: array
          items:
            $ref: '#/components/schemas/ObjectError'
        fieldError:
          $ref: '#/components/schemas/FieldError'
    EventRoutingResult:
      type: object
      properties:
        event:
          $ref: '#/components/schemas/RouterEvent'
        ruleRoutingResults:
          type: array
          items:
            $ref: '#/components/schemas/RuleRoutingResult'
    Exception:
      type: object
    ExecutionFileInfoList:
      required:
      - files
      type: object
      properties:
        paging:
          $ref: '#/components/schemas/Paging'
        files:
          type: array
          items:
            $ref: '#/components/schemas/JobFileInfo'
    ExecutionModeResult:
      type: object
      properties:
        executionMode:
          type: string
          enum:
          - active
          - passive
    FailedItem:
      type: object
      properties:
        message:
          type: string
        id:
          type: string
    FeatureEnabledResult:
      type: object
      properties:
        enabled:
          type: boolean
          description: "since: v42"
        name:
          type: string
          description: "since: v42"
    FieldError:
      type: object
      allOf:
      - $ref: '#/components/schemas/ObjectError'
      - $ref: '#/components/schemas/DefaultMessageSourceResolvable'
      - required:
        - field
        properties:
          bindingFailure:
            type: boolean
          rejectedValue:
            type: object
          field:
            type: string
    IDataEntry:
      type: object
      properties:
        key:
          type: string
        value:
          type: object
        description:
          type: string
        label:
          type: string
        unit:
          type: string
        status:
          type: string
        secured:
          type: boolean
        concealed:
          type: boolean
        whitelist:
          type: boolean
    ItemMeta:
      type: object
      properties:
        name:
          type: string
        data:
          type: object
          additionalProperties: true
    JobBrowseItemData:
      type: object
      properties:
        job:
          type: boolean
        groupPath:
          type: string
        jobName:
          type: string
        description:
          type: string
        id:
          type: string
        meta:
          type: array
          items:
            $ref: '#/components/schemas/ItemMeta'
    JobBrowseResponse:
      type: object
      properties:
        path:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/JobBrowseItemData'
    JobFileInfo:
      type: object
      properties:
        id:
          type: string
        jobId:
          type: string
        execId:
          type: integer
          format: int64
        optionName:
          type: string
        fileName:
          type: string
        sha:
          type: string
        size:
          type: integer
          format: int64
        dateCreated:
          type: string
          format: iso
        expirationDate:
          type: string
          format: iso
        user:
          type: string
        fileState:
          type: string
        serverNodeUUID:
          type: string
    JobFileUpload:
      type: object
      properties:
        total:
          type: integer
          format: int32
        options:
          type: object
          additionalProperties:
            type: string
    JobInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        group:
          type: string
        project:
          type: string
        description:
          type: string
        href:
          type: string
        permalink:
          type: string
        scheduled:
          type: boolean
        scheduleEnabled:
          type: boolean
        enabled:
          type: boolean
        serverNodeUUID:
          type: string
        serverOwner:
          type: boolean
        averageDuration:
          type: integer
          format: int64
        nextScheduledExecution:
          type: string
          format: date-time
        futureScheduledExecutions:
          type: array
          items:
            type: string
            format: date-time
    JobOption:
      type: object
      properties:
        name:
          type: string
        value:
          type: string
    JobReference:
      type: object
      properties:
        jobId:
          type: string
        jobName:
          type: string
        groupPath:
          type: string
    JobRunStatus:
      type: string
      enum:
      - NOT_STARTED
      - STARTED
      - NOT_FOUND
      - UNKNOWN_ERROR
    LicenseEntitlement:
      type: object
      properties:
        name:
          type: string
        description:
          $ref: '#/components/schemas/LicenseEntitlementDescription'
        value:
          type: object
          additionalProperties:
            type: string
      description: License Entitlement Information
    LicenseEntitlementDescription:
      type: object
      properties:
        title:
          type: string
        description:
          type: string
        properties:
          type: array
          items:
            type: object
            additionalProperties:
              type: string
    LicenseInfoResponse:
      type: object
      properties:
        authorized:
          type: boolean
        company:
          type: string
        contactEmail:
          type: string
        application:
          type: string
        editions:
          type: array
          items:
            type: string
        applicationVersion:
          type: array
          items:
            type: string
        gracePeriod:
          type: integer
          description: Expiry Grace Period in Days
          format: int32
        type:
          type: string
        licenseId:
          type: string
        licenseVersion:
          type: string
        issueDate:
          type: string
          description: Issue Date
          format: ISO8601
        validSince:
          type: string
          description: Valid Since Date
          format: ISO8601
        validUntil:
          type: string
          description: Valid Until Date
          format: ISO8601
        graceUntil:
          type: string
          description: Grace Period until Date
          format: ISO8601
        state:
          type: string
        perpetual:
          type: boolean
        active:
          type: boolean
        remaining:
          type: integer
          description: License Remaining Period in Days
          format: int32
        shouldWarn:
          type: boolean
        baseUrl:
          type: string
        edition:
          type: string
        serverUUIDs:
          type: array
          items:
            type: string
        reason:
          type: string
        warning:
          type: string
        invalidCode:
          type: string
        entitlements:
          type: array
          items:
            $ref: '#/components/schemas/LicenseEntitlement'
      description: License Information
    LinkListResponse:
      type: object
      properties:
        _links:
          type: object
          additionalProperties:
            $ref: '#/components/schemas/link'
          description: Available named links
      description: API links
    LoginRoleData:
      type: object
      properties:
        description:
          type: string
        id:
          type: integer
          format: int64
        authority:
          type: string
    Manifest:
      type: object
      properties:
        name:
          type: string
        enabled:
          type: boolean
        tours:
          type: array
          items:
            $ref: '#/components/schemas/Tour'
    MetricsQueryResponse:
      type: object
      properties:
        total:
          type: integer
          format: int64
        duration:
          $ref: '#/components/schemas/MetricsQueryResponse.Duration'
    MetricsQueryResponse.Duration:
      type: object
      properties:
        average:
          type: string
        max:
          type: string
        min:
          type: string
    ModeLaterRequest:
      type: object
      properties:
        value:
          pattern: "((\\d+)[smhdwy]?)+"
          type: string
          description: |
            Time duration expression.

            A series of: an integer followed by a unit.

            Units:
            * `s` - seconds (default)
            * `m` - minutes
            * `h` - hours
            * `d` - days
            * `w` - weeks
            * `y` - years.

            Examples: `1d12h`, `3600` (defaults to seconds), `15m30s`.
      description: Request to enable/disable the mode after a time delay.
    ModeLaterResponse:
      type: object
      properties:
        saved:
          type: boolean
        msg:
          type: string
    NewRunnerResponse:
      type: object
      allOf:
      - $ref: '#/components/schemas/RegenRunnerCredResponse'
      - properties:
          name:
            type: string
          description:
            type: string
          projectAssociations:
            type: object
            additionalProperties:
              type: string
    ObjectError:
      type: object
      allOf:
      - $ref: '#/components/schemas/DefaultMessageSourceResolvable'
      - required:
        - objectName
        properties:
          objectName:
            type: string
    OutputStream:
      type: object
    Paging:
      type: object
      properties:
        count:
          type: integer
          format: int32
        max:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
        total:
          type: integer
          format: int32
    PingResponse:
      type: object
      properties:
        completed:
          type: boolean
        message:
          type: string
        iserror:
          type: boolean
    PingTokenResponse:
      type: object
      properties:
        pingToken:
          type: string
    PolicyType:
      type: string
      enum:
      - any
      - all
    ProjectArchiveParams:
      type: object
      properties:
        project:
          type: string
        jobUuidOption:
          type: string
        importExecutions:
          type: boolean
        importConfig:
          type: boolean
        importNodesSources:
          type: boolean
        importACL:
          type: boolean
        importScm:
          type: boolean
        validateJobref:
          type: boolean
        exportAll:
          type: boolean
        exportJobs:
          type: boolean
        exportExecutions:
          type: boolean
        exportConfigs:
          type: boolean
        exportReadmes:
          type: boolean
        exportAcls:
          type: boolean
        exportScm:
          type: boolean
        importComponents:
          type: object
          additionalProperties:
            type: boolean
        importOpts:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
        exportComponents:
          type: object
          additionalProperties:
            type: boolean
        exportOpts:
          type: object
          additionalProperties:
            type: object
            additionalProperties:
              type: string
        stripJobRef:
          type: string
        targetproject:
          type: string
        apitoken:
          type: string
        url:
          type: string
        preserveuuid:
          type: boolean
    ProjectCalendarsResponse:
      type: object
      properties:
        calendar:
          $ref: '#/components/schemas/Calendar'
        msg:
          type: string
        saved:
          type: boolean
      description: Response to POST request to to create or update a calendar at project
        level
    ProjectModeLaterRequest:
      type: object
      properties:
        type:
          type: string
          description: "Mode to change, one of `executions` or `schedule`"
        value:
          pattern: "((\\d+)[smhdwy]?)+"
          type: string
          description: |
            Time duration expression.

            A series of: an integer followed by a unit.

            Units:
            * `s` - seconds (default)
            * `m` - minutes
            * `h` - hours
            * `d` - days
            * `w` - weeks
            * `y` - years.

            Examples: `1d12h`, `3600` (defaults to seconds), `15m30s`.
      description: Request to enable/disable executions or schedules after a time
        delay.
      allOf:
      - $ref: '#/components/schemas/ModeLaterRequest'
    ROIDataBasicErrorResponse:
      type: object
      properties:
        error:
          type: string
    ROIDataLoadingState:
      type: object
      properties:
        state:
          type: string
          description: "The state of asynch loading of the remote file, one of AVAILABLE_REMOTE\
            \ or PENDING_LOCAL"
    RdJobQueryInput:
      type: object
      allOf:
      - $ref: '#/components/schemas/RdPageable'
      - properties:
          errors:
            $ref: '#/components/schemas/Errors'
          inputParamMap:
            type: object
            additionalProperties: true
          jobFilter:
            type: string
          jobExactFilter:
            type: string
          projFilter:
            type: string
          groupPath:
            type: string
          groupPathExact:
            type: string
          descFilter:
            type: string
          loglevelFilter:
            type: string
          idlist:
            type: string
          scheduledFilter:
            type: boolean
          scheduleEnabledFilter:
            type: boolean
          executionEnabledFilter:
            type: boolean
          serverNodeUUIDFilter:
            type: string
          daysAhead:
            type: integer
            format: int32
          runJobLaterFilter:
            type: boolean
          paginatedRequired:
            type: boolean
          sortBy:
            type: string
          sortOrder:
            type: string
    RdPageable:
      type: object
      properties:
        errors:
          $ref: '#/components/schemas/Errors'
        sortOrders:
          type: array
          items:
            $ref: '#/components/schemas/SortOrder'
        max:
          type: integer
          format: int32
        offset:
          type: integer
          format: int32
    RegenRunnerCredResponse:
      type: object
      properties:
        runnerId:
          type: string
        token:
          type: string
          description: Runner authentication token
        downloadTk:
          type: string
          description: Runner package download token
    RemoveExpiredTokens:
      type: object
      properties:
        count:
          type: integer
          format: int32
        message:
          type: string
    Resources:
      type: object
      properties:
        empty:
          type: boolean
        description:
          type: string
        content:
          type: string
        writeable:
          type: boolean
        href:
          type: string
        editPermalink:
          type: string
        syntaxMimeType:
          type: string
    ResultDataAvailableResponse:
      type: object
      properties:
        loadable:
          type: boolean
        message:
          type: string
    ResultDataBasicErrorResponse:
      type: object
      properties:
        error:
          type: string
    ResultDataLoadingState:
      type: object
      properties:
        state:
          type: string
          description: "The state of asynch loading of the remote file, one of AVAILABLE_REMOTE\
            \ or PENDING_LOCAL"
    RoiMetricsController.DataAvailableResponse:
      type: object
      properties:
        loadable:
          type: boolean
        message:
          type: string
    RouterEvent:
      type: object
      properties:
        meta:
          $ref: '#/components/schemas/RouterEventMetadata'
        event:
          type: object
          additionalProperties: true
    RouterEventMetadata:
      type: object
      properties:
        id:
          type: string
    RoutingRule:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        debug:
          type: boolean
        enabled:
          type: boolean
        policy:
          $ref: '#/components/schemas/PolicyType'
        jobId:
          type: string
        jobArgString:
          type: string
        jobOptions:
          type: array
          items:
            $ref: '#/components/schemas/JobOption'
        nodeFilter:
          type: string
        user:
          type: string
        conditions:
          type: array
          items:
            $ref: '#/components/schemas/Condition'
    RuleEvaluation:
      type: object
      properties:
        satisfied:
          type: boolean
        rule:
          $ref: '#/components/schemas/RoutingRule'
        conditionEvaluations:
          type: array
          items:
            $ref: '#/components/schemas/ConditionEvaluation'
    RuleRoutingResult:
      type: object
      properties:
        ruleEvaluation:
          $ref: '#/components/schemas/RuleEvaluation'
        jobRunStatus:
          $ref: '#/components/schemas/JobRunStatus'
        jobId:
          type: string
        executionId:
          type: string
        errorMsg:
          type: string
        renderedOptions:
          type: object
          additionalProperties:
            type: string
    RunnerInfo:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
        runnerVersion:
          type: string
        projectAssociations:
          $ref: '#/components/schemas/RunnerProjectAssociations'
        createTime:
          type: string
          format: date-time
        lastCheckin:
          type: string
        lastCheckinAlert:
          type: boolean
        runningOperations:
          type: integer
          format: int32
        uptime:
          type: integer
          format: int64
        tagNames:
          type: array
          items:
            type: string
    RunnerList:
      type: object
      properties:
        runners:
          type: array
          items:
            $ref: '#/components/schemas/RunnerSummary'
    RunnerProjectAssociations:
      type: object
      properties:
        projectNodeFilters:
          type: object
          additionalProperties:
            type: string
    RunnerProviderSummary:
      type: object
      properties:
        provider:
          type: string
        serviceName:
          type: string
        pluginName:
          type: string
    RunnerSummary:
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        description:
          type: string
        status:
          type: string
        version:
          type: string
        associatedProjects:
          type: integer
          format: int32
        lastCheckin:
          type: string
        lastCheckinAlert:
          type: boolean
        selected:
          type: boolean
        tagNames:
          type: array
          items:
            type: string
        providers:
          type: array
          items:
            $ref: '#/components/schemas/RunnerProviderSummary'
    ScmAction:
      type: object
      properties:
        input:
          type: object
          additionalProperties:
            type: string
          description: input fields for the action
        items:
          type: array
          description: list of selected item IDs
          items:
            type: string
        jobs:
          type: array
          description: list of selected Job IDs
          items:
            type: string
        deleted:
          type: array
          description: list of deleted item IDs
          items:
            type: string
        deletedJobs:
          type: array
          description: list of deleted Job IDs (import)
          items:
            type: string
    ScmActionInput:
      type: object
      properties:
        actionId:
          type: string
          description: ID for the action
        integration:
          type: string
          enum:
          - import
          - export
        title:
          type: string
          description: Display title for the action
        description:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ScmPluginInputField'
        importItems:
          type: array
          items:
            $ref: '#/components/schemas/ScmImportActionItem'
        exportItems:
          type: array
          items:
            $ref: '#/components/schemas/ScmExportActionItem'
    ScmActionResult:
      type: object
      properties:
        message:
          type: string
          description: Status message
        success:
          type: boolean
          description: "true if successful, false otherwise"
        nextAction:
          type: string
          description: Name of the next `action` that should be invoked.
        validationErrors:
          type: object
          additionalProperties:
            type: string
          description: "Validation errors, keyed by input field name."
    ScmCommit:
      type: object
      properties:
        commitId:
          type: string
        message:
          type: string
        author:
          type: string
        date:
          type: string
          format: date-time
        info:
          type: object
          additionalProperties: true
    ScmExportActionItem:
      type: object
      properties:
        itemId:
          type: string
          description: "ID of the repo item, e.g. a file path"
        originalId:
          type: string
          description: "ID of a repo item if the job was renamed and now is stored\
            \ at a different repo path, or empty/null"
        job:
          $ref: '#/components/schemas/JobReference'
        deleted:
          type: boolean
          description: whether the job was deleted and requires deleting the associated
            repo item
        renamed:
          type: boolean
          description: boolean if the job was renamed
        status:
          type: string
          description: "file status String, the same value as in the `synchState`\
            \ of Job Scm Status result."
    ScmImportActionItem:
      type: object
      properties:
        itemId:
          type: string
          description: "ID of the repo item, e.g. a file path"
        job:
          $ref: '#/components/schemas/JobReference'
        tracked:
          type: boolean
          description: true if there is an associated `job`
        deleted:
          type: boolean
          description: whether the job was deleted on remote and requires to be deleted
        status:
          type: string
          description: "file status String, the same value as in the `synchState`\
            \ of Job Scm Status result."
    ScmJobDiff:
      type: object
      properties:
        id:
          type: string
        project:
          type: string
        integration:
          type: string
        commit:
          $ref: '#/components/schemas/ScmCommit'
        incomingCommit:
          $ref: '#/components/schemas/ScmCommit'
        diffContent:
          type: string
    ScmJobStatus:
      type: object
      properties:
        id:
          type: string
        project:
          type: string
        integration:
          type: string
        synchState:
          type: string
        message:
          type: string
        actions:
          type: array
          items:
            type: string
        commit:
          $ref: '#/components/schemas/ScmCommit'
    ScmPluginDescription:
      type: object
      properties:
        type:
          type: string
        title:
          type: string
        description:
          type: string
        configured:
          type: boolean
        enabled:
          type: boolean
    ScmPluginInputField:
      type: object
      properties:
        title:
          type: string
          description: display title for the field
        name:
          type: string
          description: "identifier for the field, used when submitting the input values"
        description:
          type: string
          description: textual description
        type:
          type: string
          description: "data type of the field: `String`, `Integer`, `Select` (multi-value),\
            \ `FreeSelect` (open-ended multi-value), `Boolean` (true/false)"
          enum:
          - String
          - Integer
          - Select
          - FreeSelect
          - Boolean
        required:
          type: boolean
          description: whether the input is required
        defaultValue:
          type: string
          description: a default value if the input does not specify one
        values:
          type: array
          description: "if the type is `Select` or `FreeSelect`, a list of string\
            \ values to choose from"
          items:
            type: string
        scope:
          type: string
        renderingOptions:
          type: object
          additionalProperties:
            type: string
          description: "a key/value map of options, such as declaring that GUI display\
            \ the input as a password field."
    ScmPluginList:
      type: object
      properties:
        integration:
          type: string
        plugins:
          type: array
          items:
            $ref: '#/components/schemas/ScmPluginDescription'
    ScmPluginSetupInput:
      type: object
      properties:
        type:
          type: string
        integration:
          type: string
        fields:
          type: array
          items:
            $ref: '#/components/schemas/ScmPluginInputField'
    ScmProjectPluginConfig:
      type: object
      properties:
        integration:
          type: string
          enum:
          - import
          - export
        project:
          type: string
          description: project name
        type:
          type: string
          description: plugin type name
        enabled:
          type: boolean
        config:
          type: object
          additionalProperties:
            type: string
          description: ' set of key/value pairs for the configuration'
    ScmProjectStatus:
      type: object
      properties:
        project:
          type: string
        integration:
          type: string
          enum:
          - import
          - export
        synchState:
          type: string
          description: |
            Indicates the state.

            Import plugin values for `synchState`:

            * `CLEAN` - no changes
            * `UNKNOWN` - status unknown
            * `REFRESH_NEEDED` - plugin needs to refresh
            * `IMPORT_NEEDED` - some changes need to be imported
            * `DELETE_NEEDED` - some jobs need to be deleted

            Export plugin values for `synchState`:

            * `CLEAN` - no changes
            * `REFRESH_NEEDED` - plugin needs to refresh
            * `EXPORT_NEEDED` - some changes need to be exported
            * `CREATE_NEEDED` - some jobs need to be added to the repo
          enum:
          - CLEAN
          - UNKNOWN
          - REFRESH_NEEDED
          - IMPORT_NEEDED
          - DELETE_NEEDED
          - EXPORT_NEEDED
          - CREATE_NEEDED
        message:
          type: string
        actions:
          type: array
          description: "empty, or a list of action ID strings."
          items:
            type: string
    ScmToggleRequest:
      type: object
      properties:
        enabled:
          type: boolean
    ScmToggleResponse:
      type: object
      properties:
        modified:
          type: boolean
    SetUserclassModel:
      type: object
      properties:
        userclass:
          type: string
    SortOrder:
      type: object
      properties:
        column:
          type: string
        direction:
          type: string
    Source:
      type: object
      properties:
        project:
          type: string
        index:
          type: integer
          format: int32
        type:
          type: string
        errors:
          type: string
        resources:
          $ref: '#/components/schemas/Resources'
    Step:
      type: object
      properties:
        title:
          type: string
        content:
          type: string
        nextStepUrl:
          type: string
        currentUrl:
          type: string
        stepIndicator:
          type: string
        stepIndicatorPosition:
          type: string
    SystemInfoModel:
      type: object
      properties:
        system:
          allOf:
          - $ref: '#/components/schemas/system'
          - description: System Information
      description: System Information
    SystemReportItem:
      type: object
      properties:
        label:
          type: string
        name:
          type: string
    TagCountResponse:
      type: object
      properties:
        tags:
          type: object
          additionalProperties:
            type: integer
            format: int32
    Token:
      type: object
      properties:
        name:
          type: string
          description: "since: v37"
        id:
          type: string
          description: unique ID
        token:
          type: string
          description: "Token value (only available at creation time). since: v19"
        creator:
          type: string
          description: "Token creator. since: v19"
        user:
          type: string
          description: Token effective username
        roles:
          type: array
          description: "since: v19"
          items:
            type: string
        expiration:
          type: string
          description: "since: v19"
          format: iso
        expired:
          type: boolean
          description: "since: v19"
    Tour:
      type: object
      properties:
        name:
          type: string
        key:
          type: string
        description:
          type: string
        enabled:
          type: boolean
        steps:
          type: array
          items:
            $ref: '#/components/schemas/Step'
    TourManagerErrorResponse:
      type: object
      properties:
        err:
          type: string
    TourManagerSuccessResponse:
      type: object
      properties:
        msg:
          type: string
    UiData:
      type: object
      properties:
        projectCount:
          type: integer
          format: int32
        allowedActions:
          type: array
          items:
            type: string
        features:
          type: array
          items:
            type: string
    UpdateRunnerRequest:
      required:
      - runnerId
      type: object
      properties:
        runnerId:
          minLength: 1
          type: string
        name:
          type: string
        description:
          type: string
        assignedProjects:
          type: object
          additionalProperties:
            type: string
        tagNames:
          type: string
    UserClassAllocationChange:
      type: object
      properties:
        usernames:
          type: array
          items:
            type: string
        bulkAssign:
          type: string
        bulkRemove:
          type: boolean
      allOf:
      - $ref: '#/components/schemas/UserClassAllocationModel'
    UserClassAllocationError:
      type: object
      properties:
        excessions:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: "Exceeded User Class assignments, by user class name"
        limits:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: "Allowed User Class assignment limits, by user class name"
      allOf:
      - $ref: '#/components/schemas/BasicError'
    UserClassAllocationModel:
      type: object
      properties:
        allocations:
          type: object
          additionalProperties:
            type: string
          description: "The current User Class allocation set, as a map of user name\
            \ to user class name."
    UserClassAllocationResponse:
      type: object
      properties:
        state:
          type: string
          description: "The current state of the user classe allocations. One of:\
            \ VALID, EXCEEDED, UPGRADED"
        message:
          type: string
        summary:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Current allocations by user class name.
        exceeded:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Exceeded allocations count by user class name.
        entitled:
          type: object
          additionalProperties:
            type: integer
            format: int64
          description: Entitled allocations count by user class name.
      allOf:
      - $ref: '#/components/schemas/UserClassAllocationModel'
    UserClassDefinition:
      type: object
      properties:
        name:
          type: string
        title:
          type: string
        description:
          type: string
    UserClassList:
      type: object
      properties:
        classes:
          type: array
          items:
            $ref: '#/components/schemas/UserClassDefinition'
    UserClassResponse:
      type: object
      properties:
        username:
          type: string
        userclass:
          type: string
    WebhookEvaluation:
      type: object
      properties:
        id:
          type: string
        time:
          type: string
          format: date-time
        event:
          type: object
        batchKey:
          type: string
        error:
          type: string
        routingResults:
          type: array
          items:
            $ref: '#/components/schemas/EventRoutingResult'
    basic:
      type: object
      properties:
        message:
          type: string
      description: Basic response
    cpu:
      type: object
      properties:
        loadAverage:
          $ref: '#/components/schemas/loadAverage'
        processors:
          type: integer
          format: int32
      description: Cpu Information
    executions:
      type: object
      properties:
        active:
          type: string
        executionMode:
          type: string
      description: Executions Information
    healthcheck:
      type: object
      properties:
        href:
          type: string
        contentType:
          type: string
      description: Health Check Information
    jvm:
      type: object
      properties:
        name:
          type: string
        vendor:
          type: string
        version:
          type: string
        implementationVersion:
          type: string
      description: Jvm System Information
    link:
      type: object
      properties:
        href:
          type: string
          description: Link URL
      description: Link definition
    loadAverage:
      type: object
      properties:
        unit:
          type: string
        average:
          type: integer
          format: int32
      description: Cpu Load Average Information
    memory:
      type: object
      properties:
        unit:
          type: string
        max:
          type: integer
          format: int64
        free:
          type: integer
          format: int64
        total:
          type: integer
          format: int64
      description: Memory Information
    metrics:
      type: object
      properties:
        href:
          type: string
        contentType:
          type: string
      description: Metrics Information
    os:
      type: object
      properties:
        arch:
          type: string
        name:
          type: string
        version:
          type: string
      description: Operating System Information
    ping:
      type: object
      properties:
        href:
          type: string
        contentType:
          type: string
      description: Ping Information
    rundeck:
      type: object
      properties:
        version:
          type: string
        build:
          type: string
        buildGit:
          type: string
        node:
          type: string
        base:
          type: string
        apiversion:
          type: string
        serverUUID:
          type: string
      description: Rundeck Information
    scheduler:
      type: object
      properties:
        running:
          type: integer
          format: int32
        threadPoolSize:
          type: integer
          format: int32
      description: Scheduler Information
    since:
      type: object
      properties:
        epoch:
          type: integer
          format: int64
        unit:
          type: string
        datetime:
          type: string
      description: Since Uptime Information
    stats:
      type: object
      properties:
        uptime:
          $ref: '#/components/schemas/uptime'
        cpu:
          $ref: '#/components/schemas/cpu'
        memory:
          $ref: '#/components/schemas/memory'
        scheduler:
          $ref: '#/components/schemas/scheduler'
        threads:
          $ref: '#/components/schemas/threads'
      description: Stat Information
    system:
      type: object
      properties:
        timestamp:
          $ref: '#/components/schemas/timestamp'
        rundeck:
          $ref: '#/components/schemas/rundeck'
        executions:
          $ref: '#/components/schemas/executions'
        os:
          $ref: '#/components/schemas/os'
        jvm:
          $ref: '#/components/schemas/jvm'
        stats:
          $ref: '#/components/schemas/stats'
        metrics:
          $ref: '#/components/schemas/metrics'
        threadDump:
          $ref: '#/components/schemas/threadDump'
        healthcheck:
          $ref: '#/components/schemas/healthcheck'
        ping:
          $ref: '#/components/schemas/ping'
        extended:
          type: object
          additionalProperties: true
      description: System Information
    threadDump:
      type: object
      properties:
        href:
          type: string
        contentType:
          type: string
      description: Thread Dump Information
    threads:
      type: object
      properties:
        active:
          type: integer
          format: int32
      description: Thread Information
    timestamp:
      type: object
      properties:
        epoch:
          type: integer
          format: int64
        unit:
          type: string
        datetime:
          type: string
      description: Timestamp Information
    uptime:
      type: object
      properties:
        duration:
          type: integer
          format: int32
        unit:
          type: string
        since:
          $ref: '#/components/schemas/since'
      description: Uptime Information
  securitySchemes:
    rundeckApiToken:
      type: apiKey
      name: X-Rundeck-Auth-Token
      in: header
    webhookTokenHeader:
      type: apiKey
      description: Webhook Event Authorization Security header requires the `Authorization`
        to match the secret value.
      name: Authorization
      in: header
